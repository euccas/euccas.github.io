<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 中文 | euccas.github.io]]></title>
  <link href="http://euccas.github.io/categories/zhong-wen/atom.xml" rel="self"/>
  <link href="http://euccas.github.io/"/>
  <updated>2017-04-23T20:17:14+08:00</updated>
  <id>http://euccas.github.io/</id>
  <author>
    <name><![CDATA[euccas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[谈谈微信小程序的入口设计 | on WeChat Design for Mini Programs]]></title>
    <link href="http://euccas.github.io/20170423/on-wechat-mini-program.html"/>
    <updated>2017-04-23T14:24:14+08:00</updated>
    <id>http://euccas.github.io/20170423/on-wechat-mini-program</id>
    <content type="html"><![CDATA[<p>现在流传的中国互联网圈四大热点是：百度的丑闻，支付宝的社交，微信的功能和网易的猪肉。这大概是个调侃的笑话，但是其中“微信的功能”，确实是我会特别留意和关心的，原因在于两点：</p>

<ol>
  <li>对微信产品设计的认可和关注</li>
  <li>对张小龙产品设计理念的好奇与学习</li>
</ol>

<p>最近几个月来微信最引人注目的功能变化，无疑是“微信小程序”的推出和初步推广。微信小程序，英文版名称为Mini Program，其实是微信推出的类似于React和Weex的以Javascript为基础的程序框架。微信小程序为开发者提供了各种UI组件和调用底层的API。通过小程序实现的App，无需安装就可以在微信平台使用。</p>

<p>微信小程序的入口，设置在微信底部4个固定Tab之一的”发现“菜单中。从功能上来看，微信小程序的入口类似于Apple App Store，但它的设计和App Store完全不同。下面是一些比较。</p>

<!--more-->

<h1 id="section">入口主界面</h1>

<p>用户第一次进入微信小程序的入口时，看到的有且仅有一个搜索框，其它就是空白。这显著不同于进入App Store后看到的各种玲琅满目的应用和排行榜。</p>

<p><img class="center" src="/images/post_images/2017/20170423-wechat_miniprogram_00.png" width="360"></p>

<h1 id="section-1">使用小程序</h1>

<p>通过搜索（或者其他二维码）入口找到一个小程序后，一次点击就直接开始了使用过程，没有安装，也没有App启动界面和过程。第一次和小程序交互时甚至会不习惯这个没有暂停的过程。我特别注意到的是，这个点击即使用的过程，也会影响到小程序App本身的入口设计，比如用注册登录作为主入口就不合适了，小程序App需要在最短的时间内提供有效的信息和功能给用户。</p>

<p><img class="center" src="/images/post_images/2017/20170423-wechat_miniprogram_01.png" width="360">
<img class="center" src="/images/post_images/2017/20170423-wechat_miniprogram_02.png" width="360"></p>

<h1 id="section-2">退出小程序</h1>

<p>退出一个使用中的小程序，是通过微信左上方的后退按钮。退出之后即回到搜索结果的页面。感觉上，好像刚刚什么都没有发生。而使用过的小程序，都会被保存在入口主界面搜索框下的列表中。列表可以手工逐项清除，删除方式和删除微信对话一样，左滑屏幕，选择删除。</p>

<p><img class="center" src="/images/post_images/2017/20170423-wechat_miniprogram_03.png" width="360"></p>

<p>微信小程序入口的这些特点，可以说是再一次充分展现了微信产品设计一直以来的风格，也即张小龙曾经讲过的关于微信背后的产品观。根据我所观察到的，总结一下有：</p>

<ul>
  <li>微信：让用户”聊完就走”。小程序：让用户“用完就走”。</li>
  <li>微信：让不上微博的用户来用你的产品。小程序：可能是让懒得装App的用户来用你的小程序。</li>
  <li>微信：大部分的新功能是可以砍掉的；只抓主场景，不做全功能，做多源于不自信。小程序：你看到的只有一个搜索框。</li>
  <li>微信：需求来自于对信息流的理解，让品牌通过朋友传播。小程序：二维码入口。</li>
  <li>微信：PC上的入口在搜索框，手机上的入口在二维码。小程序：入口是搜索框，可以通过二维码（来自朋友，公众号，印刷品分享）直接进入小程序。</li>
  <li>微信：设计就是分类，越简单的分类越容易被接受，微信的结构和界面保持简单。小程序：甚至没有分类，界面特别特别简单！</li>
  <li>微信：去除人们在QQ上说”88”的习惯。小程序：去除人们安装App，删除App的习惯</li>
  <li>微信：让功能存在于无形之中；只有新手才将所有（新）功能罗列在显眼的地方。小程序：什么功能都没有罗列，来了就用，用完就走！</li>
  <li>总结：极简才能不被超越。关于这一点，根据《腾讯传》中的描述，马化腾和张小龙解释说，把产品设计做到极简，这样如果你要抄我们的产品，就会加东西，而一旦加了东西，就不如我们的产品了。</li>
</ul>

<p>现在微信小程序的热度还不高，处于一个开发者仍在观望的状态，加之最近Apple的封锁打赏事件，更让不少唱衰小程序的论调流传起来。而无论小程序未来发展会如何，我在体验它之后立刻感受到设计的用心。在互联网和移动产品的茫茫大海之中探索，我发现，有些产品会让你觉得不明白设计者在想什么（可能是不存在），有些产品让你想吐槽设计者怎么连这个都想不到，有些产品让你觉得设计者好机智，而还有一些产品，会让你为设计者的用心良苦而感动。对我来说，微信是属于最后一类产品，虽然它其貌不扬（也不洋，挺土的）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效Jenkins用户的第5个习惯]]></title>
    <link href="http://euccas.github.io/20161217/jenkins-user-habits-5.html"/>
    <updated>2016-12-17T07:49:51+08:00</updated>
    <id>http://euccas.github.io/20161217/jenkins-user-habits-5</id>
    <content type="html"><![CDATA[<p>本文内容部分来源于<strong>Andrew Bayer</strong>发布在SlideShare上的 <a href="http://www.slideshare.net/andrewbayer/seven-habits-of-highly-effective-jenkins-users-2014-edition"><em>7 habits of highly productive Jenkins Users (2014 Edition)</em></a>.</p>

<h1 id="section">习惯 5: 集成第三方工具和服务</h1>

<p>Jenkin可以和许多第三方工具和服务集成，实现强大又实用的功能。常见的集成方式包括使用REST API和一些Jenkins功能插件。可以实现的功能比如：由GitHub pull requests触发builds，当builds成功或失败时根据结果更新JIRA等等。</p>

<!--more-->

<h2 id="gerritgithubpull-requests">Gerrit和Github的pull requests</h2>

<p>一些非常实用的Jenkins builds工具和服务包括：</p>

<ul>
  <li>Gerrit Trigger</li>
  <li>GitHub Pull Request Builder</li>
  <li>Jenkins Enterprise’s version of GitHub pull request builder</li>
</ul>

<p>Build工具和服务可以实现对每一次提交的改动进行build, 并且将结果报告提交代码审查工具。</p>

<p>在这些Build工具的基础之上，你可以实现自动化合并多个提交的改动，进行branch之间的同步等更多功能。</p>

<h2 id="jirahttpswwwatlassiancomsoftwarejira"><a href="https://www.atlassian.com/software/jira">JIRA</a></h2>

<ul>
  <li>检查每一个commit的描述信息，如果其中包含有JIRA issue信息，就用commit信息（和测试结果）提交相应的JIRA issue更新</li>
  <li>根据build的过程和步骤，更新所有相关项目的JIRA</li>
  <li>生成JIRA release notes</li>
</ul>

<h2 id="artifactory">Artifactory</h2>

<ul>
  <li>全局性地设定Jenkins jobs用于部署的证书信息 (credentials)</li>
  <li>覆盖 (override) 每一个job的Maven distributionManagement 配置</li>
  <li>定义Maven jobs和build步骤从何处获取artifacts</li>
  <li>在Artifactory中保存build信息和关系</li>
</ul>

<p><strong>阅读同主题内容</strong></p>

<ul>
  <li><a href="http://euccas.github.io/blog/20151210/jenkins-user-habits-1.html">高效Jenkins用户的第1个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20151215/jenkins-user-habits-2.html">高效Jenkins用户的第2个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20160523/jenkins-user-habits-3.html">高效Jenkins用户的第3个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20161010/jenkins-user-habits-4.html">高效Jenkins用户的第4个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20161216/jenkins-user-habits-5.html">高效Jenkins用户的第5个习惯</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Training: MongoDB for Developers (Python)]]></title>
    <link href="http://euccas.github.io/20161206/mongodb-training-mongodb-for-developers-python.html"/>
    <updated>2016-12-06T05:56:45+08:00</updated>
    <id>http://euccas.github.io/20161206/mongodb-training-mongodb-for-developers-python</id>
    <content type="html"><![CDATA[<p>昨晚提交了MongoDB University的培训课程 <a href="https://university.mongodb.com/courses/M101P/about">M101P: MongoDB for Developers (Python)</a> 的最后一次测试，这历时七周的课程告一段落。这个课程虽然是属于入门级，但是它覆盖了MongoDB各个方面，有不错的课程结构。短时间内，可以让开发者掌握和MongoDB有关的日常开发中所需要掌握的大部分知识和技能。</p>

<p>在学习其他数据库时，也不妨参照这个结构来全面掌握。</p>

<!--more-->

<ul>
  <li>
    <p><strong>Introduction and Overview</strong></p>
  </li>
  <li><strong>CRUD: Creating, Reading and Updating Data</strong>
    <ul>
      <li>Mongo shell</li>
      <li>Find, Insert, Update, Delete</li>
      <li>Query operators, update operators</li>
    </ul>
  </li>
  <li><strong>Schema Design</strong>
    <ul>
      <li>Live without constraints or transactions</li>
      <li>One to one relations, one to many relations, many to many relations</li>
      <li>Embedding, handle blobs</li>
    </ul>
  </li>
  <li><strong>Performance</strong>
    <ul>
      <li>Indexes</li>
      <li>Explain and profiling</li>
    </ul>
  </li>
  <li><strong>Aggregation Framework</strong>
    <ul>
      <li>Aggregation pipeline</li>
      <li>Aggregation expressions: sum, avg, addToSet, push, max, min, group,  project, match, text, sort, limit, skip, unwind, etc.</li>
    </ul>
  </li>
  <li><strong>Application Engineering</strong>
    <ul>
      <li>Write consistency</li>
      <li>Replication, create a replica set</li>
      <li>Failover and rollback</li>
      <li>Sharding</li>
    </ul>
  </li>
  <li><strong>Case Studies</strong>
    <ul>
      <li>Interview with MongoDB users from Facebook and Codecademy</li>
      <li>Discuss MongoDB usages in real life projects</li>
    </ul>
  </li>
</ul>

<p>我在课程期间的笔记和练习都保存在GitHub Repository - <a href="https://github.com/euccas/mongodb-for-developers-M101P">euccas/MongoDB-for-Developers-M101P</a></p>

<p>如果是偏重于Web开发，可以参加另一个培训课程:  <a href="https://university.mongodb.com/courses/M101JS/about">M101JS: MongoDB for Node.js Developers</a>. M101JS课程和M101P有类似的结构，区别在于开发语言从Python变为Node.js.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Tips]]></title>
    <link href="http://euccas.github.io/20161012/octopress-tips.html"/>
    <updated>2016-10-12T13:36:44+08:00</updated>
    <id>http://euccas.github.io/20161012/octopress-tips</id>
    <content type="html"><![CDATA[<p>使用Octopress搭建这个blog已经有一段时间了，记录几个使用中需要注意的Tips.</p>

<h1 id="tip-1-clone-repo">Tip 1: Clone Repo</h1>

<p>如果需要重新复制一份已经存在的blog repo，在重新复制的blog repo上继续发布更新blog，那么需要注意：</p>

<p>首先需要复制的repo是source branch.</p>

<p>如果repo的默认branch已经设定为source branch:</p>

<p><code>
git clone &lt;repo url&gt;
</code></p>

<!--more-->

<p>如果repo的默认branch设定为master branch:</p>

<p><code>
git clone &lt;repo url&gt;
git pull origin source
</code></p>

<p>然后需要把master branch复制到<code>_deploy</code>目录。注意<code>_deploy</code>目录是在Octopress生成post的过程中必须存在的。</p>

<p><code>
git clone &lt;repo url&gt; _deploy
cd _deploy
git pull origin master
</code></p>

<h1 id="tip-2-push-changes-to-source">Tip 2: Push Changes to Source</h1>

<p>使用<code>rake gen_deploy</code>将改动发布到<code>master branch</code>之后，还需要把source的改动也提交到<code>source branch</code>。</p>

<p><code>
git push origin source
</code></p>

<h1 id="tip-3-execute-rake-commands">Tip 3: Execute Rake Commands</h1>

<p>如果因为<code>rake</code>版本问题造成<code>rake</code> command不能够在repo中执行，就需要使用<code>bundle exec rake</code>执行。</p>

<p><code>
bundle exec rake new_post
bundle exec rake generate
bundle exec rake preview
bundle exec rake deploy
</code></p>

<h1 id="tip-4-errors-in-gendeploy">Tip 4: Errors in gen_deploy</h1>

<p><code>rake gen_deploy</code>的过程中，如果在<code>generate</code>步骤中出现错误（比如部分post的文本不符合markdown语法），一些情况下可能会造成generate目录中的文件被删除。而<code>gen_deploy</code>过程此时并不会结束，<code>deploy</code>会继续进行，这样最终的commit就会把原来已经发布的blog内容删除。防止出现这种问题的安全做法是分步执行<code>rake generate</code>和<code>rake deploy</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效Jenkins用户的第4个习惯]]></title>
    <link href="http://euccas.github.io/20161011/jenkins-user-habits-4.html"/>
    <updated>2016-10-11T12:32:01+08:00</updated>
    <id>http://euccas.github.io/20161011/jenkins-user-habits-4</id>
    <content type="html"><![CDATA[<p>本文内容部分来源于<strong>Andrew Bayer</strong>发布在SlideShare上的 <a href="http://www.slideshare.net/andrewbayer/seven-habits-of-highly-effective-jenkins-users-2014-edition"><em>7 habits of highly productive Jenkins Users (2014 Edition)</em></a>.</p>

<h1 id="jenkinsplugin">习惯 4: 精选你所使用的Jenkins功能插件(Plugin)</h1>

<p>当你使用了越来越多的Jenkins功能插件时，就需要花一些时间和精力来维护和清理所有的功能插件。 因为当你安装了太多的Jenkins插件时，有可能会带来一些不好的效果，诸如减慢系统速度，占用多过资源，产生无效的记录文件等等。为了避免使用过多的Jenkins插件造成的各种问题，你应该注意下面几个方面。</p>

<h2 id="section">1. 只安装你真正需要的功能插件</h2>

<p>在安装一个功能插件之前，你都应该问一个问题：我真的需要这个插件吗？</p>

<p>如果你并不打算真正使用一个插件，就不要安装在Jenkins Master上。</p>

<p>不同的插件可能包含有一些类似的功能，你所需要完成的事情，也不仅仅只有一个插件可以实现。这时就需要在一些功能类似的插件中选择你真正所需的。</p>

<p>功能插件可能会给Jenkins service的稳定性造成预期之外的影响，并且可能增加系统的负载和每一个job运行的时间。充分考虑到这些可能的负作用，尽量避免安装你并不是真正需要的插件。</p>

<!--more-->

<h2 id="section-1">2. 清理旧的插件和数据</h2>

<p>定期检查和删除你不再使用的Jenkins功能插件。</p>

<p>在Jenkins管理页面 (Manage Jenkins) 中，注意关于old data的描述。当你删除一个Jenkins插件后，要把有关的历史数据也同时删除。</p>

<p>及时删除不需要的数据，可以加速Jenkins Master启动时加载配置和所有jobs的过程。</p>

<h2 id="section-2">3. 建立你的必备插件列表</h2>

<p>根据你的使用需求和经验，选择你所需要的Jenkins功能插件。这些功能插件应该是满足你所需要的功能，并且性能良好稳定。为你的这些插件建立一个列表并且维护它。</p>

<p><strong>Andrew Bayer</strong>推荐了一些他所使用的Jenkins功能插件。所有这些提供的插件都可以通过Jenkins插件管理功能(Manage Plugins)来查找和安装。</p>

<ul>
  <li>
    <p><strong>Job Config History</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/JobConfigHistory+Plugin">插件介绍</a></li>
      <li>功能：保存job configuration的历史，记录每一次改动的信息。对于job configuration每一次的改变，保存一个config.xml文件。提供overview页面，方便查看全部的改变。可以对比查看两次改动之间的区别。</li>
    </ul>
  </li>
  <li>
    <p><strong>Static Analysis Plugins</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Static+Code+Analysis+Plug-ins">插件介绍</a></li>
      <li>功能：处理各种静态代码分析结果数据，生成可视化报告（包括趋势图，Build Summary，结果汇总分析等等）</li>
    </ul>
  </li>
  <li>
    <p><strong>xUnit</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin">插件介绍</a></li>
      <li>功能：生成和发布单元测试报告。可以把各种测试结果转化为jnit格式。</li>
    </ul>
  </li>
  <li>
    <p><strong>Parameterized Trigger</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Trigger+Plugin">插件介绍</a></li>
      <li>功能：参数化配置trigger build. 对于一个build job，可以定义多个配置，用于不同的条件和参数。</li>
    </ul>
  </li>
  <li>
    <p><strong>Conditional Build Step</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Conditional+BuildStep+Plugin">插件介绍</a></li>
      <li>功能：可以灵活配置的build step。通常和Parameterized Trigger配合使用。</li>
    </ul>
  </li>
  <li>
    <p><strong>Tool Environment</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Tool+Environment+Plugin">插件介绍</a></li>
      <li>功能：让你可以自定义使用Jenkin tool的自动安装。在一个job的执行过程中安装指定的tools，供这个job使用。</li>
    </ul>
  </li>
  <li>
    <p><strong>EnvInject</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/EnvInject+Plugin">插件介绍</a></li>
      <li>功能：帮助你管理环境变量，包括删除Jenkins Java process引入的一些环境变量，在一个node启动时设置所需的环境变量，设置密码值等等。</li>
    </ul>
  </li>
  <li>
    <p><strong>Rebuild</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Rebuild+Plugin">插件介绍</a></li>
      <li>功能：可以rerun每一个被执行过的parameterized build，保存了parameterized build每一次使用的参数，并且允许你在执行rebuild时修改这些参数。</li>
    </ul>
  </li>
  <li>
    <p><strong>Build Timeout</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Build-timeout+Plugin">插件介绍</a></li>
      <li>功能：设置build的时间限制，当一个build时间超过预设时，会自动被停止。这个插件不能用于Jenkins pipelines.</li>
    </ul>
  </li>
</ul>

<p><strong>阅读同主题内容</strong></p>

<ul>
  <li><a href="http://euccas.github.io/blog/20151210/jenkins-user-habits-1.html">高效Jenkins用户的第1个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20151215/jenkins-user-habits-2.html">高效Jenkins用户的第2个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20160523/jenkins-user-habits-3.html">高效Jenkins用户的第3个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20161010/jenkins-user-habits-4.html">高效Jenkins用户的第4个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20161216/jenkins-user-habits-5.html">高效Jenkins用户的第5个习惯</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
