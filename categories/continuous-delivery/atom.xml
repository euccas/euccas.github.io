<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Continuous-delivery | euccas.github.io]]></title>
  <link href="http://euccas.github.io/categories/continuous-delivery/atom.xml" rel="self"/>
  <link href="http://euccas.github.io/"/>
  <updated>2018-05-13T21:04:25-07:00</updated>
  <id>http://euccas.github.io/</id>
  <author>
    <name><![CDATA[euccas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Effective Jenkins Plugins (1)]]></title>
    <link href="http://euccas.github.io/blog/20171203/effective-jenkins-plugins-1.html"/>
    <updated>2017-12-03T16:18:31-08:00</updated>
    <id>http://euccas.github.io/blog/20171203/effective-jenkins-plugins-1</id>
    <content type="html"><![CDATA[<p>(<em>Update 2018-05-13</em>: Here is a translation of this post in <a href="https://dealsdaddy.co.uk/translations/jenkinsplugins/">Hindi</a>, provided by Nikol @ DealsDaddy.)</p>

<p><a href="https://jenkins.io/">Jenkins</a>, originally founded in 2006 as “Hudson”, is one of the leading automation applications which support building, deploying and automating software projects. One great advantage of Jenkins is there are hundreds of plugins available which enable various kinds of extended features needed in the Continous Integration and Continuous Delivery process. As I just checked on the <a href="https://plugins.jenkins.io/">Jenkins Plugins page</a>, there are 873 plugins that fall into five categories: Platforms, User interface, Administration, Source code management and Build management.</p>

<p>Effectively using Jenkins plugins makes your experience with Jenkins more productive. I’m going to occasionally write about Jenkins plugins that I used or learned about. The first post will start from some of the plugins I used when I worked on building a Continuous Delivery system last year (from 2015 to 2016).</p>

<h1 id="job-configuration-history">Job Configuration History</h1>

<p><a href="https://plugins.jenkins.io/jobConfigHistory"><em>JobConfigHistory Plugin</em></a></p>

<p>This plugin saves every change made to a job. It allows you to see the history of job configurations, compare configuration differences, and restore a particular version of config. You can also see which user makes a particular change if you configured a security policy.</p>

<!--more-->

<p>The configuration changes are saved by means of saving copies of the configuration file of a job (config.xml in Jenkins Home directory).</p>

<h1 id="dependency-graph-view">Dependency Graph View</h1>

<p><a href="https://plugins.jenkins.io/depgraph-view"><em>Dependency Graph View Plugin</em></a></p>

<p>This plugin visualize dependencies of multiple jobs by generating graphs via <a href="https://graphviz.gitlab.io/">graphviz</a>. You can choose to show the dependency of jobs in a view. To generate the graph, it is required to have graphviz installed on the Jenkins server.</p>

<p>This plugin is very useful when you have many jobs which have dependency relationship. Visualizing the dependency helps you easily find possible mistakes in the setting of dependencies.</p>

<h1 id="build-timeout">Build Timeout</h1>

<p><a href="https://plugins.jenkins.io/build-timeout"><em>Build-timeout Plugin</em></a></p>

<p>This plugin allows you to set runtime limit of jobs, and automatically abort a build if it’s taking longer than expected time. In my experience, this plugin was extremely useful as it solved the problem that some builds got stuck and didn’t release the Jenkins slave slots.</p>

<p>Noted this plugin isn’t applicable to pipelines.</p>

<h1 id="perforce">Perforce</h1>

<p><a href="https://wiki.jenkins.io/display/JENKINS/P4+Plugin"><em>P4 Plugin</em></a></p>

<p>This plugin manages Perforce workspaces, synchronising code and polling/triggering builds. It also supports a few common Perforce operations such as credential authentication, changelists browsing, and labeling builds.</p>

<h1 id="jira">JIRA</h1>

<p><a href="https://plugins.jenkins.io/jira"><em>JIRA Plugin</em></a></p>

<p>This plugin integrates <a href="https://www.atlassian.com/software/jira">JIRA</a> to Jenkins. It uses JIRA REST API, and allows you to display Jenkins builds inside JIRA.</p>

<h1 id="parameterized-trigger">Parameterized Trigger</h1>

<p><a href="https://plugins.jenkins.io/parameterized-trigger"><em>Parameterized Trigger Plugin</em></a></p>

<p>This plugin lets you trigger new builds with various ways of specifying parameters for the new builds. The parameters could be a set of predefined properties, or based on information/results of the upstream builds.</p>

<p>As an example, you can tell a build job where to find packages it needs to install.</p>

<h1 id="log-parser">Log Parser</h1>

<p><a href="https://plugins.jenkins.io/log-parser"><em>Log Parser Plugin</em></a></p>

<p>This plugin parses the console log generated by the Jenkins build. It could highlight lines of interest in log, like the lines with <code>errors</code>, <code>warnings</code>, <code>information</code>. It divides a log into sections, such as <em>errors section</em>, <em>warnings section</em>, etc. The number of errors or warnings are also displayed. Useful for triaging errors in long build logs.</p>

<h1 id="email-extension">Email Extension</h1>

<p><a href="https://plugins.jenkins.io/email-ext"><em>Email Extension Plugin</em></a></p>

<p>This plugin extends the email notification functionality that Jenkins provides. You can customize when an email is sent, who should receive it, and the content of the email.</p>

<h1 id="disk-usage">Disk Usage</h1>

<p><a href="https://plugins.jenkins.io/disk-usage"><em>Disk-Usage Plugin</em></a></p>

<p>This plugin calculates disk usage of projects and builds, and shows the disk usage information on a page. It also displays a trend chart of display usage. It makes Jenkins job and workspace maintenance easier.</p>

<h1 id="thinbackup">ThinBackup</h1>

<p><a href="https://plugins.jenkins.io/thinBackup"><em>ThinBackup Plugin</em></a></p>

<p>This plugin backs up the global and job specific configurations. You can see the backup history, and choose to restore a particular backup. The backup provides setting options for the backup schedule, backup directory, maximum number of backup sets, etc.</p>

<h1 id="scriptlermanaged-scripts">Scriptler/Managed Scripts</h1>

<p><a href="https://wiki.jenkins.io/display/JENKINS/Scriptler+Plugin"><em>Scriptler Plugin</em></a></p>

<p>This plugin allows you to edit, store, and resue groovy scripts, and execute the script on any of the slaves or nodes. But since 2016 the distribution of this plugin has been suspended due to security issues. <em>The current version of this plugin may not be safe to use</em>.</p>

<p>An alternative choice is the <a href="hhttps://plugins.jenkins.io/managed-scripts"><em>Managed Scripts Plugin</em></a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效Jenkins用户的第5个习惯]]></title>
    <link href="http://euccas.github.io/blog/20161216/jenkins-user-habits-5.html"/>
    <updated>2016-12-16T15:49:51-08:00</updated>
    <id>http://euccas.github.io/blog/20161216/jenkins-user-habits-5</id>
    <content type="html"><![CDATA[<p>本文内容部分来源于<strong>Andrew Bayer</strong>发布在SlideShare上的 <a href="http://www.slideshare.net/andrewbayer/seven-habits-of-highly-effective-jenkins-users-2014-edition"><em>7 habits of highly productive Jenkins Users (2014 Edition)</em></a>.</p>

<h1 id="section">习惯 5: 集成第三方工具和服务</h1>

<p>Jenkin可以和许多第三方工具和服务集成，实现强大又实用的功能。常见的集成方式包括使用REST API和一些Jenkins功能插件。可以实现的功能比如：由GitHub pull requests触发builds，当builds成功或失败时根据结果更新JIRA等等。</p>

<!--more-->

<h2 id="gerritgithubpull-requests">Gerrit和Github的pull requests</h2>

<p>一些非常实用的Jenkins builds工具和服务包括：</p>

<ul>
  <li>Gerrit Trigger</li>
  <li>GitHub Pull Request Builder</li>
  <li>Jenkins Enterprise’s version of GitHub pull request builder</li>
</ul>

<p>Build工具和服务可以实现对每一次提交的改动进行build, 并且将结果报告提交代码审查工具。</p>

<p>在这些Build工具的基础之上，你可以实现自动化合并多个提交的改动，进行branch之间的同步等更多功能。</p>

<h2 id="jirahttpswwwatlassiancomsoftwarejira"><a href="https://www.atlassian.com/software/jira">JIRA</a></h2>

<ul>
  <li>检查每一个commit的描述信息，如果其中包含有JIRA issue信息，就用commit信息（和测试结果）提交相应的JIRA issue更新</li>
  <li>根据build的过程和步骤，更新所有相关项目的JIRA</li>
  <li>生成JIRA release notes</li>
</ul>

<h2 id="artifactory">Artifactory</h2>

<ul>
  <li>全局性地设定Jenkins jobs用于部署的证书信息 (credentials)</li>
  <li>覆盖 (override) 每一个job的Maven distributionManagement 配置</li>
  <li>定义Maven jobs和build步骤从何处获取artifacts</li>
  <li>在Artifactory中保存build信息和关系</li>
</ul>

<p><strong>阅读同主题内容</strong></p>

<ul>
  <li><a href="http://euccas.github.io/blog/20151210/jenkins-user-habits-1.html">高效Jenkins用户的第1个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20151215/jenkins-user-habits-2.html">高效Jenkins用户的第2个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20160523/jenkins-user-habits-3.html">高效Jenkins用户的第3个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20161010/jenkins-user-habits-4.html">高效Jenkins用户的第4个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20161216/jenkins-user-habits-5.html">高效Jenkins用户的第5个习惯</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效Jenkins用户的第4个习惯]]></title>
    <link href="http://euccas.github.io/blog/20161010/jenkins-user-habits-4.html"/>
    <updated>2016-10-10T21:32:01-07:00</updated>
    <id>http://euccas.github.io/blog/20161010/jenkins-user-habits-4</id>
    <content type="html"><![CDATA[<p>本文内容部分来源于<strong>Andrew Bayer</strong>发布在SlideShare上的 <a href="http://www.slideshare.net/andrewbayer/seven-habits-of-highly-effective-jenkins-users-2014-edition"><em>7 habits of highly productive Jenkins Users (2014 Edition)</em></a>.</p>

<h1 id="jenkinsplugin">习惯 4: 精选你所使用的Jenkins功能插件(Plugin)</h1>

<p>当你使用了越来越多的Jenkins功能插件时，就需要花一些时间和精力来维护和清理所有的功能插件。 因为当你安装了太多的Jenkins插件时，有可能会带来一些不好的效果，诸如减慢系统速度，占用多过资源，产生无效的记录文件等等。为了避免使用过多的Jenkins插件造成的各种问题，你应该注意下面几个方面。</p>

<h2 id="section">1. 只安装你真正需要的功能插件</h2>

<p>在安装一个功能插件之前，你都应该问一个问题：我真的需要这个插件吗？</p>

<p>如果你并不打算真正使用一个插件，就不要安装在Jenkins Master上。</p>

<p>不同的插件可能包含有一些类似的功能，你所需要完成的事情，也不仅仅只有一个插件可以实现。这时就需要在一些功能类似的插件中选择你真正所需的。</p>

<p>功能插件可能会给Jenkins service的稳定性造成预期之外的影响，并且可能增加系统的负载和每一个job运行的时间。充分考虑到这些可能的负作用，尽量避免安装你并不是真正需要的插件。</p>

<!--more-->

<h2 id="section-1">2. 清理旧的插件和数据</h2>

<p>定期检查和删除你不再使用的Jenkins功能插件。</p>

<p>在Jenkins管理页面 (Manage Jenkins) 中，注意关于old data的描述。当你删除一个Jenkins插件后，要把有关的历史数据也同时删除。</p>

<p>及时删除不需要的数据，可以加速Jenkins Master启动时加载配置和所有jobs的过程。</p>

<h2 id="section-2">3. 建立你的必备插件列表</h2>

<p>根据你的使用需求和经验，选择你所需要的Jenkins功能插件。这些功能插件应该是满足你所需要的功能，并且性能良好稳定。为你的这些插件建立一个列表并且维护它。</p>

<p><strong>Andrew Bayer</strong>推荐了一些他所使用的Jenkins功能插件。所有这些提供的插件都可以通过Jenkins插件管理功能(Manage Plugins)来查找和安装。</p>

<ul>
  <li>
    <p><strong>Job Config History</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/JobConfigHistory+Plugin">插件介绍</a></li>
      <li>功能：保存job configuration的历史，记录每一次改动的信息。对于job configuration每一次的改变，保存一个config.xml文件。提供overview页面，方便查看全部的改变。可以对比查看两次改动之间的区别。</li>
    </ul>
  </li>
  <li>
    <p><strong>Static Analysis Plugins</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Static+Code+Analysis+Plug-ins">插件介绍</a></li>
      <li>功能：处理各种静态代码分析结果数据，生成可视化报告（包括趋势图，Build Summary，结果汇总分析等等）</li>
    </ul>
  </li>
  <li>
    <p><strong>xUnit</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin">插件介绍</a></li>
      <li>功能：生成和发布单元测试报告。可以把各种测试结果转化为jnit格式。</li>
    </ul>
  </li>
  <li>
    <p><strong>Parameterized Trigger</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Trigger+Plugin">插件介绍</a></li>
      <li>功能：参数化配置trigger build. 对于一个build job，可以定义多个配置，用于不同的条件和参数。</li>
    </ul>
  </li>
  <li>
    <p><strong>Conditional Build Step</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Conditional+BuildStep+Plugin">插件介绍</a></li>
      <li>功能：可以灵活配置的build step。通常和Parameterized Trigger配合使用。</li>
    </ul>
  </li>
  <li>
    <p><strong>Tool Environment</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Tool+Environment+Plugin">插件介绍</a></li>
      <li>功能：让你可以自定义使用Jenkin tool的自动安装。在一个job的执行过程中安装指定的tools，供这个job使用。</li>
    </ul>
  </li>
  <li>
    <p><strong>EnvInject</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/EnvInject+Plugin">插件介绍</a></li>
      <li>功能：帮助你管理环境变量，包括删除Jenkins Java process引入的一些环境变量，在一个node启动时设置所需的环境变量，设置密码值等等。</li>
    </ul>
  </li>
  <li>
    <p><strong>Rebuild</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Rebuild+Plugin">插件介绍</a></li>
      <li>功能：可以rerun每一个被执行过的parameterized build，保存了parameterized build每一次使用的参数，并且允许你在执行rebuild时修改这些参数。</li>
    </ul>
  </li>
  <li>
    <p><strong>Build Timeout</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Build-timeout+Plugin">插件介绍</a></li>
      <li>功能：设置build的时间限制，当一个build时间超过预设时，会自动被停止。这个插件不能用于Jenkins pipelines.</li>
    </ul>
  </li>
</ul>

<p><strong>阅读同主题内容</strong></p>

<ul>
  <li><a href="http://euccas.github.io/blog/20151210/jenkins-user-habits-1.html">高效Jenkins用户的第1个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20151215/jenkins-user-habits-2.html">高效Jenkins用户的第2个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20160523/jenkins-user-habits-3.html">高效Jenkins用户的第3个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20161010/jenkins-user-habits-4.html">高效Jenkins用户的第4个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20161216/jenkins-user-habits-5.html">高效Jenkins用户的第5个习惯</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Check Changes in a Commit and Invoke CI Tasks]]></title>
    <link href="http://euccas.github.io/blog/20160815/how-to-check-changes-in-a-commit-and-invoke-ci-tasks.html"/>
    <updated>2016-08-15T19:43:21-07:00</updated>
    <id>http://euccas.github.io/blog/20160815/how-to-check-changes-in-a-commit-and-invoke-ci-tasks</id>
    <content type="html"><![CDATA[<h1 id="problem-description">Problem Description</h1>

<p>Suppose one task in your Continuous Integration (CI) pipeline is triggered on every commit to the project repository. Some the files in the repository require passing the check of the CI task, while some other files do not require passing the check. What should the CI task do to decide if it is needed to perform the needed checking on the commit?</p>

<h1 id="design-the-ci-task">Design the CI task</h1>

<p>The CI task need have the ability to analyze the files included in the commit, and decide whether the commit requires passing a check, or not. We need tell the CI task which files require passing a check through configurations.</p>

<!--more-->

<h2 id="configuration">Configuration</h2>

<p>There are multiple ways to design the configurations, such as:</p>

<ol>
  <li>
    <p>Only list the files or paths requiring the check</p>
  </li>
  <li>
    <p>Only list the files or paths do not require the check</p>
  </li>
  <li>
    <p>List the files or paths requiring the check, and also list the subset files or paths that do not require the check</p>
  </li>
</ol>

<p>The 3rd way probably is the optimal one because it provides the flexibility for you to put a large scope path as the files need check, and then exclude a subset from the large scope path. For example:</p>

<p>```
check: my_project/dev/</p>

<p>skip: my_project/dev/test/</p>

<p>```</p>

<p>To apply the 3rd method, the configuration of the CI task will include two types: inclusion, and exclusion.</p>

<h2 id="analyze-files-in-the-commit">Analyze files in the commit</h2>

<p>The needed analysis process of the CI task is:</p>

<ul>
  <li>
    <p>If none of the files in the commit matches the inclusion in configuration, skip the check</p>
  </li>
  <li>
    <p>If all the files in the commit matching the inclusion in configuration also matching the exclusion in configuration, skip the check</p>
  </li>
  <li>
    <p>In other cases, the check for this commit is needed</p>
  </li>
</ul>

<p>The complexity of the given process is <em>O(n<sup>2</sup>)</em>.</p>

<p>A mistake that could happen in the analysis process is when you analyze the exclusion cases, you should do the analysis only on the files that match inclusion configuration, which is a subset of files in the commit.</p>

<h1 id="example-with-the-python">Example with the Python</h1>

<p>Here is the code written in Python for demonstrating the case discussed above.</p>

<ul>
  <li>
    <p><code>commit_files</code>: a list containing all the files in the commit</p>
  </li>
  <li>
    <p><code>config</code>: a dictionary containing inclusion and exclusion configurations</p>
  </li>
  <li>
    <p><code>config['include']</code>: a list containing all the files or paths need check</p>
  </li>
  <li>
    <p><code>config['exclude']</code>: a list containing the files or paths do not need check</p>
  </li>
</ul>

<p>```python</p>

<p>def analyze_commit_files(commit_files, config):</p>

<pre><code>need_check = False    


# commit need_check is False if:    

# - No files in this commit    

# - Config does not have any 'include' defined    

if commit_files is None or len(commit_files) == 0:

    return need_check

if not 'include' in config or config['include'] is None or len(config['include']) == 0:

    return need_check

# commit need_check is False if:    

# - All file in the commit matches the configured inclusion, OR    

# - All files in the commit that matches the inclusion, also match the configured exclusion    

# First check inclusion    

files_need_check = list()

for cf in commit_files:

    for check_file in config['include']:            

        if re.search(check_file, cf):                            

            files_need_check.append(cf)



if len(files_need_check) &gt; 0:

    # Check skip_path

    if not 'exclude' in config or config['exclude'] is None or len(config['exclude']) == 0:

        need_check = True

     else:

         for cf in files_need_check:

             for skip_file in config['exclude']:                         

                if not re.search(skip_file, cf):                       

                    need_check = True

                    break

return need_check
</code></pre>

<p>```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效Jenkins用户的第3个习惯]]></title>
    <link href="http://euccas.github.io/blog/20160523/jenkins-user-habits-3.html"/>
    <updated>2016-05-23T20:54:36-07:00</updated>
    <id>http://euccas.github.io/blog/20160523/jenkins-user-habits-3</id>
    <content type="html"><![CDATA[<p>本文内容部分来源于<strong>Andrew Bayer</strong>发布在SlideShare上的 <a href="http://www.slideshare.net/andrewbayer/seven-habits-of-highly-effective-jenkins-users-2014-edition"><em>7 habits of highly productive Jenkins Users (2014 Edition)</em></a>.</p>

<h1 id="jenkins">习惯 3: 让Jenkins任务自动化</h1>

<h2 id="script-console--scriptler-">1. Script Console 和 Scriptler 插件</h2>

<p>使用(Scriptler插件)[https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin]，保存和重用Groovy脚本</p>

<h2 id="scriptler">2. 一些Scriptler可以做的事情的例子</h2>

<ul>
  <li>通过匹配，控制一些job的开关 (enable, disable)</li>
  <li>清除build queue</li>
  <li>为所有的jobs设置log rotation/discard old builds等等配置参数：如果采用手工的方法，需要分别对每一个job进行配置，步骤繁琐</li>
  <li>对所有的jobs设置取消夜晚时间的SCM Polling: 这个功能其实就是批量设置jobs schedule</li>
  <li>对所有jobs执行log rotator</li>
</ul>

<p>这只是一些例子。可以看出，使用scriptler可以方便对job的配置进行批量操作</p>

<!--more-->

<h2 id="system-groovy-build-steps">3. System Groovy build steps</h2>

<ul>
  <li>Groovy build steps 是在build中去执行system Groovy的脚本。需要注意的是，要保证Jenkins有权限执行build的全过程。</li>
  <li>利用Groovy build steps, 可以方便地做一些类似于plugin的功能，或者作为在开发一个plugin之前的测试</li>
  <li>通过Scriptler scripts, 可以在多个builds中重用系统脚本</li>
</ul>

<h2 id="jenkins-jobs">4. 自动生成Jenkins jobs</h2>

<ul>
  <li>使用Jenkins REST API 和 CLI，可以创建新的job或者改变已有的job</li>
  <li>可以使用DSL来定义job甚至包含多个job的workflow</li>
</ul>

<h2 id="dslplugin">5. 一些支持DSL的Plugin</h2>

<ul>
  <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Job+DSL+Plugin">Job DSL plugin</a></li>
  <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/DotCi+Plugin">DotCI plugin</a></li>
  <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Plugin">Workflow plugin (Pipeline plugin)</a></li>
</ul>

<p><strong>阅读同主题内容</strong></p>

<ul>
  <li><a href="http://euccas.github.io/blog/20151210/jenkins-user-habits-1.html">高效Jenkins用户的第1个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20151215/jenkins-user-habits-2.html">高效Jenkins用户的第2个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20160523/jenkins-user-habits-3.html">高效Jenkins用户的第3个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20161010/jenkins-user-habits-4.html">高效Jenkins用户的第4个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20161216/jenkins-user-habits-5.html">高效Jenkins用户的第5个习惯</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
