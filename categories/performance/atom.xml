<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Performance | euccas.github.io]]></title>
  <link href="http://euccas.github.io/categories/performance/atom.xml" rel="self"/>
  <link href="http://euccas.github.io/"/>
  <updated>2022-03-06T15:19:01-08:00</updated>
  <id>http://euccas.github.io/</id>
  <author>
    <name><![CDATA[euccas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Performance Profiling Tools on Windows]]></title>
    <link href="http://euccas.github.io/blog/20180213/performance-profiling-tools-on-windows.html"/>
    <updated>2018-02-13T17:21:11-08:00</updated>
    <id>http://euccas.github.io/blog/20180213/performance-profiling-tools-on-windows</id>
    <content type="html"><![CDATA[<p>Last year, I wrote a blog post about <a href="http://euccas.github.io/blog/20170827/cpu-profiling-tools-on-linux.html">CPU Profiling and the tools on Linux</a>. Today I’m going to write about a few Performance profiling tools on Windows platform. Last week I was working on profiling and analyzing the build process of a project on Windows, and during the process I experimented with a few different tools.</p>

<h1 id="performance-monitor-perfmon">Performance Monitor (perfmon)</h1>

<p><strong>Performance Monitor</strong> is a small utility provided by Windows OS, you can start it by running command <code>perfmon</code>. With perfmon, you can monitor real-time system performance, and record performance to files for post analysis. This tool provides some extremely useful interfaces in its GUI.</p>

<h2 id="real-time-performance">Real-time Performance</h2>

<p>To view current performance activity, you just need click on the <strong>Performance Monitor</strong> button in the left panel:</p>

<p><img class="center" src="/images/post_images/2018/20180213-perfmon_0.png" width="600"></p>

<!--more-->

<p>By default, this view has only one performance counter: <code>% CPU Processor Time</code>. You can add more counters you need, such as Processor’s Idle Time, Cache Performance, Network Performance and a lot more.</p>

<p><img class="center" src="/images/post_images/2018/20180213-perfmon_1.png" width="600"></p>

<h2 id="performance-recording">Performance Recording</h2>

<p>When analyzing an application’s performance, we often need record all the performance data and generate various reports to help analysis. We can do this in perfmon by adding <strong>User Defined Data Collector Sets</strong> (from Menu Action -&gt; New -&gt; Data Collector Sets).</p>

<p>Perfmon allows you to choose a template to start with, and specify the location where the performance data will be saved. The process is quite straightforward as provided in the GUI. There is only one thing that you need pay attention to: the <strong>Stop Condition</strong>. By default, a newly created Data Collector Sets has “stop condition” as <strong>“Overall duration: 1 minute”</strong>. With this condition set, the performance recording will stop in 1 minute after starting. If the process you are monitoring takes longer than 1 minute to finish, you definitely want to increase this “Overall duration” to some longer time.</p>

<p><img class="center" src="/images/post_images/2018/20180213-perfmon_2.png" width="600"></p>

<p>With the added Data Collector Sets, you can start recording before running your application, and stop recording any time you want. The recorded data will be shown in the <strong>Reports</strong> session in the left panel. The report can also be viewed as graphs in the Performance Monitor.</p>

<p>The following is one example of displaying performance report in <strong>Stacked Area Graph</strong>. The other graph types you can choose are: <strong>Line</strong>, <strong>Histogram bar</strong>, <strong>Area</strong>.</p>

<p><img class="center" src="/images/post_images/2018/20180213-perfmon_3.png" width="600"></p>

<h1 id="windows-performance-recorder-wpr">Windows Performance Recorder (WPR)</h1>

<p><strong>Windows Performance Recorder (WPR)</strong> is a performance recording tool that is based on Event Tracing for Windows. It is available for Windows 8 or later. It records system events that you can then analyze by using Windows Performance Analyzer (WPA). This tool is included in the Windows Assessment and Deployment Kit (Windows ADK), and you can download it <a href="https://insider.windows.com/">here</a>.</p>

<h2 id="recording-with-wpr">Recording with WPR</h2>

<p>When WPR starts, it will guide you to choose a few configurations: <strong>profiles</strong>, <strong>scenario</strong>, <strong>details level</strong> and <strong>logging mode</strong>. You can follow the instructions <a href="https://docs.microsoft.com/en-us/windows-hardware/test/wpt/wpr-quick-start">here on Microsoft Docs</a> to decide how to choose for your needs.</p>

<p><img class="center" src="/images/post_images/2018/20180213-wpr_0.png" width="600"></p>

<p>Then you can start recording performance by clicking the <strong>“Start”</strong> button. The recording will end when you click the <strong>“Save”</strong> button or <strong>“Cancel”</strong> button. If “Save” is clicked, the performance data will be stored to files, and Windows Performance Analyzer (WPA) will be automatically launched to show the performance reports.</p>

<h2 id="reporting-in-wpa">Reporting in WPA</h2>

<p>WPA provides detailed performance analysis data in its rich user interface. In the left <strong>“Graph Explorer”</strong>, you can choose to view performance graphs for <strong>System Activities</strong>, <strong>Computation</strong>, <strong>Storage</strong>, <strong>Memory</strong>, and <strong>Power</strong>. To see the graphs, just drag the graph to the <strong>“Analysis”</strong> tab on the right side.</p>

<p><img class="center" src="/images/post_images/2018/20180213-wpa_0.png" width="600"></p>

<p>Comparing to Performance Monitor (perfmon), WPA reports give you more details and flexibility to explore the data.</p>

<p>This graph is a process lifetime graph generated by WPA.</p>

<p><img class="center" src="/images/post_images/2018/20180213-wpa_1.png" width="600"></p>

<h2 id="load-symbols-in-wpa">Load symbols in WPA</h2>

<p>WPA supports <strong>loading symbols</strong> so you can see more details of each process or command. The paths of symbols can be added either from UI, or by setting environment variable <code>_NT_SYMBOL_PATH</code>. Read <a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-8.1-and-8/hh448137(v%3dwin.10)">this instruction</a> if you need understand how to load symbols or configure symbol paths in WPA.</p>

<h1 id="xperf">Xperf</h1>

<p><strong>Xperf</strong> is a command-line tool for performance recording on Windows. It is also included in the Windows Assessment and Deployment Kit (Windows ADK). Starting from Windows 8, WPR becomes the recommended tool for performance recording, the support is still maintained for Xperf though.</p>

<p>Xperf works in a similarly way as WPR. It doesn’t have a GUI, but provides about ten command line options to process performance recording. The most commonly used ones probably are just <code>start</code> and <code>stop</code>.</p>

<p>You can simply start Xperf performance recording using this command:</p>

<p><code>
xperf -on PROC_THREAD+LOADER+Base -BufferSize 1024
</code></p>

<p>When recording is done, the generated <code>*.etl</code> file can be opened and viewed in WPA.</p>

<h1 id="process-explorer">Process Explorer</h1>

<p>Lastly, I’d like to introduce a light-weight tool <strong>Process Explorer</strong>, aka. procexp. Process Explorer is included in Windows’ <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/process-utilities"><strong>Sysinternals Process Utilities</strong></a>.</p>

<p>Process Explorer provides a CPU performance monitor. Comparing to the CPU monitor in Task Manager, this one has enhanced features for you to monitor CPU utilization of each core and each thread. You can view a graph for each CPU.</p>

<p><img class="center" src="/images/post_images/2018/20180213-procexp_0.png" width="600"></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CPU Profiling Tools on Linux]]></title>
    <link href="http://euccas.github.io/blog/20170827/cpu-profiling-tools-on-linux.html"/>
    <updated>2017-08-27T14:23:21-07:00</updated>
    <id>http://euccas.github.io/blog/20170827/cpu-profiling-tools-on-linux</id>
    <content type="html"><![CDATA[<p>Profiling is an effective method to provide measurements for the performance of software applications. With profiling, you get fine grained information for the components of an application, such as how often a function is called, how long a routine takes to execute and how much time are spent of different spots in the code. With these information, you could identify the performance bottlenecks and the poorly implemented parts in a software application, and find effective methods to improve them.</p>

<p>In this post I’ll write a brief summary of two profiling methods: <strong>Instrumentation</strong> and <strong>Sampling</strong>, and four CPU profiling tools on Linux: <strong>perf</strong>, <strong>gprof</strong>, <strong>Valgrind</strong> and Google’s <strong>gperftools</strong>.</p>

<h1 id="profiling-methods">Profiling Methods</h1>

<p>Different profiling methods use different ways to measure the performance of an application when it is executed. <strong>Instrumentation</strong> and <strong>Sampling</strong> are the two categories that profiling methods fall into.</p>

<!--more-->

<h2 id="instrumentation">Instrumentation</h2>

<p>Instrumentation method inserts special code at the beginning and end of each routine to record when the routine starts and ends. The time spent on calling other routines within a routine may also be recorded. The profiling result shows the actual time taken by the routine on each call.</p>

<p>There are two types of instrumenting profiler tools: <strong>source-code modifying</strong> profilers and <strong>binary profilers</strong>. Source-code modifying profilers insert the instrumenting code in the source code, while the binary profilers insert instrumentation into an application’s executable code once it is loaded in memory.</p>

<p>The good thing of instrumentation method is it gives you the actual time. The inserted instrumentation code (timer calls) take some time themselves. To reduce the impact of that, at the start of each run profilers measure the overhead incurred from the instrumenting process, and later subtract this overhead from the measurement result. But the instrumenting process could still significantly affect an application’s performance in some cases, for example when the routine is very short and frequently called, as the inserted instrumentation would disturb the way the routine executes in the CPU.</p>

<h2 id="sampling">Sampling</h2>

<p>Sampling measures applications without inserting any modifications. Sampling profilers record the executed instruction when the operating system interrupts the CPU at regular intervals to execute process switches, and correlates the recorded execution points with the routines and source code during the linking process. The profiling result shows the frequency with which a routine and source line is executing during the application’s run.</p>

<p>Sampling profilers causes little overhead to the application run process, and they work well on small and often-called routines. One drawback is the evaluations of time spent are statistical approximations rather than actual time. Also sampling could only tell what routine is executing currently, not where it was called from. As a result, sampling profilers can’t report call traces of an application.</p>

<h1 id="cpu-profiling-tools-on-linux">CPU Profiling Tools on Linux</h1>

<h2 id="perf">1. perf</h2>

<p>The <a href="https://perf.wiki.kernel.org/index.php/Main_Page"><strong>perf</strong></a> tool is provided by Linux kernel (2.6+) for profiling CPU and software events. You can get the tool installed by:</p>

<ul>
  <li>Ubuntu: install <em>linux-tools_common</em></li>
  <li>Debian: install <em>linux-base</em></li>
  <li>Arch: install <em>perf-utils</em></li>
  <li>Fedora: install <em>perf</em></li>
</ul>

<p><code>perf</code> is based on the perf_events system, which is based on event-based sampling, and it uses CPU performance counters to profile the application. It can instrument hardware counters, static tracepoints, and dynamic tracepoints. It also provide per task, per CPU and per-workload counters, sampling on top of these and source code event annotation. It does <em>not</em> instrument the code, so that it has a really fast speed and generates precise results.</p>

<p>You can use <code>perf</code> to profile with <code>perf record</code> and <code>perf report</code> commands:</p>

<p><code>
perf record -g &lt;app&gt; &lt;options&gt;
perf report
</code></p>

<p>The <code>perf record</code> command collects samples and generates an output file called <code>perf.data</code>. This file can then be analyzed using <code>perf report</code> and <code>perf annotate</code> commands. Sampling frequency can be specified with <code>-F</code> option. As an example, <code>perf record -F 1000</code> means 1000 samples per second.</p>

<h2 id="gprof">2. gprof</h2>

<p>GNU profiler <a href="https://sourceware.org/binutils/docs/gprof/"><strong>gprof</strong></a> tool uses a hybrid of instrumentation and sampling. Instrumentation is used to collect function call information, and sampling is used to gather runtime profiling information.</p>

<p>Using <code>gprof</code> to profile your applications requires the following steps:</p>

<ol>
  <li>Compile and link the application with <code>-pg</code> option</li>
  <li>Execute the application to generate a profile data file, default file name is <code>gmon.out</code></li>
  <li>Run <code>gprof</code> command to analyze the profile data</li>
</ol>

<p><code>
g++ -pg myapp.cpp -o myapp.o
./myapp.o
gprof myapp.o  
</code></p>

<p>The <code>gprof</code> command prints a flat profile and a call graph on standard output. The flat profile shows how much time was spent executing directly in each function. The call graph shows which functions called which others, and how much time each function used when its subroutine calls are included. You can use the supported options <a href="https://ftp.gnu.org/old-gnu/Manuals/gprof-2.9.1/html_mono/gprof.html#SEC4">listed here</a> to control <code>gprof</code> output styles, such as enabling line-by-line analysis and annotated source.</p>

<h2 id="valgrind-callgrind">3. Valgrind Callgrind</h2>

<p><a href="http://www.valgrind.org/"><strong>Valgrind</strong></a> is an instrumentation framework for building dynamic analysis tools. Valgrind distribution includes six production-quality tools that can detect memory issues and profile programs. <strong>Callgrind</strong>, built as an extension to <strong>Cachegrind</strong>, provides function call call-graph. A separated visualisation tool <a href="http://kcachegrind.sourceforge.net/cgi-bin/show.cgi/KcacheGrindIndex"><strong>KCachegrind</strong></a> could also be used to visualize Callgrind’s output.</p>

<p>Valgrind is a CPU emulator. The technology behind Valgrind is Dynamic binary instrumentation (DBI), whereby the analysis code is added to the original code of the client program at run-time. The profiling tool Callgrind is simulation based, it uses Valgrind as a runtime instrumentation framework. The following two papers explain how Valgrind and Callgrind work in detail.</p>

<ul>
  <li><a href="http://www.valgrind.org/docs/valgrind2007.pdf">Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation (<em>Nicholas Nethercote and Julian Seward</em>)</a></li>
  <li><a href="http://www.valgrind.org/docs/callgrind2004.pdf">A Tool Suite for Simulation Based Analysis of Memory Access Behavior (<em>Josef Weidendorfer, Markus Kowarschik and Carsten Trinitis</em>)</a></li>
</ul>

<p>You need use the following commands to profile your program with <code>valgrind</code>:</p>

<ol>
  <li>Build your program as usual, no need adding any special compiler or linker flags</li>
  <li>Execute the program with callgrind tool to generate a profile data file, default file name is <code>callgrind.out.&lt;pid&gt;</code></li>
  <li>View the generated profile data with <code>callgrind_annotate</code> or <code>kcachegrind</code> tool</li>
</ol>

<p><code>
g++ myapp.cpp -o myapp.o 
valgrind --tool=callgrind myapp.o
callgrind_annotate callgrind.out.&lt;pid&gt;
</code></p>

<h2 id="gperftools">4. gperftools</h2>

<p><a href="https://github.com/gperftools/gperftools"><strong>gperftools</strong></a>, originally “Google Performance Tools”, is a collection of tools for analyzing and improving performance of multi-threaded applications. It offers a fast malloc, a thread-friendly heap-checker, a heap-profiler, and a cpu-profiler. gperftools was developed and tested on x86 Linux systems, and it works in its full generality only on those systems. Some of the libraries and functionality have been ported to other Unix systems and Windows.</p>

<p>To use the CPU profiler in gperftools, you need:</p>

<ol>
  <li>Install the gperftools, following the instructions <a href="https://github.com/gperftools/gperftools">here</a></li>
  <li>Include gperftools header file in your application’s source files, and compile the application</li>
  <li>Link the library into an application with <code>-lprofiler</code></li>
  <li>Set enrionement variable <code>CPUPROFILE</code>, then run the application</li>
  <li>Analyze the output with <code>pprof</code> commands</li>
</ol>

<p>Include gperftools header files in your source file:</p>

<p><code>
#include "gperftools-2.6.1/src/gperftools/profiler.h"
</code></p>

<p>Link with <code>-lprofiler</code>, <code>profiler</code> is in the installation directory of <code>gperftools</code>:</p>

<p><code>
g++ -DWITHGPERFTOOLS -lprofiler -g myapp.cpp -o myapp.o
</code></p>

<p>Set CPUPROFILE environment variable, which controls the location of profiler output data file:</p>

<p><code>
export CPUPROFILE=./prof.out
</code></p>

<p>Run <code>pprof</code> commands to analyze the profiling result:</p>

<p><code>
pprof --text &lt;app&gt; ./prof.out # text output
pprof --gv &lt;app&gt; ./prof.out # graphical output, requires gv installed
</code></p>
]]></content>
  </entry>
  
</feed>
