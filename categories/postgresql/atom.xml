<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Postgresql | euccas.github.io]]></title>
  <link href="http://euccas.github.io/categories/postgresql/atom.xml" rel="self"/>
  <link href="http://euccas.github.io/"/>
  <updated>2023-01-07T23:19:24-08:00</updated>
  <id>http://euccas.github.io/</id>
  <author>
    <name><![CDATA[euccas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PostgreSQL: Understand PG Errors]]></title>
    <link href="http://euccas.github.io/blog/20161217/postgresql-understand-pg-errors.html"/>
    <updated>2016-12-17T09:06:21-08:00</updated>
    <id>http://euccas.github.io/blog/20161217/postgresql-understand-pg-errors</id>
    <content type="html"><![CDATA[<p>When using Ruby Gem <code>pg</code> and establish database connections to a PostgreSQL database, you’ll see PG errors when the database connection becomes problematic. In my experience, two typical PG errors are <code>PG::AdminShutdown</code> and <code>PG::UnableToSend</code>.</p>

<h1 id="error-pgadminshutdown">Error PG::AdminShutdown</h1>

<p>The error message contains the following information:</p>

<p><code>
FATAL:  terminating connection due to administrator command (PG::AdminShutdown) server closed the connection unexpectedly
      This probably means the server terminated abnormally
      before or while processing the request.
</code></p>

<!--more-->

<p>The PG::AdminShutdown error could be caused by database server receiving SIGTERM/SIGINT/SIGQUIT or kill command on the connection process. Each system signal shut down server processes in different manners, see the <a href="https://www.pgadmin.org/docs/1.4/pg/postmaster-shutdown.html">pgadmin document</a> to know the details.</p>

<p>When you hit the PG::AdminShutdown error, you’ll like to check if the database server gets restarted and if the server resumes to the normal state.</p>

<h1 id="error-pgunabletosend">Error PG::UnabletoSend</h1>

<p>The error message looks like:</p>

<p><code>
server closed the connection unexpectedly (PG::UnableToSend)
This probably means the server terminated abnormally before or while processing the request.
</code></p>

<p>The PG::UnabletoSend error usually means a connection timeout or network issue. It could be a temporary issue though. You can check if the other connections to the database server work well or not.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: Get Data From PostgreSQL Database Without the Model]]></title>
    <link href="http://euccas.github.io/blog/20160610/rails-get-data-without-model.html"/>
    <updated>2016-06-10T18:32:01-07:00</updated>
    <id>http://euccas.github.io/blog/20160610/rails-get-data-without-model</id>
    <content type="html"><![CDATA[<p>In Ruby on Rails, Active Record is the M in MVC - the model. Model is the layer of the system which represents business data and logic. Active Record facilitates the creation and the use of business objects whose data requires persistent storage to a database. In some cases, however, you may want to use databases in Rails applications without the Model. What you can do is using the <code>pg</code> gem to directly manipulate the data you need.</p>

<h1 id="create-a-database-connection">Create a database connection</h1>

<p>If the database is not declared in Rails app’s <code>config/database.yml</code> file, you won’t be able to use the <code>establish_connection</code> method in ActiveRecord. But you can still use the <code>pg</code> gem to directly connect to the database.</p>

<!--more-->

<p>```ruby
# page_controller.rb</p>

<p>conn = PGconn.connect(‘<server>', <port>, "", "", '<database>', "<user>", "<password>")
render :plain =&gt; "Oops, database currently not accessible" unless conn</password></user></database></port></server></p>

<p>```</p>

<h1 id="query-data-with-raw-sql">Query data with RAW SQL</h1>

<p>```ruby
# page_controller.rb</p>

<p>@page_records = []
result = conn.exec(‘SELECT * FROM &lt;table&gt; ORDER BY id DESC’)</p>

<p>@page_records = result</p>

<p>```</p>

<p>The result is an array of Hash. For example:</p>

<p><code>ruby
[
  { "title" =&gt; "my page 1", "author" =&gt; "Tom", "created_at" =&gt; "2016-06-08" }
  { "title" =&gt; "my page 2", "author" =&gt; "Nancy", "created_at" =&gt; "2016-06-09" }
]
</code></p>

<h1 id="use-the-data-in-view">Use the data in View</h1>

<p>When using the queried data in Rails View, need to note you need use <code>record['title']</code> instead of <code>record.title</code>, which is different from using the data generated from a Rails Model.</p>

<p>```ruby
# page.erb</p>

<div>
    &lt;% @page_records.each do |record| %&gt;
        <p> &lt;%= record['title'] %&gt; </p>
        <p> &lt;%= record['author'] %&gt; </p>
    &lt;% end %&gt;
</div>
<p>```</p>

<h1 id="as-a-note-in-the-end">As a note in the end</h1>

<p>Although the above approach works in Rails, I’d say a more decent way to handle the need of getting data from multiple databases, is creating a crafted Model. The process will need:</p>

<ul>
  <li>Add the configurations of all your external databases in Rails app</li>
  <li>Create a Model file</li>
</ul>

<p>```ruby
class Pages &lt; ActiveRecord::Base</p>

<p>end
```</p>

<ul>
  <li>Use <code>establish_connection</code> in the Model</li>
  <li>When your table name doesn’t match Rails convention, set the table name with <code>self.table_name = '&lt;your table name&gt;'</code></li>
  <li>Create methods in the Model to fetch the data you need</li>
</ul>

]]></content>
  </entry>
  
</feed>
