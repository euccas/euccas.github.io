<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | euccas.github.io]]></title>
  <link href="http://euccas.github.io/categories/ruby/atom.xml" rel="self"/>
  <link href="http://euccas.github.io/"/>
  <updated>2017-11-30T11:17:11-08:00</updated>
  <id>http://euccas.github.io/</id>
  <author>
    <name><![CDATA[euccas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PostgreSQL: Understand PG Errors]]></title>
    <link href="http://euccas.github.io/blog/20161217/postgresql-understand-pg-errors.html"/>
    <updated>2016-12-17T09:06:21-08:00</updated>
    <id>http://euccas.github.io/blog/20161217/postgresql-understand-pg-errors</id>
    <content type="html"><![CDATA[<p>When using Ruby Gem <code>pg</code> and establish database connections to a PostgreSQL database, you’ll see PG errors when the database connection becomes problematic. In my experience, two typical PG errors are <code>PG::AdminShutdown</code> and <code>PG::UnableToSend</code>.</p>

<h1 id="error-pgadminshutdown">Error PG::AdminShutdown</h1>

<p>The error message contains the following information:</p>

<p><code>
FATAL:  terminating connection due to administrator command (PG::AdminShutdown) server closed the connection unexpectedly
      This probably means the server terminated abnormally
      before or while processing the request.
</code></p>

<!--more-->

<p>The PG::AdminShutdown error could be caused by database server receiving SIGTERM/SIGINT/SIGQUIT or kill command on the connection process. Each system signal shut down server processes in different manners, see the <a href="https://www.pgadmin.org/docs/1.4/pg/postmaster-shutdown.html">pgadmin document</a> to know the details.</p>

<p>When you hit the PG::AdminShutdown error, you’ll like to check if the database server gets restarted and if the server resumes to the normal state.</p>

<h1 id="error-pgunabletosend">Error PG::UnabletoSend</h1>

<p>The error message looks like:</p>

<p><code>
server closed the connection unexpectedly (PG::UnableToSend)
This probably means the server terminated abnormally before or while processing the request.
</code></p>

<p>The PG::UnabletoSend error usually means a connection timeout or network issue. It could be a temporary issue though. You can check if the other connections to the database server work well or not.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake: Automake Your Tasks in Ruby]]></title>
    <link href="http://euccas.github.io/blog/20160614/rake-automake-your-tasks-in-ruby.html"/>
    <updated>2016-06-14T17:59:06-07:00</updated>
    <id>http://euccas.github.io/blog/20160614/rake-automake-your-tasks-in-ruby</id>
    <content type="html"><![CDATA[<p>Rake is the build language for Ruby programs, originally developed by <a href="http://onestepback.org/">Jim Weirich</a>. It’s a standard library in Ruby 2.1. You can define tasks with Rake: named code blocks that carry out specific actions, such as running unit tests, deploy your code to github, etc. In this post, I’ll write about the basics of Rake and how to use it to automate the tasks of your Ruby projects.</p>

<h1 id="rakefile">Rakefile</h1>

<p>In order to use Rake to define tasks, first you need a Rakefile. A Rakefile is a Ruby source file that has access to some special methods: <strong>task</strong>, <strong>file</strong>, <strong>directory</strong>, and a few others. A task defined in the Rakefile can be run by the command-line <code>rake</code> program, or be called as a dependency by other tasks. The name of Rakefile can be <code>Rakefile</code> or <code>rakefile</code>.</p>

<!--more-->

<h1 id="write-descriptions-for-rake-tasks">Write Descriptions for Rake Tasks</h1>

<p>Writing a description to the defined tasks in Rakefile help you get more details about the task and know better what it does.</p>

<p>Example:</p>

<p>```ruby
desc ‘Upload documentation to server’
task ‘upload-docs’ =&gt; [‘rdoc’] do
    sh “scp -r #{html_dir}/* “ + “#{user}:#{server_path}”
end</p>

<p>```</p>

<h1 id="namespaces">Namespaces</h1>

<p>Using namespaces is a good way to group similar tasks in Rakefile. You’ll need specify the namespace when calling a task inside it. One example as you can see from Rails is this command</p>

<p><code>
rake db:migrate
</code></p>

<p>In this command, the <strong><em>db</em></strong> is the namespace, and the <strong><em>migrate</em></strong> is the task inside the namespace.</p>

<p>```ruby
namespace :cleanup do
    desc ‘Clean up database’
    task  :dbs =&gt; :environment do
        Db.cleanup
    end</p>

<pre><code>desc 'Clean up logs'
task :logs =&gt; :environment do
    Log.cleanup
end

task :all =&gt; [:dbs, :logs] end
</code></pre>

<p>desc ‘Cleanup everything’
task :cleanup =&gt; “cleanup:all”</p>

<p>```</p>

<h1 id="default-task">Default Task</h1>

<p>The default task is the one gets executed when you run rake without any arguments. You can set the default task in Rakefile by using the <code>:default</code> keyword.</p>

<p><code>ruby
task :default =&gt; 'cleanup'
</code></p>

<p><code>ruby
task :default =&gt; 'logs: cleanup'
</code></p>

<h1 id="multiple-tasks-running-in-parallel">Multiple Tasks Running in Parallel</h1>

<p>Rake’s <code>multitask</code> function supports running multiple tasks in parallel. The method is defining a task using the <code>multitask</code> function, and each of this task’s prerequisites will be run in a separate thread.</p>

<p>An example of multiple parallel tasks:</p>

<p>```ruby
task ‘copy_docs’ do
    # Simulate a large disk copy
    sleep 5
end</p>

<p>task ‘compile_extensions’ do
    # Simulate a C compiler compiling a bunch of files
    sleep 10
end</p>

<p>task ‘build_serial’ =&gt; [‘copy_docs’, ‘compile_extensions]
multitask ‘build_parallel’ =&gt; [‘copy_docs’, ‘compile_extensions’]</p>

<p>```</p>

<p>In this example, the <code>build_serial</code> task runs in about 15 seconds, but the <code>build_parallel</code> task runs in about 10 seconds.</p>

<h1 id="invoke-tasks">Invoke tasks</h1>

<p>Rake tasks can be invoked from other tasks using the <code>Rake::Task['&lt;your take&gt;'].invoke</code> method.</p>

<p>```ruby
task :cleanup do
    Rake::Task[‘logs: cleanup’].invoke
    puts “logs are cleaned!”
    Rake::Task[‘dbs: cleanup’].invoke
    puts “dbs are cleaned!”
end</p>

<p>```</p>

<h1 id="view-all-the-rake-tasks">View all the Rake tasks</h1>

<p>To get an overview of all the defined Rake tasks, use <code>rake -T</code></p>

<h1 id="include-external-rakefiles">Include external rakefiles</h1>

<p>When your project need include the Rake tasks defined in external directories, you’ll need include the external rakefiles into your project. The way to do it is using the <code>import</code>. Note the <code>require</code> won’t work here, as it looks for the <code>.rb</code> files instead of the <code>.rake</code> files.</p>

<p>Include one rakefile:</p>

<p><code>ruby
import File.dirname(__FILE__)+"/../../task/common/rakefile"
</code></p>

<p>Include multiple rakefiles in nested directories:</p>

<p>```ruby
Dir.glob(“#{File.dirname(<strong>FILE</strong>)}/*”).each do |d|
  next if !File.directory? d
  import d + “/rakefile” if File.file?(d + “/rakefile”)
end</p>

<p>```</p>

<h1 id="exit-from-rake-tasks">Exit from Rake tasks</h1>

<p>In a Ruby function, you can use <code>return</code> in the function when you want to exit (early). But in Rake tasks, the <code>return</code> is an invalid method to use, because each Rake task is actually a <code>Proc</code>. To exit early from a Rake task, you can use one of the following methods:</p>

<ul>
  <li>next</li>
</ul>

<p><strong><em>next</em></strong> will discard the following codes in the current rake task, and process the following part of the other tasks if there are any.</p>

<ul>
  <li>fail/raise</li>
</ul>

<p>```ruby
task :something do
  [1,2,3].each do |i|
    …
    fail “some error” if …
  end
end</p>

<p>```</p>

<ul>
  <li>
    <p>exit</p>
  </li>
  <li>
    <p>abort</p>
  </li>
</ul>

<p>When <strong><em>abort</em></strong> is used in a rescue block, it terminates the task as well as prints the whole error (even without using –trace).</p>

<h1 id="reference">Reference</h1>

<ul>
  <li><a href="https://www.amazon.com/Ruby-Cookbook-Lucas-Carlson/dp/1449373712">Ruby Cookbook 2nd Edition (L. Carlson)</a></li>
  <li><a href="http://martinfowler.com/articles/rake.html">Using the Rake Build Language (Martin Fowler)</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: Get Data From PostgreSQL Database Without the Model]]></title>
    <link href="http://euccas.github.io/blog/20160610/rails-get-data-without-model.html"/>
    <updated>2016-06-10T18:32:01-07:00</updated>
    <id>http://euccas.github.io/blog/20160610/rails-get-data-without-model</id>
    <content type="html"><![CDATA[<p>In Ruby on Rails, Active Record is the M in MVC - the model. Model is the layer of the system which represents business data and logic. Active Record facilitates the creation and the use of business objects whose data requires persistent storage to a database. In some cases, however, you may want to use databases in Rails applications without the Model. What you can do is using the <code>pg</code> gem to directly manipulate the data you need.</p>

<h1 id="create-a-database-connection">Create a database connection</h1>

<p>If the database is not declared in Rails app’s <code>config/database.yml</code> file, you won’t be able to use the <code>establish_connection</code> method in ActiveRecord. But you can still use the <code>pg</code> gem to directly connect to the database.</p>

<!--more-->

<p>```ruby
# page_controller.rb</p>

<p>conn = PGconn.connect(‘<server>', <port>, "", "", '<database>', "<user>", "<password>")
render :plain =&gt; "Oops, database currently not accessible" unless conn</password></user></database></port></server></p>

<p>```</p>

<h1 id="query-data-with-raw-sql">Query data with RAW SQL</h1>

<p>```ruby
# page_controller.rb</p>

<p>@page_records = []
result = conn.exec(‘SELECT * FROM &lt;table&gt; ORDER BY id DESC’)</p>

<p>@page_records = result</p>

<p>```</p>

<p>The result is an array of Hash. For example:</p>

<p><code>ruby
[
  { "title" =&gt; "my page 1", "author" =&gt; "Tom", "created_at" =&gt; "2016-06-08" }
  { "title" =&gt; "my page 2", "author" =&gt; "Nancy", "created_at" =&gt; "2016-06-09" }
]
</code></p>

<h1 id="use-the-data-in-view">Use the data in View</h1>

<p>When using the queried data in Rails View, need to note you need use <code>record['title']</code> instead of <code>record.title</code>, which is different from using the data generated from a Rails Model.</p>

<p>```ruby
# page.erb</p>

<div>
    &lt;% @page_records.each do |record| %&gt;
        <p> &lt;%= record['title'] %&gt; </p>
        <p> &lt;%= record['author'] %&gt; </p>
    &lt;% end %&gt;
</div>
<p>```</p>

<h1 id="as-a-note-in-the-end">As a note in the end</h1>

<p>Although the above approach works in Rails, I’d say a more decent way to handle the need of getting data from multiple databases, is creating a crafted Model. The process will need:</p>

<ul>
  <li>Add the configurations of all your external databases in Rails app</li>
  <li>Create a Model file</li>
</ul>

<p>```ruby
class Pages &lt; ActiveRecord::Base</p>

<p>end
```</p>

<ul>
  <li>Use <code>establish_connection</code> in the Model</li>
  <li>When your table name doesn’t match Rails convention, set the table name with <code>self.table_name = '&lt;your table name&gt;'</code></li>
  <li>Create methods in the Model to fetch the data you need</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Class and Instance Methods]]></title>
    <link href="http://euccas.github.io/blog/20160607/ruby-class-and-instance-methods.html"/>
    <updated>2016-06-07T11:37:51-07:00</updated>
    <id>http://euccas.github.io/blog/20160607/ruby-class-and-instance-methods</id>
    <content type="html"><![CDATA[<p>If you ever get confused about Class Methods, Instance Methods, Class Variables and Instance Variables in Ruby, read this post and you’ll understand it better :)</p>

<h1 id="class-methods">Class Methods</h1>
<ul>
  <li>Class methods belong to a class in Ruby, and it can be used without instance any class object.</li>
  <li>The definition of class methods has a “self” prefix.</li>
</ul>

<p><code>ruby
def self.show_name
end
</code></p>

<!--more-->

<h1 id="instance-methods">Instance Methods</h1>
<ul>
  <li>Instance methods belong to any instance of a class in Ruby. To use instance methods, you always need to have an existing instance first. Usually this means you have called <code>new()</code> method.</li>
  <li>Instance methods do not have “self” prefix in their definition.</li>
</ul>

<p><code>ruby
def show_name
end
</code></p>

<h1 id="class-variables">Class Variables</h1>
<ul>
  <li>Class variables belong to a class in Ruby. In other words, each class in Ruby automatically has an object even without any instances. The class variables are constants of the class object.</li>
  <li>Class variables are totally separated with instance variables (obvious though). The value of a class variable doesn’t change when the instance variables having the same name change.</li>
  <li>The name of a class variable has the “@@” prefix.</li>
</ul>

<p><code>ruby
class myClass
    @@foo = 0
end
</code></p>

<h1 id="instance-variables">Instance Variables</h1>
<ul>
  <li>Instance variables belong to an instance of a class in Ruby.</li>
  <li>Different instances have their own set of instance variables.</li>
  <li>The name of an instance variable has the “@” prefix.</li>
</ul>

<p><code>ruby
class myClass
    def initialize()
        @foo = 0
    end
</code></p>

<h1 id="a-quick-demo">A quick demo</h1>

<p>So now I have a quick demo to show more about the Class/Instance methods and variables.</p>

<p>In this demo, a Fruit class is created. The Fruit class has a <strong><em>class variable</em></strong> <code>@@color</code>, and the Fruit class instances have a <strong><em>instance variables</em></strong> <code>@color</code>.</p>

<p>Fruit class has a class method <code>self.show_color</code>, and an instance method with the same name <code>show_color</code>.</p>

<p>Now check out how these stuff works.</p>

<p>```ruby
# fruit.rb</p>

<p>class Fruit
    @@color = ‘yellow’ # class variable</p>

<pre><code>def initialize()
    @name = 'apple'
    @color = 'red' # instance variable
end

def self.show_color()
    puts "(class method) color: #{@@color}"
end

def change()
    change_color()
    puts "try calling instance method"
    show_color()
    puts "try calling class method"
    self.show_color()
    puts "change done"
end

def change_color()
    @color = 'green'
end

def show_color()
    puts "(instance method) color: #{@color}"
end end
</code></pre>

<p>```</p>

<p>The test file:</p>

<p>```ruby
# test.rb</p>

<p>$LOAD_PATH.unshift(File.expand_path(File.dirname(<strong>FILE</strong>)))
require ‘fruit.rb’</p>

<p>myfruit = Fruit.new
myfruit.show_color
myfruit.change</p>

<p>Fruit.show_color</p>

<p>```</p>

<p>Executing the <code>test.rb</code> file will generate the following result:</p>

<p><code>
(instance method) color: red
try calling instance method
(instance method) color: green
try calling class method
(instance method) color: green
change done
(class method) color: yellow
</code></p>

<h2 id="summary-of-the-demo">Summary of the demo</h2>

<ul>
  <li>
    <p><code>&lt;Class&gt;.new</code> instances an object by calling the <code>initialize</code> method. Instance variables are initialized</p>
  </li>
  <li>
    <p>Instance methods only calls the instance methods within itself, even use the <code>self</code> prefix.</p>
  </li>
</ul>

<p>```ruby
show_color()
self.show_color()</p>

<p>```</p>

<p>Both call the instance method, and shows the <code>color: green</code></p>

<ul>
  <li>
    <p>The change on instance variables doesn’t affect the class variables</p>
  </li>
  <li>
    <p>Class methods can be called without instances</p>
  </li>
</ul>

<p>```ruby
Fruit.show_color</p>

<p>```</p>

<ul>
  <li>Instance methods can’t be called without instances. The following statement will exceptions (NoMethodError).</li>
</ul>

<p>```ruby
myfruit = Fruit.new
myfruit.add</p>

<h1 id="undefined-method-add--nomethoderror">undefined method `add … (NoMethodError)</h1>

<p>```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Logging Easy in Ruby With Log4r]]></title>
    <link href="http://euccas.github.io/blog/20160518/make-logging-easy-in-ruby-with-log4r.html"/>
    <updated>2016-05-18T16:18:07-07:00</updated>
    <id>http://euccas.github.io/blog/20160518/make-logging-easy-in-ruby-with-log4r</id>
    <content type="html"><![CDATA[<p>Log4r is a Ruby gem that features a heirachical logging system of any number of levels, custom level names, multiple output destinations per log event, custom formatting, and more. The Log4r gem is open sourced on <a href="https://github.com/colbygk/log4r">GitHub</a>, and with comphrehensive documentations available on <a href="https://github.com/colbygk/log4r">Rubyforge</a>.</p>

<p>I have been using log4r at work in most of the applications and systems written in Ruby. It’s easy to use, and provide the features that an application would need:
- Support multiple message levels such as Fatal, Error, Warn and Msg.<br />
- Customizable log file format
- Multiple output destinations, like print out on the screen, and store in a log file</p>

<p>Here in this post, I’ll show you how to use log4r in your Ruby project.</p>

<!--more-->

<h2 id="step-1-install-gem-log4r">Step 1. Install Gem log4r</h2>
<p><code>
gem install log4r
</code></p>

<h2 id="step-2-include-log4r-in-your-project">Step 2: Include log4r in your project</h2>

<p>One thing to note is the log4r supports configurations through YAML file, and you can define the configuration file when including the log4r.</p>

<p><code>ruby
require 'log4r'
require 'log4r/yamlconfigurator'
require 'log4r/outputter/datefileoutputter'
require 'log4r/outputter/emailoutputter'
include Log4r
ycfg = YamlConfigurator    # handy shorthand
ycfg.load_yaml_file(File.dirname(__FILE__)+'/l4r.yml')
</code></p>

<h2 id="step-3-configure-log4r-with-a-config-file">Step 3: Configure log4r with a config file</h2>

<p>You can define the logging levels, logger names, output destinations, etc. The following code shows an example of the configurations that I use.</p>

<p>File name: log4r.yml</p>

<p>```
description: config file for log4r</p>

<hr />
<p># <em>** YAML2LOG4R **</em>
log4r_config:
  # define all pre config …
  pre_config:
    global:
      level: DEBUG
    root  :
      level: DEBUG</p>

<p># define all loggers …
  loggers:
    - name      : myproject 
      level     : DEBUG
      additive  : ‘false’
      trace     : ‘false’
      outputters:
        - stderr
        - logfile
        - email</p>

<p># define all outputters (incl. formatters)
  outputters:
    - type     : StderrOutputter
      name     : stderr 
      level    : INFO
      formatter:
        date_pattern: #’%y%m%d %H:%M:%S’
        pattern     : ‘[%c] %l: %m’
        type        : PatternFormatter</p>

<pre><code>- type        : DateFileOutputter
  name        : logfile
  level       : DEBUG
  date_pattern: #'%Y%m%d'
  trunc       : 'false'
  dirname     : "."
  formatter   :
    date_pattern: '%H:%M:%S'
    pattern     : '[%c] %d %l: %m'
    type        : PatternFormatter
  
- type        : EmailOutputter
  name        : email
  level       : FATAL 
  server      : &lt;server domain&gt;
  subject     : 'Message myproject:'
  from        : &lt;email address&gt;
  to          : &lt;email address&gt;
  formatter   :
    date_pattern: #'%y%m%d %H:%M:%S'
    pattern     : '%d %l: %m'
    type        : PatternFormatter --- ```
</code></pre>

<h2 id="step-4-initialize-a-logger">Step 4: Initialize a logger</h2>

<p>You need initialize a logger in your project first.</p>

<p><code>ruby
logger = Log4r::Logger['myproject']
</code></p>

<h2 id="step-5-use-your-logger">Step 5: Use your logger</h2>

<p><code>ruby
logger.info 'My Project Starts!'
logger.warn 'Here is a warning'
logger.error 'Here is an error'
logger.fatal 'Fatal error happens. Program will exit'
</code></p>
]]></content>
  </entry>
  
</feed>
