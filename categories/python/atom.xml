<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | euccas.github.io]]></title>
  <link href="http://euccas.github.io/categories/python/atom.xml" rel="self"/>
  <link href="http://euccas.github.io/"/>
  <updated>2022-03-06T13:23:07-08:00</updated>
  <id>http://euccas.github.io/</id>
  <author>
    <name><![CDATA[euccas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python: Why Decorators Are Useful]]></title>
    <link href="http://euccas.github.io/blog/20171129/python-why-decorators-are-useful.html"/>
    <updated>2017-11-29T22:41:51-08:00</updated>
    <id>http://euccas.github.io/blog/20171129/python-why-decorators-are-useful</id>
    <content type="html"><![CDATA[<p>In Python, by definition <em>decorators</em> are <em>functions</em> that <em>accept a function</em> as an argument, and <em>return a new function</em> as their return value. The reason why decorators exist in Python, but not in other similar language such as Ruby, is that <em>functions</em> are <em>objects</em> in Python. Functions can be assigned to variables and passed around the same as other object in Python. For example, a list can have functions as its elements, and functions can take other functions as arguments. Functions can be defined inside another function, and this forms closures.</p>

<h1 id="when-to-use-decorators">When to use decorators?</h1>

<p>It’s easy to understand what decorators are, while the real question you may have is: Why decorators are useful? When shall I use decorators in my Python program?</p>

<p>In some way, I see decorator functions are useful whenever you need process or extend the inputs or outputs of a given function (or more often, multiple functions) in some way you want. Here I list three usages of decorators that I can think of:</p>

<!--more-->

<h2 id="extend-the-functionality-of-your-functions">1. Extend the functionality of your functions</h2>

<p>Usually the extended functionalities are for some kind of enhancement, format changing, or temporary usage. In other words, you are adding some functionalities without touching the core logic of the original functions. A few common use cases:</p>

<ul>
  <li>Convert the output of your functions to another format, like JSON, YAML, etc.</li>
  <li>Add logging to your functions, or formatting the logging output</li>
  <li>Measure timing of your functions</li>
  <li>Count the time of function calls</li>
</ul>

<h2 id="add-caching-process-to-your-functions-to-make-them-faster">2. Add caching process to your functions, to make them faster</h2>

<p>When you have some functions which are possibly called for many times with the same input, you can write a decorator function that stores a cache of inputs and outputs of a given function. In this way, the function doesn’t need to re-compute everything each time, and make it faster to run it multiple times. This is related to the <a href="https://en.wikipedia.org/wiki/Memoization"><strong>Memoization technique</strong></a>.</p>

<h2 id="handle-exceptions">3. Handle exceptions</h2>

<p>You can use decorator functions to process exceptions. One example is supressing particular types of system exceptions raised by the target function. Another thing you can do is catching all exceptions raised by a function, prompt the user to ask what the program should act.</p>

<h1 id="two-examples">Two examples</h1>

<p>Now let me use two examples to describe the <strong>syntax</strong> of decorators.</p>

<h2 id="measure-timing">Measure timing</h2>

<p>This example comes from a good answer on <a href="https://stackoverflow.com/a/490228/3109254">Stack Overflow, by user RSabet</a>.</p>

<p>A decorator function <code>time_dec</code> tells you how long it takes to finish a function. 
Python has a shortened syntax for using decorators which allows us to wrap a function in a decorator after we define it. This shortened syntax is syntactic sugar <code>@decorator_function</code>.</p>

<p>```python
def time_dec(func):
    def wrapper(<em>arg):
        t = time.clock()
        res = func(</em>arg)
        print(func.func_name, time.clock()-t)
        return res</p>

<pre><code>return wrapper
</code></pre>

<p>@time_dec
def myFunction(n):
    …</p>

<p>```</p>

<p>Note the syntactic sugar <code>@time_dec</code> was used. It causes Python to rebind the function name <code>myFunction</code> as:</p>

<p>```python
myFunction = time_dec(myFunction)</p>

<p>```</p>

<h2 id="memoization">Memoization</h2>

<p>This example shows how we can add caching to the calculation of prime numbers.</p>

<p>A decorator function <code>memoize</code> is used to store inputs and calculate outputs of the original function <code>is_prime</code>.
The second time when you call function <code>is_prime</code> with the same input number, it runs much faster than the first time.</p>

<p>```python
def memoize(func):
    cache = {}
    def new_func(<em>args):
        if args not in cache:
            cache[args] = func(</em>args)
        return cache[args]
    return new_func</p>

<p>@memoize
def is_prime(number):
    for n in range(2, number):
        if number % n == 0:
            return False
    return True</p>

<p>```</p>

<h1 id="built-in-decorators">Built-in decorators</h1>

<p>Python also has several built-in decorators, and you might see them before you know the term decorator. The built-in decorators are mainly used to annotate methods of a class: <code>@property</code>, <code>@classmethod</code>, <code>@staticmethod</code>.</p>

<p><strong>@property</strong>: transforms a method function into a descriptor. When applied to a method, it creates extra properties objects: <code>getter</code>, <code>setter</code>, and <code>deleter</code>. By using <code>@property</code>, we can access a method as if it was an attribute.</p>

<p><strong>@classmethod</strong>: transforms a method function into a class-level function.</p>

<p><strong>@staticmethod</strong>: transforms a method function into a class-level function, and neither the object instance nor the class is implicitly passed as the first argument.</p>

<p>As decorators are just ordinary functions and the decorator syntax is just a syntactic sugar, you can easily turn any Python <a href="https://docs.python.org/3/library/functions.html">built-in function</a> to a decorator if it makes sense to use it that way.</p>

<h1 id="one-more-thing">One more thing</h1>

<p>One more thing, you may want to take a look at <a href="https://wiki.python.org/moin/PythonDecoratorLibrary">this PythonDecoratorLibaray page</a>. It collects a number of decorator examples and code pieces.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Instagram Moved to Python 3]]></title>
    <link href="http://euccas.github.io/blog/20170616/how-instagram-moved-to-python-3.html"/>
    <updated>2017-06-16T17:52:34-07:00</updated>
    <id>http://euccas.github.io/blog/20170616/how-instagram-moved-to-python-3</id>
    <content type="html"><![CDATA[<p>Instagram, the famous brunch sharing app, presented in <a href="https://us.pycon.org/2017/">PyCon 2017</a> and gave a talk in the keynote session on “How Instagram moves to Python 3”. If you have 15 minutes, read the interview with the speakers, Hui Ding and Lisa Guo from Instagram Infrastructure team, <a href="https://thenewstack.io/instagram-makes-smooth-move-python-3/]"><strong>here</strong></a>. If you have 45 minutes, watch their PyCon talk video, <a href="https://www.youtube.com/watch?v=66XoCk79kjM"><strong>here</strong></a>. If you have only 5 minutes, continue reading, <strong>right here</strong>.</p>

<p>Instagram’s backend, which serves over 400 million active users every day, is built on Python/Django stack. The decision on whether moving from Python 2 to Python 3, was really a decision on whether investing in a version of the language that was mature, but wasn’t going anywhere (Python 2 is expected to retire in 2020) – or the language that was the next version and had great and growing community support. The major motivations behind Instagram’s migration to Python 3 are:</p>

<ul>
  <li><strong>Typing support</strong> for dev velocity</li>
  <li>Better <strong>performance</strong> than Python 2</li>
  <li><strong>Community</strong> continues to make Python 3 better and faster</li>
</ul>

<p>The whole migration process took about 10 months, in roughly 3 stages.</p>

<!--more-->

<p><img class="center" src="/images/post_images/2017/20170616-instagram_python3_00.png" width="520"></p>

<ul>
  <li>First off, the migration was done directly on the Master Branch, which means the developers were adding new features to the code while migration was ongoing. So in the beginning of the Mirgration process, infrastructure added support of Python 3 on the Master Branch to make the code be able to run with both Python 2 and Python 3 environment.</li>
  <li>Massive code modification for 3 months, with the help of Python package <a href="https://pypi.python.org/pypi/modernize"><strong>“modernize”</strong></a>. Meanwhile, upgraded Third-party packages to Python 3 (working rule: <em>No Python 3, no new package</em>). Also deleted unused, incompatible packages.</li>
  <li>Intensive unit testing for 2 months. One limitation is data compatibility issues typically do not show up in unit tests.</li>
  <li>Production rollout for another 4 months (push Python 3 to every developer’s sandbox)</li>
</ul>

<p>In the talk, Lisa shared the challenges they faced in the migration process and how did they solved those problems.</p>

<ul>
  <li>Differences in <strong>unicode</strong>, <strong>str</strong>, <strong>bytes</strong>. Solved by using helper functions.</li>
  <li><strong>Pickle memcache data format incompatibility</strong> in Python 2 and Python 3. Solved by isolating memcaches for Python 2 and Python 3.</li>
  <li><strong>Iterator</strong> differences, such as <code>map</code>. Solved by converting all maps to list in Python 3.</li>
  <li><strong>Dictionary order</strong> is different in different Python versions, which caused differences in the dumped JSON data. Solved by forcing <code>sorted_keys</code> in <code>json.dump</code> function.</li>
  <li>With Python 3, while CPU instructions per request decreased by 12%, max requests per second (capacity) had 0% increase! Found the root cause in the code of checking memory configuration, and the issue was memory optimization condition was never met in Python 3 as <code>True</code> because of unicode issue. Solved by adding a magical character <strong>“b”</strong>, just like this:</li>
</ul>

<p><img class="center" src="/images/post_images/2017/20170616-instagram_python3_01.png" width="520"></p>

<p>In Feb 2017, Instagram’s stack completely dropped Python 2 and moved to Python 3 (v3.6). So far they’ve got this from Python 3:</p>

<p><img class="center" src="/images/post_images/2017/20170616-instagram_python3_02.png" width="520"></p>

<p>One more thing, in the talk Hui Ding also briefly discussed a few <strong>Python Efficiency Strategies</strong> that Instagram used to support the growing number of features and users:</p>

<ul>
  <li>Build extensive tools to profile and understand perf bottleneck</li>
  <li>Proactively push stable, critical components to C/C++, e.g., memcached access library</li>
  <li>Use Cythonization to improve performance</li>
  <li>Future ideas: Make the Django stack completely Async? Create a new python runtime?</li>
</ul>

<p>Changing an existing service to use a new version of language can never be easy, especially when your service is at such a scale - serving millions of people. You just cannot afford to breaking the existing service. Moving to Python 3 in 10 months must be a challenging process. “It can be done. It worths it. Make it happen. And Make Python 3 better.”</p>

<p>Nice work Instagram!</p>

<p><img class="center" src="/images/post_images/2017/20170616-instagram_python3_03.png" width="520"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Multiprocessing]]></title>
    <link href="http://euccas.github.io/blog/20161231/python-multiprocessing.html"/>
    <updated>2016-12-31T09:37:01-08:00</updated>
    <id>http://euccas.github.io/blog/20161231/python-multiprocessing</id>
    <content type="html"><![CDATA[<p>Python’s GIL (Global Interpreter Lock) was designed to be a thread-safe mechanism, and it effectively prevents conflicts between multiple threads. GIL makes it easy to implemente multi-threading with Python. However, it also prevents Python multi-threading from utilizing the multiple cores of a computer to achieve improved execution speed. This is why using the <code>threading</code> module in Python won’t help your program run faster through parallelism.</p>

<p>The good thing is Python provides a <a href="https://docs.python.org/3.4/library/multiprocessing.html"><code>multiprocessing</code> module</a> since Python 2.6. With the <code>multiprocessing</code> module we can spawn subprocesses and effectively avoid some of the limitations that GIL brings, on both Unix and Windows platforms.</p>

<p>In this post I’ll briefly introduce <code>multiprocess</code> module and show how it can be used for parallel programming.</p>

<!--more-->

<h1 id="a-simple-example-of-multiprocessing">A simple example of <em>multiprocessing</em></h1>

<p>In the following example, we use <code>multiprocessing</code> module to spawn a child process from a parent process using a <code>Process</code> object.</p>

<p>```python
from multiprocessing import Process
import os
import time</p>

<p>def task(name):
    print(“Starting child process with id: “.format(os.getpid()))
    print(“Parent process: “.format(os.getppid()))
    print(“Task start: just sleeps 5 seconds …”)
    time.sleep(5)
    print(“Task done”)</p>

<p>if <strong>name</strong> == “<strong>main</strong>”:
    print(“In parent process, id: “.format(os.getpid())
    p = Process(target=task, args=(‘firstone’))</p>

<pre><code>p.start()
print("In parent process, after child process start")
print("parent process about to join child process")

p.join()
print("In parent process, after child process join")
print("parent process exiting with id ".format(os.getpid()))
print("the parent's parent process: ".format(os.getppid()))
</code></pre>

<p>```</p>

<p>The output of this program will be:</p>

<p><code>python
In parent process, id 5245
In parent process, after child process start
parent process about to join child process
Starting child process with id: 5246
Parent process: 5245
Task start: just sleeps 5 seconds ...
Task done
In parent process, after child process join
parent process exiting with id 5245
the parent's parent process: 5231
</code></p>

<p>The program starts the subprocess using <code>p.start()</code></p>

<h1 id="three-ways-to-start-a-process">Three ways to start a process</h1>

<p>Depending on the platform, <code>multiprocessing</code> supports three ways to start a process.</p>

<ul>
  <li><strong>spawn</strong></li>
</ul>

<p>Available on both Unix and Windows. The default on Windows. The parent process starts a fresh python interpreter process. Slower comparing with <code>fork</code> or <code>forkserver</code>.</p>

<ul>
  <li><strong>fork</strong></li>
</ul>

<p>Parent process uses <code>os.fork()</code> to fork the Python interpreter. The child process is identical to the parent process, with inheritating all resources of the parent process. Available on Unix only. The default of Unix.</p>

<ul>
  <li><strong>forkserver</strong></li>
</ul>

<p>Starts a server process. Whenever a new process is needed, the parent process connects to the server and requests that it fork a new process. Available on Unix.</p>

<p>To select a start method, you can use <code>set_start_method()</code>. This method should be used only once in the program.</p>

<p><code>python
mp.set_start_method('spawn')
p = mp.Process(target=foo, args=())
p.start()
p.join()
</code></p>

<h1 id="two-ways-to-exchange-objects-between-processes">Two ways to exchange objects between processes</h1>

<p>Two types of communication channel between processes are supported in <code>multiprocessing</code>, and they are:</p>

<ul>
  <li>class Queue</li>
  <li>function Pipe()</li>
</ul>

<p>If you need know more details, the Python document <a href="https://docs.python.org/3.4/library/multiprocessing.html#exchanging-objects-between-processes">here</a> will provide help.</p>

<h1 id="use-a-pool-of-workers">Use a pool of workers</h1>

<p>The <code>Pool</code> class is a quite useful one in the <code>multiprocessing</code> module, as in real life you’ll often need multiple workers to execute the tasks in your program in parallel. What the <code>Pool</code> class represents is a pool of workers. The following example shows how to create a pool with 4 processes as workers, and assign tasks to the workers.</p>

<p>```python
from multiprocessing import Pool
from time import sleep</p>

<p>def f(x):
    return x*x</p>

<p>if <strong>name</strong> == “<strong>main</strong>”:
    # start 4 worker processes
    with Pool(processes=4) as pool:
        res = pool.apply_async(f, [10])
        print(res.get(timeout=1))</p>

<pre><code>pool.close()
pool.join()
</code></pre>

<p>```</p>

<p>The <code>apply_async(f, args, kwargs)</code> method calls a function for many times, or calls a number of different functions asynchronously with arguments arguments. Each process will NOT block other processes. The order of the multiple processes are not guaranteed.</p>

<p>The <code>close()</code> prevents any more tasks from being submitted to the pool. Once all the tasks have been completed, the worker process will exit.</p>

<p>The <code>join()</code> method waits for the worker processes to exit. It is required to call <code>close()</code> or <code>terminate()</code> before using <code>join()</code> method.</p>

<p>Both <code>close()</code> and <code>terminate()</code> will stop all the worker processes. The difference is <code>close()</code> will wait for worker process to finish, and <code>terminate()</code> immediately shut down worker processes without completing outstanding work.</p>

<p>Another useful method provided by <code>multiprocessing</code> module is <code>cpu_count()</code>, which returns the number of CPUs in the current system. You can use this value to decide how many processes to create in a pool.</p>

<p><em>This post is my last post in 2016. Happy new year!</em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Generators]]></title>
    <link href="http://euccas.github.io/blog/20161223/python-generators.html"/>
    <updated>2016-12-23T08:48:45-08:00</updated>
    <id>http://euccas.github.io/blog/20161223/python-generators</id>
    <content type="html"><![CDATA[<p>Generators is a powerful weapon of Python. Generators help you write concise code, give you lazy evaluation, and improve the efficience for calculating large sets of results. Personally I think it’s a good habit to use generators in Python whenever you can, if you really want your code to be Pythonic.</p>

<h1 id="how-to-create-a-generator">How to create a generator</h1>

<p>There are mainly two ways to create a generator: using the <code>yield</code> keyword in the function, or using the <code>()</code> as a generator expression.</p>

<ul>
  <li>The <code>yield</code> keyword makes the function yields control back to the calling function on every iteration</li>
  <li>The <code>()</code> expression returns a generator object</li>
</ul>

<!--more-->

<h1 id="how-to-refactor-a-function-to-use-a-generator">How to refactor a function to use a generator</h1>

<p>Functions that construct a list or another iterable and returns it can be turned into a generator by:</p>

<ol>
  <li>Converting the list append into a <code>yield</code></li>
  <li>Removing the empty list creation</li>
  <li>Removing the return</li>
</ol>

<h1 id="a-generator-example">A generator example</h1>
<p>Let’s see an example: implement a function that takes a list and return a list of the current running mean. For example, given the input list <code>[8, 4, 3, 1, 3, 5]</code>, the expected return result is <code>[8.0, 6.0, 5.0, 4.0, 3.8, 4.0]</code>.</p>

<p>First we’ll implement it without using generators.</p>

<p>```python
def running_mean(numbers):
	average = []
	sum = 0
	for i, num in enumerate(numbers):
		sum += num
		average.append(sum/(i*1.0))
	return average</p>

<p>numbers = [8, 4, 3, 1, 3, 5]
print(running_mean(numbers))</p>

<p>```</p>

<p>Now we can refactor the above implementation to use a generator:</p>

<p>```python
def running_mean(numbers):
	sum = 0
	for i, num = enumerate(numbers):
		sum += num
		yield sum/((i+1)*1.0)</p>

<p>numbers = [8,4,3,1,3,5]
print(list(running_mean(numbers)))</p>

<p>```</p>

<p>What we did in the refactoring was: replacing the list appending with a yield (<code>average.append()</code>), removing the empty list creation (<code>average = []</code>), and replacing the return statement with a yield statement.</p>

<p>One important property of Python generator object is it is a single-use object. In other words, a generator keeps yielding answers forever. The looping in a generator only ends when the calling function decides to end it. Meanwhile a generator can only be called once.</p>

<p>A few other generator examples can be found on my <a href="https://github.com/euccas/IntermediatePython/tree/master/iteration/generator">GitHub repo <em>IntermediatePython</em></a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Additional Packages in WinPython]]></title>
    <link href="http://euccas.github.io/blog/20161011/install-additional-packages-in-winpython.html"/>
    <updated>2016-10-11T17:11:51-07:00</updated>
    <id>http://euccas.github.io/blog/20161011/install-additional-packages-in-winpython</id>
    <content type="html"><![CDATA[<p>For people who need use portable Python on Windows, <a href="https://winpython.github.io/">WinPython</a> is a good choice. WinPython is a free open-source portable distribution of Python. The project is hosted on <a href="https://github.com/winpython">github</a>. It is also a good alternative to <a href="http://portablepython.com/">Portable Python</a>, which is not being developed anymore.</p>

<p>In this post I’ll show you how could you install additional packages to WinPython.</p>

<h1 id="install-winpython">Install WinPython</h1>

<p>WinPython is portable. It means that you can download WinPython from the <a href="http://winpython.sourceforge.net/">WinPython download page</a>, add it to your system PATH, and start using it without any installation.</p>

<!--more-->

<ul>
  <li>Unzip the downloaded WinPython Package to a local directory, eg. <code>C:\WinPython</code>.</li>
  <li>Add the local directory path to your system’s <code>PATH</code> variable. You can use Windows command <code>set</code> or <code>setx</code>.</li>
</ul>

<p><code>
   set PATH=C:\WinPython\;%PATH%
</code></p>

<p>Now you can open a Windows cmd prompt, and test your installed python version.</p>

<p><code>
    where python
	&gt;&gt;&gt; C:\WinPython\python.exe
</code></p>

<h1 id="install-a-package">Install a package</h1>

<p>You can install a Python Package to WinPython using <code>pip</code>. If you have other versions of Python installed on your computer, you’ll need make sure the <code>pip</code> you use actually is the one WinPython provides.</p>

<p>Where is the <code>pip</code>?</p>

<p>It’s in the <code>Scripts</code> directory of the WinPython path.
For example:</p>

<p><code>
C:\WinPython\Scripts
</code></p>

<p>Now you can use the WinPython <code>pip</code> to install additional Python packages.</p>

<p>```</p>
<WinPython Path="">\Scripts\pip install <package name="">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>If the installation successfully done, you will find the installed packages in WinPython's library path.
</span></code></pre></td></tr></table></div></figure>
<WinPython Path="">\Lib\site-packages\<package name="">
```

That's it! Your Python package is ready to use!









</package></WinPython></package></WinPython>
]]></content>
  </entry>
  
</feed>
