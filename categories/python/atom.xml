<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | euccas.github.io]]></title>
  <link href="http://euccas.github.io/categories/python/atom.xml" rel="self"/>
  <link href="http://euccas.github.io/"/>
  <updated>2017-11-19T21:24:32-08:00</updated>
  <id>http://euccas.github.io/</id>
  <author>
    <name><![CDATA[euccas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Instagram Moved to Python 3]]></title>
    <link href="http://euccas.github.io/20170616/how-instagram-moved-to-python-3.html"/>
    <updated>2017-06-16T17:52:34-07:00</updated>
    <id>http://euccas.github.io/20170616/how-instagram-moved-to-python-3</id>
    <content type="html"><![CDATA[<p>Instagram, the famous brunch sharing app, presented in <a href="https://us.pycon.org/2017/">PyCon 2017</a> and gave a talk in the keynote session on “How Instagram moves to Python 3”. If you have 15 minutes, read the interview with the speakers, Hui Ding and Lisa Guo from Instagram Infrastructure team, <a href="https://thenewstack.io/instagram-makes-smooth-move-python-3/]"><strong>here</strong></a>. If you have 45 minutes, watch their PyCon talk video, <a href="https://www.youtube.com/watch?v=66XoCk79kjM"><strong>here</strong></a>. If you have only 5 minutes, continue reading, <strong>right here</strong>.</p>

<p>Instagram’s backend, which serves over 400 million active users every day, is built on Python/Django stack. The decision on whether moving from Python 2 to Python 3, was really a decision on whether investing in a version of the language that was mature, but wasn’t going anywhere (Python 2 is expected to retire in 2020) – or the language that was the next version and had great and growing community support. The major motivations behind Instagram’s migration to Python 3 are:</p>

<ul>
  <li><strong>Typing support</strong> for dev velocity</li>
  <li>Better <strong>performance</strong> than Python 2</li>
  <li><strong>Community</strong> continues to make Python 3 better and faster</li>
</ul>

<p>The whole migration process took about 10 months, in roughly 3 stages.</p>

<!--more-->

<p><img class="center" src="/images/post_images/2017/20170616-instagram_python3_00.png" width="520"></p>

<ul>
  <li>First off, the migration was done directly on the Master Branch, which means the developers were adding new features to the code while migration was ongoing. So in the beginning of the Mirgration process, infrastructure added support of Python 3 on the Master Branch to make the code be able to run with both Python 2 and Python 3 environment.</li>
  <li>Massive code modification for 3 months, with the help of Python package <a href="https://pypi.python.org/pypi/modernize"><strong>“modernize”</strong></a>. Meanwhile, upgraded Third-party packages to Python 3 (working rule: <em>No Python 3, no new package</em>). Also deleted unused, incompatible packages.</li>
  <li>Intensive unit testing for 2 months. One limitation is data compatibility issues typically do not show up in unit tests.</li>
  <li>Production rollout for another 4 months (push Python 3 to every developer’s sandbox)</li>
</ul>

<p>In the talk, Lisa shared the challenges they faced in the migration process and how did they solved those problems.</p>

<ul>
  <li>Differences in <strong>unicode</strong>, <strong>str</strong>, <strong>bytes</strong>. Solved by using helper functions.</li>
  <li><strong>Pickle memcache data format incompatibility</strong> in Python 2 and Python 3. Solved by isolating memcaches for Python 2 and Python 3.</li>
  <li><strong>Iterator</strong> differences, such as <code>map</code>. Solved by converting all maps to list in Python 3.</li>
  <li><strong>Dictionary order</strong> is different in different Python versions, which caused differences in the dumped JSON data. Solved by forcing <code>sorted_keys</code> in <code>json.dump</code> function.</li>
  <li>With Python 3, while CPU instructions per request decreased by 12%, max requests per second (capacity) had 0% increase! Found the root cause in the code of checking memory configuration, and the issue was memory optimization condition was never met in Python 3 as <code>True</code> because of unicode issue. Solved by adding a magical character <strong>“b”</strong>, just like this:</li>
</ul>

<p><img class="center" src="/images/post_images/2017/20170616-instagram_python3_01.png" width="520"></p>

<p>In Feb 2017, Instagram’s stack completely dropped Python 2 and moved to Python 3 (v3.6). So far they’ve got this from Python 3:</p>

<p><img class="center" src="/images/post_images/2017/20170616-instagram_python3_02.png" width="520"></p>

<p>One more thing, in the talk Hui Ding also briefly discussed a few <strong>Python Efficiency Strategies</strong> that Instagram used to support the growing number of features and users:</p>

<ul>
  <li>Build extensive tools to profile and understand perf bottleneck</li>
  <li>Proactively push stable, critical components to C/C++, e.g., memcached access library</li>
  <li>Use Cythonization to improve performance</li>
  <li>Future ideas: Make the Django stack completely Async? Create a new python runtime?</li>
</ul>

<p>Changing an existing service to use a new version of language can never be easy, especially when your service is at such a scale - serving millions of people. You just cannot afford to breaking the existing service. Moving to Python 3 in 10 months must be a challenging process. “It can be done. It worths it. Make it happen. And Make Python 3 better.”</p>

<p>Nice work Instagram!</p>

<p><img class="center" src="/images/post_images/2017/20170616-instagram_python3_03.png" width="520"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Multiprocessing]]></title>
    <link href="http://euccas.github.io/20161231/python-multiprocessing.html"/>
    <updated>2016-12-31T09:37:01-08:00</updated>
    <id>http://euccas.github.io/20161231/python-multiprocessing</id>
    <content type="html"><![CDATA[<p>Python’s GIL (Global Interpreter Lock) was designed to be a thread-safe mechanism, and it effectively prevents conflicts between multiple threads. GIL makes it easy to implemente multi-threading with Python. However, it also prevents Python multi-threading from utilizing the multiple cores of a computer to achieve improved execution speed. This is why using the <code>threading</code> module in Python won’t help your program run faster through parallelism.</p>

<p>The good thing is Python provides a <a href="https://docs.python.org/3.4/library/multiprocessing.html"><code>multiprocessing</code> module</a> since Python 2.6. With the <code>multiprocessing</code> module we can spawn subprocesses and effectively avoid some of the limitations that GIL brings, on both Unix and Windows platforms.</p>

<p>In this post I’ll briefly introduce <code>multiprocess</code> module and show how it can be used for parallel programming.</p>

<!--more-->

<h1 id="a-simple-example-of-multiprocessing">A simple example of <em>multiprocessing</em></h1>

<p>In the following example, we use <code>multiprocessing</code> module to spawn a child process from a parent process using a <code>Process</code> object.</p>

<p>```
from multiprocessing import Process
import os
import time</p>

<p>def task(name):
    print(“Starting child process with id: “.format(os.getpid()))
    print(“Parent process: “.format(os.getppid()))
    print(“Task start: just sleeps 5 seconds …”)
    time.sleep(5)
    print(“Task done”)</p>

<p>if <strong>name</strong> == “<strong>main</strong>”:
    print(“In parent process, id: “.format(os.getpid())
    p = Process(target=task, args=(‘firstone’))
    p.start()
    print(“In parent process, after child process start”)
    print(“parent process about to join child process”)
    p.join()
    print(“In parent process, after child process join”)
    print(“parent process exiting with id “.format(os.getpid()))
    print(“the parent’s parent process: “.format(os.getppid()))</p>

<p>```</p>

<p>The output of this program will be:</p>

<p><code>
In parent process, id 5245
In parent process, after child process start
parent process about to join child process
Starting child process with id: 5246
Parent process: 5245
Task start: just sleeps 5 seconds ...
Task done
In parent process, after child process join
parent process exiting with id 5245
the parent's parent process: 5231
</code></p>

<p>The program starts the subprocess using <code>p.start()</code></p>

<h1 id="three-ways-to-start-a-process">Three ways to start a process</h1>

<p>Depending on the platform, <code>multiprocessing</code> supports three ways to start a process.</p>

<ul>
  <li><strong>spawn</strong></li>
</ul>

<p>Available on both Unix and Windows. The default on Windows. The parent process starts a fresh python interpreter process. Slower comparing with <code>fork</code> or <code>forkserver</code>.</p>

<ul>
  <li><strong>fork</strong></li>
</ul>

<p>Parent process uses <code>os.fork()</code> to fork the Python interpreter. The child process is identical to the parent process, with inheritating all resources of the parent process. Available on Unix only. The default of Unix.</p>

<ul>
  <li><strong>forkserver</strong></li>
</ul>

<p>Starts a server process. Whenever a new process is needed, the parent process connects to the server and requests that it fork a new process. Available on Unix.</p>

<p>To select a start method, you can use <code>set_start_method()</code>. This method should be used only once in the program.</p>

<p><code>
mp.set_start_method('spawn')
p = mp.Process(target=foo, args=())
p.start()
p.join()
</code></p>

<h1 id="two-ways-to-exchange-objects-between-processes">Two ways to exchange objects between processes</h1>

<p>Two types of communication channel between processes are supported in <code>multiprocessing</code>, and they are:</p>

<ul>
  <li>class Queue</li>
  <li>function Pipe()</li>
</ul>

<p>If you need know more details, the Python document <a href="https://docs.python.org/3.4/library/multiprocessing.html#exchanging-objects-between-processes">here</a> will provide help.</p>

<h1 id="use-a-pool-of-workers">Use a pool of workers</h1>

<p>The <code>Pool</code> class is a quite useful one in the <code>multiprocessing</code> module, as in real life you’ll often need multiple workers to execute the tasks in your program in parallel. What the <code>Pool</code> class represents is a pool of workers. The following example shows how to create a pool with 4 processes as workers, and assign tasks to the workers.</p>

<p>```
from multiprocessing import Pool
from time import sleep</p>

<p>def f(x):
    return x*x</p>

<p>if <strong>name</strong> == “<strong>main</strong>”:
    # start 4 worker processes
    with Pool(processes=4) as pool:
        res = pool.apply_async(f, [10])
        print(res.get(timeout=1))</p>

<pre><code>pool.close()
pool.join()
</code></pre>

<p>```</p>

<p>The <code>apply_async(f, args, kwargs)</code> method calls a function for many times, or calls a number of different functions asynchronously with arguments arguments. Each process will NOT block other processes. The order of the multiple processes are not guaranteed.</p>

<p>The <code>close()</code> prevents any more tasks from being submitted to the pool. Once all the tasks have been completed, the worker process will exit.</p>

<p>The <code>join()</code> method waits for the worker processes to exit. It is required to call <code>close()</code> or <code>terminate()</code> before using <code>join()</code> method.</p>

<p>Both <code>close()</code> and <code>terminate()</code> will stop all the worker processes. The difference is <code>close()</code> will wait for worker process to finish, and <code>terminate()</code> immediately shut down worker processes without completing outstanding work.</p>

<p>Another useful method provided by <code>multiprocessing</code> module is <code>cpu_count()</code>, which returns the number of CPUs in the current system. You can use this value to decide how many processes to create in a pool.</p>

<p><em>This post is my last post in 2016. Happy new year!</em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Generators]]></title>
    <link href="http://euccas.github.io/20161223/python-generators.html"/>
    <updated>2016-12-23T08:48:45-08:00</updated>
    <id>http://euccas.github.io/20161223/python-generators</id>
    <content type="html"><![CDATA[<p>Generators is a powerful weapon of Python. Generators help you write concise code, give you lazy evaluation, and improve the efficience for calculating large sets of results. Personally I think it’s a good habit to use generators in Python whenever you can, if you really want your code to be Pythonic.</p>

<h1 id="how-to-create-a-generator">How to create a generator</h1>

<p>There are mainly two ways to create a generator: using the <code>yield</code> keyword in the function, or using the <code>()</code> as a generator expression.</p>

<ul>
  <li>The <code>yield</code> keyword makes the function yields control back to the calling function on every iteration</li>
  <li>The <code>()</code> expression returns a generator object</li>
</ul>

<!--more-->

<h1 id="how-to-refactor-a-function-to-use-a-generator">How to refactor a function to use a generator</h1>

<p>Functions that construct a list or another iterable and returns it can be turned into a generator by:</p>

<ol>
  <li>Converting the list append into a <code>yield</code></li>
  <li>Removing the empty list creation</li>
  <li>Removing the return</li>
</ol>

<h1 id="a-generator-example">A generator example</h1>
<p>Let’s see an example: implement a function that takes a list and return a list of the current running mean. For example, given the input list <code>[8, 4, 3, 1, 3, 5]</code>, the expected return result is <code>[8.0, 6.0, 5.0, 4.0, 3.8, 4.0]</code>.</p>

<p>First we’ll implement it without using generators.</p>

<p>```
def running_mean(numbers):
	average = []
	sum = 0
	for i, num in enumerate(numbers):
		sum += num
		average.append(sum/(i*1.0))
	return average</p>

<p>numbers = [8, 4, 3, 1, 3, 5]
print(running_mean(numbers))</p>

<p>```</p>

<p>Now we can refactor the above implementation to use a generator:</p>

<p>```
def running_mean(numbers):
	sum = 0
	for i, num = enumerate(numbers):
		sum += num
		yield sum/((i+1)*1.0)</p>

<p>numbers = [8,4,3,1,3,5]
print(list(running_mean(numbers)))</p>

<p>```</p>

<p>What we did in the refactoring was: replacing the list appending with a yield (<code>average.append()</code>), removing the empty list creation (<code>average = []</code>), and replacing the return statement with a yield statement.</p>

<p>One important property of Python generator object is it is a single-use object. In other words, a generator keeps yielding answers forever. The looping in a generator only ends when the calling function decides to end it. Meanwhile a generator can only be called once.</p>

<p>A few other generator examples can be found on my <a href="https://github.com/euccas/IntermediatePython/tree/master/iteration/generator">GitHub repo <em>IntermediatePython</em></a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Additional Packages in WinPython]]></title>
    <link href="http://euccas.github.io/20161011/install-additional-packages-in-winpython.html"/>
    <updated>2016-10-11T17:11:51-07:00</updated>
    <id>http://euccas.github.io/20161011/install-additional-packages-in-winpython</id>
    <content type="html"><![CDATA[<p>For people who need use portable Python on Windows, <a href="https://winpython.github.io/">WinPython</a> is a good choice. WinPython is a free open-source portable distribution of Python. The project is hosted on <a href="https://github.com/winpython">github</a>. It is also a good alternative to <a href="http://portablepython.com/">Portable Python</a>, which is not being developed anymore.</p>

<p>In this post I’ll show you how could you install additional packages to WinPython.</p>

<h1 id="install-winpython">Install WinPython</h1>

<p>WinPython is portable. It means that you can download WinPython from the <a href="http://winpython.sourceforge.net/">WinPython download page</a>, add it to your system PATH, and start using it without any installation.</p>

<!--more-->

<ul>
  <li>Unzip the downloaded WinPython Package to a local directory, eg. <code>C:\WinPython</code>.</li>
  <li>Add the local directory path to your system’s <code>PATH</code> variable. You can use Windows command <code>set</code> or <code>setx</code>.</li>
</ul>

<p><code>
   set PATH=C:\WinPython\;%PATH%
</code></p>

<p>Now you can open a Windows cmd prompt, and test your installed python version.</p>

<p><code>
    where python
	&gt;&gt;&gt; C:\WinPython\python.exe
</code></p>

<h1 id="install-a-package">Install a package</h1>

<p>You can install a Python Package to WinPython using <code>pip</code>. If you have other versions of Python installed on your computer, you’ll need make sure the <code>pip</code> you use actually is the one WinPython provides.</p>

<p>Where is the <code>pip</code>?</p>

<p>It’s in the <code>Scripts</code> directory of the WinPython path.
For example:</p>

<p><code>
C:\WinPython\Scripts
</code></p>

<p>Now you can use the WinPython <code>pip</code> to install additional Python packages.</p>

<p>```</p>
<WinPython Path="">\Scripts\pip install <package name="">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>If the installation successfully done, you will find the installed packages in WinPython's library path.
</span></code></pre></td></tr></table></div></figure>
<WinPython Path="">\Lib\site-packages\<package name="">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>That's it! Your Python package is ready to use!
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;/package&gt;&lt;/WinPython&gt;&lt;/package&gt;&lt;/WinPython&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>    &lt;title type="html"&gt;&lt;![CDATA[Dunder Methods in Python]]&gt;&lt;/title&gt;
</span><span class='line'>    &lt;link href="http://euccas.github.io/20160920/python-dunder-methods.html"/&gt;
</span><span class='line'>    &lt;updated&gt;2016-09-20T21:28:51-07:00&lt;/updated&gt;
</span><span class='line'>    &lt;id&gt;http://euccas.github.io/20160920/python-dunder-methods&lt;/id&gt;
</span><span class='line'>    &lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;In Python, we sometimes see method names with &lt;code&gt;__&lt;/code&gt; around, such as the &lt;code&gt;__init__&lt;/code&gt; method that every Class has. These methods are “dunder” methods (“dunder” stands for “double under” or “double underscore”). Dunder methods in Python are used for operator overloading and customizing behavior of other functions.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Sometimes dunder methods are also called “magic methods” because they are usually called by Python under the hood. But they are not really magical, you can define dunder methods to customize the behavior of your own classes.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 id="examples-of-dunder-methods"&gt;Examples of Dunder Methods&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;In the following example, we can see three dunder methods:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>  &lt;li&gt;&lt;code&gt;__init__&lt;/code&gt; method: is called to initialize the class&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;&lt;code&gt;__str__&lt;/code&gt; method: is called when converting the object to a human-readable string&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;&lt;code&gt;__repr__&lt;/code&gt; method: is called when converting the object to a developer-readable string&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```
</span><span class='line'>class Flower:
</span><span class='line'>	def &lt;strong&gt;init&lt;/strong&gt;(self, color=’red’):
</span><span class='line'>		self.color = color&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;def __str__(self):
</span><span class='line'>	return "Flower in color {color}".format(color=self.color)
</span><span class='line'>
</span><span class='line'>def __repr__(self):
</span><span class='line'>    return "Flower(color={})".format(self.color) ```
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;In Python, many dunder methods are implemented and used for operations such as arithmetic operators, comparison operators, truthiness, etc. The following are a few examples:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;strong&gt;Arithmetic Operators&lt;/strong&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>  &lt;li&gt;&lt;code&gt;+&lt;/code&gt; : &lt;code&gt;__add__&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;&lt;code&gt;-&lt;/code&gt; : &lt;code&gt;__sub__&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;&lt;code&gt;*&lt;/code&gt; : &lt;code&gt;__mul__&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;&lt;code&gt;/&lt;/code&gt; : &lt;code&gt;__div__&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;strong&gt;Comparison Operators&lt;/strong&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>  &lt;li&gt;&lt;code&gt;x &lt; y&lt;/code&gt; : &lt;code&gt;x.__lt__(y)&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;&lt;code&gt;x &lt;= y&lt;/code&gt; : &lt;code&gt;x.__le__(y)&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;&lt;code&gt;x &gt; y&lt;/code&gt; : &lt;code&gt;x.__gt__(y)&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;&lt;code&gt;x &gt;= y&lt;/code&gt; : &lt;code&gt;x.__ge__(y)&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;&lt;code&gt;x == y&lt;/code&gt; : &lt;code&gt;x.__eq__(y)&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;&lt;code&gt;x != y&lt;/code&gt; : &lt;code&gt;x.__ge__(y)&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;If you know about Bash shell, you may notice the name of these dunder methods are very similar to the operators in Bash.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;strong&gt;Truthiness&lt;/strong&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>  &lt;li&gt;&lt;code&gt;bool(x)&lt;/code&gt; : &lt;code&gt;x.__bool__()&lt;/code&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 id="use-dunder-methods-to-customize-class-behaviors"&gt;Use Dunder Methods to Customize Class Behaviors&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Dunder methods provide a way for our class to customize operators and other built-in Python behavior for our objects. In the following two examples, I’ll use dunder methods to overload arithmetic operators, and implement a dictionary that can be used with both attribute and item syntax.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="example-1-overload-arithmetic-operators"&gt;Example 1: Overload Arithmetic Operators&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Make an &lt;code&gt;is_callable&lt;/code&gt; function to check if an object type is callable.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Example:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;
</span><span class='line'>&gt;&gt;&gt; is_callable(sorted)
</span><span class='line'>True
</span><span class='line'>&gt;&gt;&gt; is_callable(str)
</span><span class='line'>True
</span><span class='line'>&gt;&gt;&gt; is_callable(4)
</span><span class='line'>False
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Source Code:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```
</span><span class='line'>def is_callable(obj):&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;try:
</span><span class='line'>    obj.&lt;strong&gt;call&lt;/strong&gt;
</span><span class='line'>    # hasattr(str, ‘&lt;strong&gt;call&lt;/strong&gt;’)
</span><span class='line'>    # getattr(str, ‘&lt;strong&gt;call&lt;/strong&gt;’)
</span><span class='line'>    except AttributeError:
</span><span class='line'>    	return False
</span><span class='line'>    else:
</span><span class='line'>    	return True</span></code></pre></td></tr></table></div></figure></p>

<h2 id="example-2-class-easydict">Example 2: Class EasyDict</h2>

<p>Make an <code>EasyDict</code> class that can be used with both attribute and item syntax.</p>

<p>Example:</p>

<p>```
»&gt; a = EasyDict()
»&gt; a[‘shoe’] = “blue”
»&gt; a.shoe
“blue”</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>a[‘shoe’]
“blue”</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>a.car = “green”
a[‘car’]
“green”
```</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>Source Code:</p>

<p>```
class EasyDict:
    def <strong>init</strong>(self):
        pass</p>

   	def <strong>getitem</strong>(self, item):
<pre><code>    return self.__dict__[item]

def __setitem__(self, key, value):
    self.__dict__[key] = value
</code></pre>

<p>```</p>

]]></content>
  </entry>
  
</feed>
