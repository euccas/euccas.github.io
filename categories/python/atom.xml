<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | euccas.github.io]]></title>
  <link href="http://euccas.github.io/categories/python/atom.xml" rel="self"/>
  <link href="http://euccas.github.io/"/>
  <updated>2016-12-31T22:06:03-08:00</updated>
  <id>http://euccas.github.io/</id>
  <author>
    <name><![CDATA[euccas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Multiprocessing]]></title>
    <link href="http://euccas.github.io/20161231/python-multiprocessing.html"/>
    <updated>2016-12-31T09:37:01-08:00</updated>
    <id>http://euccas.github.io/20161231/python-multiprocessing</id>
    <content type="html"><![CDATA[<p>Python’s GIL (Global Interpreter Lock) was designed as a thread-safe mechanism, and it simply prevents conflicts between multiple threads. The existence of GIL makes implementing multi-threading with Python easier. GIL, however, also prevents Python multi-threading from utilizing the multiple cores of a computer to achieve improved execution speed.</p>

<p>The good thing is Python provides a <a href="https://docs.python.org/3.4/library/multiprocessing.html"><code>multiprocessing</code> module</a> since Python 2.6. With the <code>multiprocessing</code> module we can spawn subprocesses and effectively avoid some of the limitations that GIL brings, on both Unix and Windows platforms.</p>

<p>In this post I’ll briefly introduce <code>multiprocess</code> module and show how it can be used for parallel programming.</p>

<h1 id="a-simple-example-of-multiprocessing">A simple example of <em>multiprocessing</em></h1>

<p>In the following example, we use <code>multiprocessing</code> module to spawn a child process from a parent process using a <code>Process</code> object.</p>

<p>```
from multiprocessing import Process
import os
import time</p>

<p>def task(name):
    print(“Starting child process with id: “.format(os.getpid()))
    print(“Parent process: “.format(os.getppid()))
    print(“Task start: just sleeps 5 seconds …”)
    time.sleep(5)
    print(“Task done”)</p>

<p>if <strong>name</strong> == “<strong>main</strong>”:
    print(“In parent process, id: “.format(os.getpid())
    p = Process(target=task, args=(‘firstone’))
    p.start()
    print(“In parent process, after child process start”)
    print(“parent process about to join child process”)
    p.join()
    print(“In parent process, after child process join”)
    print(“parent process exiting with id “.format(os.getpid()))
    print(“the parent’s parent process: “.format(os.getppid()))</p>

<p>```</p>

<p>The output of this program will be:</p>

<p><code>
In parent process, id 5245
In parent process, after child process start
parent process about to join child process
Starting child process with id: 5246
Parent process: 5245
Task start: just sleeps 5 seconds ...
Task done
In parent process, after child process join
parent process exiting with id 5245
the parent's parent process: 5231
</code></p>

<p>The program starts the subprocess using <code>p.start()</code></p>

<h1 id="three-ways-to-start-a-process">Three ways to start a process</h1>

<p>Depending on the platform, ```multiprocessing` supports three ways to start a process.</p>

<ul>
  <li>spawn</li>
</ul>

<p>Available on both Unix and Windows. The default on Windows. The parent process starts a fresh python interpreter process. Slower comparing with <code>fork</code> or <code>forkserver</code>.</p>

<ul>
  <li>fork</li>
</ul>

<p>Parent process uses <code>os.fork()</code> to fork the Python interpreter. The child process is identical to the parent process, with inheritating all resources of the parent process. Available on Unix only. The default of Unix.</p>

<ul>
  <li>forkserver</li>
</ul>

<p>Starts a server process. Whenever a new process is needed, the parent process connects to the server and requests that it fork a new process. Available on Unix.</p>

<p>To select a start method, you can use <code>set_start_method()</code>. This method should be used only once in the program.</p>

<p><code>
mp.set_start_method('spawn')
p = mp.Process(target=foo, args=())
p.start()
p.join()
</code></p>

<h1 id="two-ways-to-exchange-objects-between-processes">Two ways to exchange objects between processes</h1>

<p>Two types of communication channel between processes are supported in ```multiprocessing`*[]:</p>

<ul>
  <li>class Queue</li>
  <li>function Pipe()</li>
</ul>

<h1 id="use-a-pool-of-workers">Use a pool of workers</h1>

<p>The <code>Pool</code> class is a quite useful one in the <code>multiprocessing</code> module, as in real life you’ll often need multiple workers to execute the tasks in your program in parallel. What the <code>Pool</code> class represents is a pool of workers. The following example shows how to create a pool with 4 processes as workers, and assign tasks to the workers.</p>

<p>```
from multiprocessing import Pool
from time import sleep</p>

<p>def f(x):
    return x*x</p>

<p>if <strong>name</strong> == “<strong>main</strong>”:
    # start 4 worker processes
    with Pool(processes=4) as pool:
        res = pool.apply_async(f, [10])
        print(res.get(timeout=1))</p>

<pre><code>pool.close()
pool.join()
</code></pre>

<p>```</p>

<p>The <code>apply_async(f, args, kwargs)</code> method calls a function for many times, or calls a number of different functions asynchronously with arguments arguments. Each process will NOT block other processes. The order of the multiple processes are not guaranteed.</p>

<p>The <code>close()</code> prevents any more tasks from being submitted to the pool. Once all the tasks have been completed, the worker process will exit.</p>

<p>The <code>join()</code> method waits for the worker processes to exit. It is required to call <code>close()</code> or <code>terminate()</code> before using <code>join()</code> method.</p>

<p>Both <code>close()</code> and <code>terminate()</code> will stop all the worker processes. The difference is <code>close()</code> will wait for worker process to finish, and <code>terminate()</code> immediately shut down worker processes without completing outstanding work.</p>

<p>Another useful method provided by <code>multiprocessing` module is</code>cpu_count()```, which returns the number of CPUs in the current system. You can use this value to decide how many processes to create in a pool.</p>

<p><em>End of 2016</em></p>

<p>This post is my last post in 2016. Happy new year!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Generators]]></title>
    <link href="http://euccas.github.io/20161223/python-generators.html"/>
    <updated>2016-12-23T08:48:45-08:00</updated>
    <id>http://euccas.github.io/20161223/python-generators</id>
    <content type="html"><![CDATA[<p>Generators is a powerful weapon of Python. Generators help you write concise code, give you lazy evaluation, and improve the efficience for calculating large sets of results. Personally I think it’s a good habit to use generators in Python whenever you can, if you really want your code to be Pythonic.</p>

<h1 id="how-to-create-a-generator">How to create a generator</h1>

<p>There are mainly two ways to create a generator: using the <code>yield</code> keyword in the function, or using the <code>()</code> as a generator expression.</p>

<ul>
  <li>The <code>yield</code> keyword makes the function yields control back to the calling function on every iteration</li>
  <li>The <code>()</code> expression returns a generator object</li>
</ul>

<h1 id="how-to-refactor-a-function-to-use-a-generator">How to refactor a function to use a generator</h1>

<p>Functions that construct a list or another iterable and returns it can be turned into a generator by:</p>

<ol>
  <li>Converting the list append into a <code>yield</code></li>
  <li>Removing the empty list creation</li>
  <li>Removing the return</li>
</ol>

<h1 id="a-generator-example">A generator example</h1>
<p>Let’s see an example: implement a function that takes a list and return a list of the current running mean. For example, given the input list <code>[8, 4, 3, 1, 3, 5]</code>, the expected return result is <code>[8.0, 6.0, 5.0, 4.0, 3.8, 4.0]</code>.</p>

<p>First we’ll implement it without using generators.</p>

<p>```
def running_mean(numbers):
	average = []
	sum = 0
	for i, num in enumerate(numbers):
		sum += num
		average.append(sum/(i*1.0))
	return average</p>

<p>numbers = [8, 4, 3, 1, 3, 5]
print(running_mean(numbers))</p>

<p>```</p>

<p>Now we can refactor the above implementation to use a generator:</p>

<p>```
def running_mean(numbers):
	sum = 0
	for i, num = enumerate(numbers):
		sum += num
		yield sum/((i+1)*1.0)</p>

<p>numbers = [8,4,3,1,3,5]
print(list(running_mean(numbers)))</p>

<p>```</p>

<p>What we did in the refactoring was: replacing the list appending with a yield (<code>average.append()</code>), removing the empty list creation (<code>average = []</code>), and replacing the return statement with a yield statement.</p>

<p>One important property of Python generator object is it is a single-use object. In other words, a generator keeps yielding answers forever. The looping in a generator only ends when the calling function decides to end it. Meanwhile a generator can only be called once.</p>

<p>A few other generator examples can be found on my <a href="https://github.com/euccas/IntermediatePython/tree/master/iteration/generator">GitHub repo <em>IntermediatePython</em></a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Additional Packages in WinPython]]></title>
    <link href="http://euccas.github.io/20161011/install-additional-packages-in-winpython.html"/>
    <updated>2016-10-11T17:11:51-07:00</updated>
    <id>http://euccas.github.io/20161011/install-additional-packages-in-winpython</id>
    <content type="html"><![CDATA[<p>For people who need use portable Python on Windows, <a href="https://winpython.github.io/">WinPython</a> is a good choice. WinPython is a free open-source portable distribution of Python. The project is hosted on <a href="https://github.com/winpython">github</a>. It is also a good alternative to <a href="http://portablepython.com/">Portable Python</a>, which is not being developed anymore.</p>

<p>In this post I’ll show you how could you install additional packages to WinPython.</p>

<h1 id="install-winpython">Install WinPython</h1>

<p>WinPython is portable. It means that you can download WinPython from the <a href="http://winpython.sourceforge.net/">WinPython download page</a>, add it to your system PATH, and start using it without any installation.</p>

<ul>
  <li>Unzip the downloaded WinPython Package to a local directory, eg. <code>C:\WinPython</code>.</li>
  <li>Add the local directory path to your system’s <code>PATH</code> variable. You can use Windows command <code>set</code> or <code>setx</code>.</li>
</ul>

<p><code>
   set PATH=C:\WinPython\;%PATH%
</code></p>

<p>Now you can open a Windows cmd prompt, and test your installed python version.</p>

<p><code>
    where python
	&gt;&gt;&gt; C:\WinPython\python.exe
</code></p>

<h1 id="install-a-package">Install a package</h1>

<p>You can install a Python Package to WinPython using <code>pip</code>. If you have other versions of Python installed on your computer, you’ll need make sure the <code>pip</code> you use actually is the one WinPython provides.</p>

<p>Where is the <code>pip</code>?</p>

<p>It’s in the <code>Scripts</code> directory of the WinPython path.
For example:</p>

<p><code>
C:\WinPython\Scripts
</code></p>

<p>Now you can use the WinPython <code>pip</code> to install additional Python packages.</p>

<p>```</p>
<WinPython Path="">\Scripts\pip install <package name="">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>If the installation successfully done, you will find the installed packages in WinPython's library path.
</span></code></pre></td></tr></table></div></figure>
<WinPython Path="">\Lib\site-packages\<package name="">
```

That's it! Your Python package is ready to use!









</package></WinPython></package></WinPython>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dunder Methods in Python]]></title>
    <link href="http://euccas.github.io/20160920/python-dunder-methods.html"/>
    <updated>2016-09-20T21:28:51-07:00</updated>
    <id>http://euccas.github.io/20160920/python-dunder-methods</id>
    <content type="html"><![CDATA[<p>In Python, we sometimes see method names with <code>__</code> around, such as the <code>__init__</code> method that every Class has. These methods are “dunder” methods (“dunder” stands for “double under” or “double underscore”). Dunder methods in Python are used for operator overloading and customizing behavior of other functions.</p>

<p>Sometimes dunder methods are also called “magic methods” because they are usually called by Python under the hood. But they are not really magical, you can define dunder methods to customize the behavior of your own classes.</p>

<h1 id="examples-of-dunder-methods">Examples of Dunder Methods</h1>

<p>In the following example, we can see three dunder methods:</p>

<ul>
  <li><code>__init__</code> method: is called to initialize the class</li>
  <li><code>__str__</code> method: is called when converting the object to a human-readable string</li>
  <li><code>__repr__</code> method: is called when converting the object to a developer-readable string</li>
</ul>

<p>```
    class Flower:
	    def <strong>init</strong>(self, color=’red’):
		    self.color = color</p>

<pre><code>	def __str__(self):
		return "Flower in color {color}".format(color=self.color)

	def __repr__(self):
	return "Flower(color={})".format(self.color) ```
</code></pre>

<p>In Python, many dunder methods are implemented and used for operations such as arithmetic operators, comparison operators, truthiness, etc. The following are a few examples:</p>

<p><strong>Arithmetic Operators</strong></p>

<ul>
  <li><code>+</code> : <code>__add__</code></li>
  <li><code>-</code> : <code>__sub__</code></li>
  <li><code>*</code> : <code>__mul__</code></li>
  <li><code>/</code> : <code>__div__</code></li>
</ul>

<p><strong>Comparison Operators</strong></p>

<ul>
  <li><code>x &lt; y</code> : <code>x.__lt__(y)</code></li>
  <li><code>x &lt;= y</code> : <code>x.__le__(y)</code></li>
  <li><code>x &gt; y</code> : <code>x.__gt__(y)</code></li>
  <li><code>x &gt;= y</code> : <code>x.__ge__(y)</code></li>
  <li><code>x == y</code> : <code>x.__eq__(y)</code></li>
  <li><code>x != y</code> : <code>x.__ge__(y)</code></li>
</ul>

<p>If you know about Bash shell, you may notice the name of these dunder methods are very similar to the operators in Bash.</p>

<p><strong>Truthiness</strong></p>

<ul>
  <li><code>bool(x)</code> : <code>x.__bool__()</code></li>
</ul>

<h1 id="use-dunder-methods-to-customize-class-behaviors">Use Dunder Methods to Customize Class Behaviors</h1>

<p>Dunder methods provide a way for our class to customize operators and other built-in Python behavior for our objects. In the following two examples, I’ll use dunder methods to overload arithmetic operators, and implement a dictionary that can be used with both attribute and item syntax.</p>

<h2 id="example-1-overload-arithmetic-operators">Example 1: Overload Arithmetic Operators</h2>

<p>Make an <code>is_callable</code> function to check if an object type is callable.</p>

<p>Example:</p>

<p><code>
    &gt;&gt;&gt; is_callable(sorted)
    True
    &gt;&gt;&gt; is_callable(str)
    True
    &gt;&gt;&gt; is_callable(4)
    False
</code></p>

<p>Source Code:</p>

<p>```
    def is_callable(obj):</p>

<pre><code>try:
	obj.__call__
	# hasattr(str, '__call__')
	# getattr(str, '__call__')
except AttributeError:
	return False
else:
	return True ```
</code></pre>

<h2 id="example-2-class-easydict">Example 2: Class EasyDict</h2>

<p>Make an <code>EasyDict</code> class that can be used with both attribute and item syntax.</p>

<p>Example:</p>

<p><code>
	&gt;&gt;&gt; a = EasyDict()
	&gt;&gt;&gt; a['shoe'] = "blue"
	&gt;&gt;&gt; a.shoe
	"blue"
	&gt;&gt;&gt; a['shoe']
	"blue"
	&gt;&gt;&gt; a.car = "green"
	&gt;&gt;&gt; a['car']
	"green"
</code></p>

<p>Source Code:</p>

<p>```
	class EasyDict:
    	def <strong>init</strong>(self):
        	pass</p>

   		def <strong>getitem</strong>(self, item):
<pre><code>    	return self.__dict__[item]

	def __setitem__(self, key, value):
    	self.__dict__[key] = value
</code></pre>

<p>```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Unittest: Handle the Command Line Arguments]]></title>
    <link href="http://euccas.github.io/20160807/python-unittest-handle-command-line-arguments.html"/>
    <updated>2016-08-07T11:57:32-07:00</updated>
    <id>http://euccas.github.io/20160807/python-unittest-handle-command-line-arguments</id>
    <content type="html"><![CDATA[<p>In the previous post about <a href="http://euccas.github.io/blog/20160711/start-unit-testing-in-python.html">Python Unittest</a>, I wrote about the basic steps needed for setting up unit testing for your Python program with the <code>unittest</code> module. In this post, I’ll discuss about handling the command line parameters that your program need while you’re using Python <code>unittest</code>.</p>

<p>Unit testing is meant for testing basic functionality of the application. The target of <a href="https://en.wikipedia.org/wiki/Unit_testing">Unit testing</a> is expected to be each function of your program. When your program has command line arguments, ideally the unit tests should not accept arguments from the command line because unit tests are supposed to be very specific and not testing on the <a href="https://en.wikipedia.org/wiki/Integration_testing">Integration level</a> (i.e. across multiple functions in your program).</p>

<p>So the way I use to handle the command line arguments can be summarized as:</p>

<ul>
  <li>Refactor your program to have the arguments parsing as a function</li>
  <li>Refactor your program to handle the arguments parsing differently when doing unit testing</li>
  <li>In the unit tests, set the arguments and pass them directly to the functions under test</li>
</ul>

<p>The following is a demo Python project I built to demonstrate handling command line arguments when using <code>unittest</code>.</p>

<h2 id="myapppy">myapp.py</h2>

<pre><code>#!/usr/bin/env python

import sys, os.path, re
import argparse

class myApp():

    EXIT_PASS, EXIT_FAIL = 0, 1

    def __init__(self, mode = 'normal', test_param = None):
        # Validate and process argument options
        self.parse_args(mode, test_param)
        # Initialize database connection
        self.app_name = self.get_app_name(self.name)

    def parse_args(self, mode, test_param):
        if mode == 'unittest':
            if test_param is None:
                print("Missing test param")
                self.app_exit('fail')

            self.name = test_param['app_name']
            self.verbose = test_param['verbose']
        else:
            parser = argparse.ArgumentParser(description='myApp: A demo project')
            parser.add_argument('-n', '--name', help='Name of myApp', required=True)
            parser.add_argument('--verbose', action='store_true', help='Verbose mode with more information printed')

            args = parser.parse_args()

            self.name = args.name
            self.verbose = args.verbose

    def app_exit(self, status):
        if status.lower() == 'pass':
            print("** App Exit Status: PASS \n")
            exit(self.EXIT_PASS)
        elif status.lower() == 'skip':
            print("** App Exit Status: SKIP \n")
            exit(self.EXIT_PASS)
        else:
            print("** App Exit Status: FAIL \n")
            exit(self.EXIT_FAIL)

    def get_app_name(self):
        app_name = self.name

        return app_name

if __name__ == '__main__':
    app = myApp()
</code></pre>

<h2 id="testmyapppy">test_myapp.py</h2>

<pre><code>#!/usr/bin/env python

import sys, os.path, re
import argparse
import unittest

bin_path = os.path.dirname(os.path.realpath(__file__))
lib_path = os.path.abspath(bin_path)
sys.path.insert(0, lib_path)

import myApp

class myAppTestCase(unittest.TestCase):

    def setUp(self):
        mode = 'unittest'
        test_param = {
            'name': 'Test App',
            'verbose': True
        }
        self.app = myapp.myApp(mode, test_param)

    def test_app_name(self):
        self.assertEqual(self.app.get_app_name, 'Test App', 'Wrong App Name')

    def tearDown(self):
        print('Bye Test')

if __name__ == '__main__':
    unittest.main()
</code></pre>

]]></content>
  </entry>
  
</feed>
