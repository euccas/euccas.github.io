<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[euccas.github.io]]></title>
  <link href="http://euccas.github.io/atom.xml" rel="self"/>
  <link href="http://euccas.github.io/"/>
  <updated>2016-09-29T00:13:35-07:00</updated>
  <id>http://euccas.github.io/</id>
  <author>
    <name><![CDATA[euccas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GTAC: The Uber Challenge of Cross-Application Testing]]></title>
    <link href="http://euccas.github.io/blog/20160928/the-uber-challenge-of-cross-application-testinng.html"/>
    <updated>2016-09-28T23:17:30-07:00</updated>
    <id>http://euccas.github.io/blog/20160928/the-uber-challenge-of-cross-application-testinng</id>
    <content type="html"><![CDATA[<p>Inspired by Matt Cutts’ TED talk: <a href="https://www.ted.com/talks/matt_cutts_try_something_new_for_30_days?language=en">Try something new for 30 days</a>, I’m starting a 30-day-GTAC-revisit project. Google’s Test Automation Conference <a href="https://developers.google.com/google-test-automation-conference/">GTAC</a> is an annual test automation conference which brings together engineers from industry and academia to discuss advances in test automation and related engineering tools. In my 30-day-GTAC-revisit project, I’ll review the topics presented on GTAC. My goal of the 30-day-GTAC-revisit project is having a better and deeper understanding in modern testing technologies, methodologies, strategies, and practices.</p>

<p>Get it started! Day#1 topic is:</p>

<p><strong>The Uber Challenge of Cross-Application/Cross-Device Testing</strong></p>

<ul>
  <li>Presenter: Apple Chow (Uber), Bian Jiang (Uber)</li>
  <li><a href="https://www.youtube.com/watch?v=p6gsssppeT0&amp;list=PLSIUOFhnxEiCWGsN9t5A-XOhRbmz54IS1&amp;index=3">Video</a></li>
  <li><a href="https://docs.google.com/presentation/d/1vYXhkvgLKun72Ix91LQDDWZQdcY5VOBqKVvI1Y6riYo/pub">Slides</a></li>
</ul>

<p><strong>My takeaways</strong></p>

<ul>
  <li>The challenge: End-to-end tests require cross application communication (between rider app and driver app)</li>
  <li>Uber’s solution: Octopus
    <ul>
      <li>Octopus coordinates communication across different apps running on different devices</li>
      <li>This solution can be adopted for any tests that require coordination/communication across different apps or devices</li>
    </ul>
  </li>
  <li>What makes testing Uber’s mobile apps significantly different from testing Google Maps?</li>
  <li>Why (built) Octopus? Unified (iOS and Android). Extensible (Integrate with different UI testing frameworks). Parallelized. Signaling (enabling cross-app and cross-device testing).</li>
  <li>What does Octopus do? Prepare test targets. Run tests (handles signaling). Create test results reports. Pull test artifacts. Perform clean ups. All from simple command line.</li>
  <li>Signaling between driver test and rider test: Conducted with Test Host to improve the consistency. API readSignal (blocking), writeSignal (nonblocking). Test hosts and test targets are connected via USB (reliable).</li>
  <li>Apple Chow wrote about Octopus on <a href="http://eng.uber.com/rescued-by-octopus/">Uber Engineering</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dunder Methods in Python]]></title>
    <link href="http://euccas.github.io/blog/20160920/python-dunder-methods.html"/>
    <updated>2016-09-20T21:28:51-07:00</updated>
    <id>http://euccas.github.io/blog/20160920/python-dunder-methods</id>
    <content type="html"><![CDATA[<p>In Python, we sometimes see method names with <code>__</code> around, such as the <code>__init__</code> method that every Class has. These methods are “dunder” methods (“dunder” stands for “double under” or “double underscore”). Dunder methods in Python are used for operator overloading and customizing behavior of other functions.</p>

<p>Sometimes dunder methods are also called “magic methods” because they are usually called by Python under the hood. But they are not really magical, you can define dunder methods to customize the behavior of your own classes.</p>

<h1 id="examples-of-dunder-methods">Examples of Dunder Methods</h1>

<p>In the following example, we can see three dunder methods:</p>

<ul>
  <li><code>__init__</code> method: is called to initialize the class</li>
  <li><code>__str__</code> method: is called when converting the object to a human-readable string</li>
  <li><code>__repr__</code> method: is called when converting the object to a developer-readable string</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Flower:
</span><span class="line">    def __init__(self, color='red'):
</span><span class="line">	    self.color = color
</span><span class="line">
</span><span class="line">	def __str__(self):
</span><span class="line">		return "Flower in color {color}".format(color=self.color)
</span><span class="line">
</span><span class="line">	def __repr__(self):
</span><span class="line">	return "Flower(color={})".format(self.color)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In Python, many dunder methods are implemented and used for operations such as arithmetic operators, comparison operators, truthiness, etc. The following are a few examples:</p>

<p><strong>Arithmetic Operators</strong></p>

<ul>
  <li><code>+</code> : <code>__add__</code></li>
  <li><code>-</code> : <code>__sub__</code></li>
  <li><code>*</code> : <code>__mul__</code></li>
  <li><code>/</code> : <code>__div__</code></li>
</ul>

<p><strong>Comparison Operators</strong></p>

<ul>
  <li><code>x &lt; y</code> : <code>x.__lt__(y)</code></li>
  <li><code>x &lt;= y</code> : <code>x.__le__(y)</code></li>
  <li><code>x &gt; y</code> : <code>x.__gt__(y)</code></li>
  <li><code>x &gt;= y</code> : <code>x.__ge__(y)</code></li>
  <li><code>x == y</code> : <code>x.__eq__(y)</code></li>
  <li><code>x != y</code> : <code>x.__ge__(y)</code></li>
</ul>

<p>If you know about Bash shell, you may notice the name of these dunder methods are very similar to the operators in Bash.</p>

<p><strong>Truthiness</strong></p>

<ul>
  <li><code>bool(x)</code> : <code>x.__bool__()</code></li>
</ul>

<h1 id="use-dunder-methods-to-customize-class-behaviors">Use Dunder Methods to Customize Class Behaviors</h1>

<p>Dunder methods provide a way for our class to customize operators and other built-in Python behavior for our objects. In the following two examples, I’ll use dunder methods to overload arithmetic operators, and implement a dictionary that can be used with both attribute and item syntax.</p>

<h2 id="example-1-overload-arithmetic-operators">Example 1: Overload Arithmetic Operators</h2>

<p>Make an <code>is_callable</code> function to check if an object type is callable.</p>

<p>Example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt;&gt;&gt; is_callable(sorted)
</span><span class="line">True
</span><span class="line">&gt;&gt;&gt; is_callable(str)
</span><span class="line">True
</span><span class="line">&gt;&gt;&gt; is_callable(4)
</span><span class="line">False</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Source Code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def is_callable(obj):
</span><span class="line">
</span><span class="line">try:
</span><span class="line">	obj.__call__
</span><span class="line">	# hasattr(str, '__call__')
</span><span class="line">	# getattr(str, '__call__')
</span><span class="line">except AttributeError:
</span><span class="line">	return False
</span><span class="line">else:
</span><span class="line">	return True</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="example-2-class-easydict">Example 2: Class EasyDict</h2>

<p>Make an <code>EasyDict</code> class that can be used with both attribute and item syntax.</p>

<p>Example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt;&gt;&gt; a = EasyDict()
</span><span class="line">&gt;&gt;&gt; a['shoe'] = "blue"
</span><span class="line">&gt;&gt;&gt; a.shoe
</span><span class="line">"blue"
</span><span class="line">&gt;&gt;&gt; a['shoe']
</span><span class="line">"blue"
</span><span class="line">&gt;&gt;&gt; a.car = "green"
</span><span class="line">&gt;&gt;&gt; a['car']
</span><span class="line">"green"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Source Code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class EasyDict:
</span><span class="line">	def __init__(self):
</span><span class="line">    	pass
</span><span class="line">
</span><span class="line">   		def __getitem__(self, item):
</span><span class="line">    	return self.__dict__[item]
</span><span class="line">
</span><span class="line">	def __setitem__(self, key, value):
</span><span class="line">    	self.__dict__[key] = value
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Case Study: Check on a Commit According to Its Included Files]]></title>
    <link href="http://euccas.github.io/blog/20160815/case-study-check-on-a-commit-according-to-the-included-files.html"/>
    <updated>2016-08-15T19:43:21-07:00</updated>
    <id>http://euccas.github.io/blog/20160815/case-study-check-on-a-commit-according-to-the-included-files</id>
    <content type="html"><![CDATA[<h1 id="problem-description">Problem Description</h1>

<p>Suppose one task in your Continuous Integration (CI) pipeline is triggered on every commit to the project repository. Some the files in the repository require passing the check of the CI task, while some other files do not require passing the check. What should the CI task do to decide if it is needed to perform the needed checking on the commit?</p>

<h1 id="design-the-ci-task">Design the CI task</h1>

<p>The CI task need have the ability to analyze the files included in the commit, and decide whether the commit requires passing a check, or not. We need tell the CI task which files require passing a check through configurations.</p>

<h2 id="configuration">Configuration</h2>

<p>There are multiple ways to design the configurations, such as:</p>

<ol>
  <li>
    <p>Only list the files or paths requiring the check</p>
  </li>
  <li>
    <p>Only list the files or paths do not require the check</p>
  </li>
  <li>
    <p>List the files or paths requiring the check, and also list the subset files or paths that do not require the check</p>
  </li>
</ol>

<p>The 3rd way probably is the optimal one because it provides the flexibility for you to put a large scope path as the files need check, and then exclude a subset from the large scope path. For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">check: my_project/dev/
</span><span class="line">
</span><span class="line">skip: my_project/dev/test/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To apply the 3rd method, the configuration of the CI task will include two types: inclusion, and exclusion.</p>

<h2 id="analyze-files-in-the-commit">Analyze files in the commit</h2>

<p>The needed analysis process of the CI task is:</p>

<ul>
  <li>
    <p>If none of the files in the commit matches the inclusion in configuration, skip the check</p>
  </li>
  <li>
    <p>If all the files in the commit matching the inclusion in configuration also matching the exclusion in configuration, skip the check</p>
  </li>
  <li>
    <p>In other cases, the check for this commit is needed</p>
  </li>
</ul>

<p>The complexity of the given process is <em>O(n<sup>2</sup>)</em>.</p>

<p>A mistake that could happen in the analysis process is when you analyze the exclusion cases, you should do the analysis only on the files that match inclusion configuration, which is a subset of files in the commit.</p>

<h1 id="example-with-the-python">Example with the Python</h1>

<p>Here is the code written in Python for demonstrating the case discussed above.</p>

<ul>
  <li>
    <p><code>commit_files</code>: a list containing all the files in the commit</p>
  </li>
  <li>
    <p><code>config</code>: a dictionary containing inclusion and exclusion configurations</p>
  </li>
  <li>
    <p><code>config['include']</code>: a list containing all the files or paths need check</p>
  </li>
  <li>
    <p><code>config['exclude']</code>: a list containing the files or paths do not need check</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">def analyze_commit_files(commit_files, config):
</span><span class="line">
</span><span class="line">    need_check = False    
</span><span class="line">
</span><span class="line">    
</span><span class="line">
</span><span class="line">    # commit need_check is False if:    
</span><span class="line">
</span><span class="line">    # - No files in this commit    
</span><span class="line">
</span><span class="line">    # - Config does not have any 'include' defined    
</span><span class="line">
</span><span class="line">    if commit_files is None or len(commit_files) == 0:
</span><span class="line">
</span><span class="line">        return need_check
</span><span class="line">
</span><span class="line">    if not 'include' in config or config['include'] is None or len(config['include']) == 0:
</span><span class="line">
</span><span class="line">        return need_check
</span><span class="line">
</span><span class="line">    # commit need_check is False if:    
</span><span class="line">
</span><span class="line">    # - All file in the commit matches the configured inclusion, OR    
</span><span class="line">
</span><span class="line">    # - All files in the commit that matches the inclusion, also match the configured exclusion    
</span><span class="line">
</span><span class="line">    # First check inclusion    
</span><span class="line">
</span><span class="line">    files_need_check = list()
</span><span class="line">
</span><span class="line">    for cf in commit_files:
</span><span class="line">
</span><span class="line">        for check_file in config['include']:            
</span><span class="line">
</span><span class="line">            if re.search(check_file, cf):                            
</span><span class="line">
</span><span class="line">                files_need_check.append(cf)
</span><span class="line">
</span><span class="line">    
</span><span class="line">
</span><span class="line">    if len(files_need_check) &gt; 0:
</span><span class="line">
</span><span class="line">        # Check skip_path
</span><span class="line">
</span><span class="line">        if not 'exclude' in config or config['exclude'] is None or len(config['exclude']) == 0:
</span><span class="line">
</span><span class="line">            need_check = True
</span><span class="line">
</span><span class="line">         else:
</span><span class="line">
</span><span class="line">             for cf in files_need_check:
</span><span class="line">
</span><span class="line">                 for skip_file in config['exclude']:                         
</span><span class="line">
</span><span class="line">                    if not re.search(skip_file, cf):                       
</span><span class="line">
</span><span class="line">                        need_check = True
</span><span class="line">
</span><span class="line">                        break
</span><span class="line">
</span><span class="line">    return need_check
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Unittest: Handle the Command Line Arguments]]></title>
    <link href="http://euccas.github.io/blog/20160807/python-unittest-handle-command-line-arguments.html"/>
    <updated>2016-08-07T11:57:32-07:00</updated>
    <id>http://euccas.github.io/blog/20160807/python-unittest-handle-command-line-arguments</id>
    <content type="html"><![CDATA[<p>In the previous post about <a href="http://euccas.github.io/blog/20160711/start-unit-testing-in-python.html">Python Unittest</a>, I wrote about the basic steps needed for setting up unit testing for your Python program with the <code>unittest</code> module. In this post, I’ll discuss about handling the command line parameters that your program need while you’re using Python <code>unittest</code>.</p>

<p>Unit testing is meant for testing basic functionality of the application. The target of <a href="https://en.wikipedia.org/wiki/Unit_testing">Unit testing</a> is expected to be each function of your program. When your program has command line arguments, ideally the unit tests should not accept arguments from the command line because unit tests are supposed to be very specific and not testing on the <a href="https://en.wikipedia.org/wiki/Integration_testing">Integration level</a> (i.e. across multiple functions in your program).</p>

<p>So the way I use to handle the command line arguments can be summarized as:</p>

<ul>
  <li>Refactor your program to have the arguments parsing as a function</li>
  <li>Refactor your program to handle the arguments parsing differently when doing unit testing</li>
  <li>In the unit tests, set the arguments and pass them directly to the functions under test</li>
</ul>

<p>The following is a demo Python project I built to demonstrate handling command line arguments when using <code>unittest</code>.</p>

<h2 id="myapppy">myapp.py</h2>

<pre><code>#!/usr/bin/env python

import sys, os.path, re
import argparse

class myApp():

    EXIT_PASS, EXIT_FAIL = 0, 1

    def __init__(self, mode = 'normal', test_param = None):
        # Validate and process argument options
        self.parse_args(mode, test_param)
        # Initialize database connection
        self.app_name = self.get_app_name(self.name)

    def parse_args(self, mode, test_param):
        if mode == 'unittest':
            if test_param is None:
                print("Missing test param")
                self.app_exit('fail')

            self.name = test_param['app_name']
            self.verbose = test_param['verbose']
        else:
            parser = argparse.ArgumentParser(description='myApp: A demo project')
            parser.add_argument('-n', '--name', help='Name of myApp', required=True)
            parser.add_argument('--verbose', action='store_true', help='Verbose mode with more information printed')

            args = parser.parse_args()

            self.name = args.name
            self.verbose = args.verbose

    def app_exit(self, status):
        if status.lower() == 'pass':
            print("** App Exit Status: PASS \n")
            exit(self.EXIT_PASS)
        elif status.lower() == 'skip':
            print("** App Exit Status: SKIP \n")
            exit(self.EXIT_PASS)
        else:
            print("** App Exit Status: FAIL \n")
            exit(self.EXIT_FAIL)

    def get_app_name(self):
        app_name = self.name

        return app_name

if __name__ == '__main__':
    app = myApp()
</code></pre>

<h2 id="testmyapppy">test_myapp.py</h2>

<pre><code>#!/usr/bin/env python

import sys, os.path, re
import argparse
import unittest

bin_path = os.path.dirname(os.path.realpath(__file__))
lib_path = os.path.abspath(bin_path)
sys.path.insert(0, lib_path)

import myApp

class myAppTestCase(unittest.TestCase):

    def setUp(self):
        mode = 'unittest'
        test_param = {
            'name': 'Test App',
            'verbose': True
        }
        self.app = myapp.myApp(mode, test_param)

    def test_app_name(self):
        self.assertEqual(self.app.get_app_name, 'Test App', 'Wrong App Name')

    def tearDown(self):
        print('Bye Test')

if __name__ == '__main__':
    unittest.main()
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Unit Testing in Python]]></title>
    <link href="http://euccas.github.io/blog/20160711/start-unit-testing-in-python.html"/>
    <updated>2016-07-11T22:58:39-07:00</updated>
    <id>http://euccas.github.io/blog/20160711/start-unit-testing-in-python</id>
    <content type="html"><![CDATA[<p>When is the best time to start unit testing in your Python project? My answer is before you writing the first line of code of this project. Unit testing is the fundamental of Test-driven development, which specifically improves the quality and design of your project.</p>

<p>In this post, I’m writing about how could you do unit testing in Python with the <code>unittest</code> module.</p>

<p>Python 2 (starting on version 2.1) and Python 3 now both have <code>unittest</code> in the standard library. The <code>unittest</code> module provides the unit testing framework, and it’s based on <code>JUnit</code>, which is a unit testing framework for Java.</p>

<h1 id="what-unittest-can-do">What unittest can do</h1>

<p>A few main features that <code>unittest</code> can do are:</p>

<ul>
  <li>Automatically run the tests (by <code>test runner</code>)</li>
  <li>Create test cases (by <code>test case</code>)</li>
  <li>Sharing of setup and shutdown code for tests (by <code>test fixture</code>)</li>
  <li>Aggrate tests into collections (by <code>test suite</code>)</li>
  <li>Independence of the tests from the reporting framework</li>
</ul>

<h1 id="how-does-unittest-work">How does unittest work</h1>

<p>Suppose I’m working on a project called <code>demo</code>, and it has a file structure as:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">demo
</span><span class="line">-- dev
</span><span class="line">   -- __init__.py
</span><span class="line">   -- demoDev.py</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note the <code>___init___.py</code> file can be empty. The purpose of having this file is for other files outside this directory can easily import the module <code>demoDev.py</code>.</p>

<p>To create unit tests for this project, I’ll need continue the following steps.</p>

<h2 id="create-the-test-file">1. Create the test file</h2>

<p>There is no particular required folder structure that you need to keep your test files. The way I usually do is separating the tests from the project source files. So, I create a <code>test</code> folder in the same level as <code>dev</code>. All my tests will be put into this folder. Now the project’s structure looks like:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">demo
</span><span class="line">-- dev
</span><span class="line">   -- __init__.py
</span><span class="line">   -- demoDev.py
</span><span class="line">-- test
</span><span class="line">   -- test_demoDev.py</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="use-unittest-module-in-your-project">2. Use unittest module in your project</h2>

<p>The test file need import the <code>unittest</code> module.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># This is test/test_demoDev.py
</span><span class="line">
</span><span class="line">import unittest</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="include-your-project-modules-in-the-test">3. Include your project modules in the test</h2>

<p>Surely you’ll need include the source files of the modules that you want to test in your test file. If your tests are in the same folder of your module sources, you can simply use <code>import SomeModule</code> to pull the modules in. When your tests stay out of the module sources, you’ll need do a little configurations in your test file.</p>

<p>I found the way to import your own modules to your tests can be different depending your development environment. For example, if you run your Python projects within some IDE, like <strong>PyCharm</strong> from JetBrains. The following way always work:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line"># This is test/test_demoDev.py
</span><span class="line">
</span><span class="line">from dev import demoDev
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However if you run through command line <code>python test/test_demoDev.py</code>, you might see errors complaining no module called <code>dev</code> and thus the import fails.</p>

<p>What you can do to resolve this problem, is adding the path of your Python modules to the <code>sys.path</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line"># This is test/test_demoDev.py
</span><span class="line">
</span><span class="line">import sys, os.path
</span><span class="line">
</span><span class="line">bin_path = os.path.dirname(os.path.realpath(__file__))
</span><span class="line">lib_path = os.path.abspath(os.path.join(bin_path, '..', 'dev'))
</span><span class="line">sys.path.insert(0, lib_path)
</span><span class="line"># or sys.path.append(lib_path)
</span><span class="line">
</span><span class="line">import demoDev
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="create-a-test-case">4. Create a test case</h2>

<p>A test case can be created with unittest <em>TestCase</em> class. The <code>setUp()</code> and <code>tearDown()</code> methods can be overridden to provide initialization and cleanup for the fixture. Each instance of the TestCase will only be used to run a single test method. Multiple test methods share the same text fixture, but the test fixture are created for each test method when they are executed.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line"># This is test/test_demoDev.py
</span><span class="line">
</span><span class="line">import sys
</span><span class="line">import unittest
</span><span class="line">
</span><span class="line">bin_path = os.path.dirname(os.path.realpath(__file__))
</span><span class="line">lib_path = os.path.abspath(os.path.join(bin_path, '..', 'dev'))
</span><span class="line">sys.path.insert(0, lib_path)
</span><span class="line">
</span><span class="line">from dev import demoDev
</span><span class="line">
</span><span class="line">class demoDevTestCase(unittest.TestCase):
</span><span class="line">
</span><span class="line">    def setUp(self):
</span><span class="line">        self.checker = eABTCheckerDev.eABTChecker()
</span><span class="line">
</span><span class="line">    def test_checker_app(self):
</span><span class="line">        self.assertEqual(self.demo.app, 'Demo App', 'Wrong app')
</span><span class="line">
</span><span class="line">    def tearDown(self):
</span><span class="line">        print('Bye Test')
</span><span class="line">
</span><span class="line">if __name__ == '__main__':
</span><span class="line">    unittest.main()
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>TestCase</code> class provides several assert methods to check for and report failures, such as <code>assertEqual</code>, <code>assertNotEqual</code>, <code>assertTrue</code>. <a href="https://docs.python.org/3.4/library/unittest.html#assert-methods">Here is the complete assert list that Python 3 provides.</a></p>

<h2 id="create-more-tests-and-a-test-suites">5. Create more tests and a test suites</h2>

<p><code>TestSuite</code> class represents an aggregation of individual test cases and test suites. The <code>addTest</code> and <code>addTests</code> methods are available to add tests to your TestSuite instances.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line"># This is test_demoDev.py
</span><span class="line">
</span><span class="line">def suite():
</span><span class="line">    suite = unittest.TestSuite();
</span><span class="line">    suite.addTest(demoDevTestCase('test_checker_app'))
</span><span class="line">    suite.addTest(demoDevTestCase('test_check_env'))
</span><span class="line">    
</span><span class="line">    return suite
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="run-your-unit-tests">6. Run your unit tests!</h1>

<p>The easiest way to run your unit tests is executing the <code>unittest.main()</code> method in the test file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line"># This is test_demoDev.py
</span><span class="line">
</span><span class="line">if __name__ == '__main__':
</span><span class="line">    unittest.main()
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then by running command <code>python test_demoDev.py</code>, the tests defined in <code>test_demoDev.py</code> will start running.</p>

<p>Unit tests can run from command line, because <code>unittest</code> module can be used from the command line to run tests from modules, classes or individual test methods.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">python -m unittest test_demoDev.test_checker_app
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You’ll see the testing result like:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">----------------------------------------------------------------------
</span><span class="line">Ran 1 test in 0.000s
</span><span class="line">
</span><span class="line">OK
</span><span class="line">Bye Test
</span><span class="line">
</span><span class="line">Process finished with exit code 0
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Behind the tests running, there is the <code>run</code> method provided by <code>TestCase</code> and <code>TestCaseSuite</code> classes. This <code>run</code> method implements the function of running the test, collecting the result into the <code>TestResult</code> object passed as result.</p>

<p>Here you go! Enjoy unit testing in Python!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake: Automake Your Tasks in Ruby]]></title>
    <link href="http://euccas.github.io/blog/20160614/rake-automake-your-tasks-in-ruby.html"/>
    <updated>2016-06-14T17:59:06-07:00</updated>
    <id>http://euccas.github.io/blog/20160614/rake-automake-your-tasks-in-ruby</id>
    <content type="html"><![CDATA[<p>Rake is the build language for Ruby programs, originally developed by <a href="http://onestepback.org/">Jim Weirich</a>. It’s a standard library in Ruby 2.1. You can define tasks with Rake: named code blocks that carry out specific actions, such as running unit tests, deploy your code to github, etc. In this post, I’ll write about the basics of Rake and how to use it to automate the tasks of your Ruby projects.</p>

<h1 id="rakefile">Rakefile</h1>

<p>In order to use Rake to define tasks, first you need a Rakefile. A Rakefile is a Ruby source file that has access to some special methods: <strong>task</strong>, <strong>file</strong>, <strong>directory</strong>, and a few others. A task defined in the Rakefile can be run by the command-line <code>rake</code> program, or be called as a dependency by other tasks. The name of Rakefile can be <code>Rakefile</code> or <code>rakefile</code>.</p>

<h1 id="write-descriptions-for-rake-tasks">Write Descriptions for Rake Tasks</h1>

<p>Writing a description to the defined tasks in Rakefile help you get more details about the task and know better what it does.</p>

<p>Example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">desc 'Upload documentation to server'
</span><span class="line">task 'upload-docs' =&gt; ['rdoc'] do
</span><span class="line">    sh "scp -r #{html_dir}/* " + "#{user}:#{server_path}"
</span><span class="line">end
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="namespaces">Namespaces</h1>

<p>Using namespaces is a good way to group similar tasks in Rakefile. You’ll need specify the namespace when calling a task inside it. One example as you can see from Rails is this command</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake db:migrate</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In this command, the <strong><em>db</em></strong> is the namespace, and the <strong><em>migrate</em></strong> is the task inside the namespace.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">namespace :cleanup do
</span><span class="line">    desc 'Clean up database'
</span><span class="line">    task  :dbs =&gt; :environment do
</span><span class="line">        Db.cleanup
</span><span class="line">    end
</span><span class="line">
</span><span class="line">    desc 'Clean up logs'
</span><span class="line">    task :logs =&gt; :environment do
</span><span class="line">        Log.cleanup
</span><span class="line">    end
</span><span class="line">
</span><span class="line">    task :all =&gt; [:dbs, :logs]
</span><span class="line">end
</span><span class="line">
</span><span class="line">desc 'Cleanup everything'
</span><span class="line">task :cleanup =&gt; "cleanup:all"
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="default-task">Default Task</h1>

<p>The default task is the one gets executed when you run rake without any arguments. You can set the default task in Rakefile by using the <code>:default</code> keyword.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">task :default =&gt; 'cleanup'</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">task :default =&gt; 'logs: cleanup'</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="multiple-tasks-running-in-parallel">Multiple Tasks Running in Parallel</h1>
<p>Rake’s <code>multitask</code> function supports running multiple tasks in parallel. The method is defining a task using the <code>multitask</code> function, and each of this task’s prerequisites will be run in a separate thread.</p>

<p>An example of multiple parallel tasks:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">task 'copy_docs' do
</span><span class="line">    # Simulate a large disk copy
</span><span class="line">    sleep 5
</span><span class="line">end
</span><span class="line">
</span><span class="line">task 'compile_extensions' do
</span><span class="line">    # Simulate a C compiler compiling a bunch of files
</span><span class="line">    sleep 10
</span><span class="line">end
</span><span class="line">
</span><span class="line">task 'build_serial' =&gt; ['copy_docs', 'compile_extensions]
</span><span class="line">multitask 'build_parallel' =&gt; ['copy_docs', 'compile_extensions']
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In this example, the <code>build_serial</code> task runs in about 15 seconds, but the <code>build_parallel</code> task runs in about 10 seconds.</p>

<h1 id="invoke-tasks">Invoke tasks</h1>

<p>Rake tasks can be invoked from other tasks using the <code>Rake::Task['&lt;your take&gt;'].invoke</code> method.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">task :cleanup do
</span><span class="line">    Rake::Task['logs: cleanup'].invoke
</span><span class="line">    puts "logs are cleaned!"
</span><span class="line">    Rake::Task['dbs: cleanup'].invoke
</span><span class="line">    puts "dbs are cleaned!"
</span><span class="line">end
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="view-all-the-rake-tasks">View all the Rake tasks</h1>

<p>To get an overview of all the defined Rake tasks, use <code>rake -T</code></p>

<h1 id="include-external-rakefiles">Include external rakefiles</h1>

<p>When your project need include the Rake tasks defined in external directories, you’ll need include the external rakefiles into your project. The way to do it is using the <code>import</code>. Note the <code>require</code> won’t work here, as it looks for the <code>.rb</code> files instead of the <code>.rake</code> files.</p>

<p>Include one rakefile:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import File.dirname(__FILE__)+"/../../task/common/rakefile"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Include multiple rakefiles in nested directories:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">Dir.glob("#{File.dirname(__FILE__)}/*").each do |d|
</span><span class="line">  next if !File.directory? d
</span><span class="line">  import d + "/rakefile" if File.file?(d + "/rakefile")
</span><span class="line">end
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="exit-from-rake-tasks">Exit from Rake tasks</h1>

<p>In a Ruby function, you can use <code>return</code> in the function when you want to exit (early). But in Rake tasks, the <code>return</code> is an invalid method to use, because each Rake task is actually a <code>Proc</code>. To exit early from a Rake task, you can use one of the following methods:</p>

<ul>
  <li>next</li>
</ul>

<p><strong><em>next</em></strong> will discard the following codes in the current rake task, and process the following part of the other tasks if there are any.</p>

<ul>
  <li>fail/raise</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">task :something do
</span><span class="line">  [1,2,3].each do |i|
</span><span class="line">    ...
</span><span class="line">    fail "some error" if ...
</span><span class="line">  end
</span><span class="line">end
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>exit</p>
  </li>
  <li>
    <p>abort</p>
  </li>
</ul>

<p>When <strong><em>abort</em></strong> is used in a rescue block, it terminates the task as well as prints the whole error (even without using –trace).</p>

<h1 id="reference">Reference</h1>

<ul>
  <li><a href="https://www.amazon.com/Ruby-Cookbook-Lucas-Carlson/dp/1449373712">Ruby Cookbook 2nd Edition (L. Carlson)</a></li>
  <li><a href="http://martinfowler.com/articles/rake.html">Using the Rake Build Language (Martin Fowler)</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: Get Data From PostgreSQL Database Without the Model]]></title>
    <link href="http://euccas.github.io/blog/20160610/rails-get-data-without-model.html"/>
    <updated>2016-06-10T18:32:01-07:00</updated>
    <id>http://euccas.github.io/blog/20160610/rails-get-data-without-model</id>
    <content type="html"><![CDATA[<p>In Ruby on Rails, Active Record is the M in MVC - the model. Model is the layer of the system which represents business data and logic. Active Record facilitates the creation and the use of business objects whose data requires persistent storage to a database. In some cases, however, you may want to use databases in Rails applications without the Model. What you can do is using the <code>pg</code> gem to directly manipulate the data you need.</p>

<h1 id="create-a-database-connection">Create a database connection</h1>

<p>If the database is not declared in Rails app’s <code>config/database.yml</code> file, you won’t be able to use the <code>establish_connection</code> method in ActiveRecord. But you can still use the <code>pg</code> gem to directly connect to the database.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># page_controller.rb
</span><span class="line">
</span><span class="line">conn = PGconn.connect('&lt;server&gt;', &lt;port&gt;, "", "", '&lt;database&gt;', "&lt;user&gt;", "&lt;password&gt;")
</span><span class="line">render :plain =&gt; "Oops, database currently not accessible" unless conn
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="query-data-with-raw-sql">Query data with RAW SQL</h1>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># page_controller.rb
</span><span class="line">
</span><span class="line">@page_records = []
</span><span class="line">result = conn.exec('SELECT * FROM &lt;table&gt; ORDER BY id DESC')
</span><span class="line">
</span><span class="line">@page_records = result
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The result is an array of Hash. For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[
</span><span class="line">  { "title" =&gt; "my page 1", "author" =&gt; "Tom", "created_at" =&gt; "2016-06-08" }
</span><span class="line">  { "title" =&gt; "my page 2", "author" =&gt; "Nancy", "created_at" =&gt; "2016-06-09" }
</span><span class="line">]</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="use-the-data-in-view">Use the data in View</h1>

<p>When using the queried data in Rails View, need to note you need use <code>record['title']</code> instead of <code>record.title</code>, which is different from using the data generated from a Rails Model.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># page.erb
</span><span class="line">
</span><span class="line">&lt;div&gt;
</span><span class="line">    &lt;% @page_records.each do |record| %&gt;
</span><span class="line">        &lt;p&gt; &lt;%= record['title'] %&gt; &lt;/p&gt;
</span><span class="line">        &lt;p&gt; &lt;%= record['author'] %&gt; &lt;/p&gt;
</span><span class="line">    &lt;% end %&gt;
</span><span class="line">&lt;/div&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="as-a-note-in-the-end">As a note in the end</h1>

<p>Although the above approach works in Rails, I’d say a more decent way to handle the need of getting data from multiple databases, is creating a crafted Model. The process will need:</p>

<ul>
  <li>Add the configurations of all your external databases in Rails app</li>
  <li>Create a Model file</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Pages &lt; ActiveRecord::Base
</span><span class="line">
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Use <code>establish_connection</code> in the Model</li>
  <li>When your table name doesn’t match Rails convention, set the table name with <code>self.table_name = '&lt;your table name&gt;'</code></li>
  <li>Create methods in the Model to fetch the data you need</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Class and Instance Methods]]></title>
    <link href="http://euccas.github.io/blog/20160607/ruby-class-and-instance-methods.html"/>
    <updated>2016-06-07T11:37:51-07:00</updated>
    <id>http://euccas.github.io/blog/20160607/ruby-class-and-instance-methods</id>
    <content type="html"><![CDATA[<p>If you ever get confused about Class Methods, Instance Methods, Class Variables and Instance Variables in Ruby, read this post and you’ll understand it better :)</p>

<h1 id="class-methods">Class Methods</h1>
<ul>
  <li>Class methods belong to a class in Ruby, and it can be used without instance any class object.</li>
  <li>The definition of class methods has a “self” prefix.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def self.show_name
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="instance-methods">Instance Methods</h1>
<ul>
  <li>Instance methods belong to any instance of a class in Ruby. To use instance methods, you always need to have an existing instance first. Usually this means you have called <code>new()</code> method.</li>
  <li>Instance methods do not have “self” prefix in their definition.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def show_name
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="class-variables">Class Variables</h1>
<ul>
  <li>Class variables belong to a class in Ruby. In other words, each class in Ruby automatically has an object even without any instances. The class variables are constants of the class object.</li>
  <li>Class variables are totally separated with instance variables (obvious though). The value of a class variable doesn’t change when the instance variables having the same name change.</li>
  <li>The name of a class variable has the “@@” prefix.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class myClass
</span><span class="line">    @@foo = 0
</span><span class="line">end  </span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="instance-variables">Instance Variables</h1>
<ul>
  <li>Instance variables belong to an instance of a class in Ruby.</li>
  <li>Different instances have their own set of instance variables.</li>
  <li>The name of an instance variable has the “@” prefix.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class myClass
</span><span class="line">    def initialize()
</span><span class="line">        @foo = 0
</span><span class="line">    end</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="a-quick-demo">A quick demo</h1>

<p>So now I have a quick demo to show more about the Class/Instance methods and variables.</p>

<p>In this demo, a Fruit class is created. The Fruit class has a <strong><em>class variable</em></strong> <code>@@color</code>, and the Fruit class instances have a <strong><em>instance variables</em></strong> <code>@color</code>.</p>

<p>Fruit class has a class method <code>self.show_color</code>, and an instance method with the same name <code>show_color</code>.</p>

<p>Now check out how these stuff works.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># fruit.rb
</span><span class="line">
</span><span class="line">class Fruit
</span><span class="line">    @@color = 'yellow' # class variable
</span><span class="line">
</span><span class="line">    def initialize()
</span><span class="line">        @name = 'apple'
</span><span class="line">        @color = 'red' # instance variable
</span><span class="line">    end
</span><span class="line">
</span><span class="line">    def self.show_color()
</span><span class="line">        puts "(class method) color: #{@@color}"
</span><span class="line">    end
</span><span class="line">
</span><span class="line">    def change()
</span><span class="line">        change_color()
</span><span class="line">        puts "try calling instance method"
</span><span class="line">        show_color()
</span><span class="line">        puts "try calling class method"
</span><span class="line">        self.show_color()
</span><span class="line">        puts "change done"
</span><span class="line">    end
</span><span class="line">
</span><span class="line">    def change_color()
</span><span class="line">        @color = 'green'
</span><span class="line">    end
</span><span class="line">
</span><span class="line">    def show_color()
</span><span class="line">        puts "(instance method) color: #{@color}"
</span><span class="line">    end
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The test file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># test.rb
</span><span class="line">
</span><span class="line">$LOAD_PATH.unshift(File.expand_path(File.dirname(__FILE__)))
</span><span class="line">require 'fruit.rb'
</span><span class="line">
</span><span class="line">myfruit = Fruit.new
</span><span class="line">myfruit.show_color
</span><span class="line">myfruit.change
</span><span class="line">
</span><span class="line">Fruit.show_color</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Executing the <code>test.rb</code> file will generate the following result:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(instance method) color: red
</span><span class="line">try calling instance method
</span><span class="line">(instance method) color: green
</span><span class="line">try calling class method
</span><span class="line">(instance method) color: green
</span><span class="line">change done
</span><span class="line">(class method) color: yellow</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="summary-of-the-demo">Summary of the demo</h2>

<ul>
  <li>
    <p><code>&lt;Class&gt;.new</code> instances an object by calling the <code>initialize</code> method. Instance variables are initialized</p>
  </li>
  <li>
    <p>Instance methods only calls the instance methods within itself, even use the <code>self</code> prefix.</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">show_color()
</span><span class="line">self.show_color()</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Both call the instance method, and shows the <code>color: green</code></p>

<ul>
  <li>
    <p>The change on instance variables doesn’t affect the class variables</p>
  </li>
  <li>
    <p>Class methods can be called without instances</p>
  </li>
</ul>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Fruit.show_color</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>Instance methods can’t be called without instances. The following statement will exceptions (NoMethodError).</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">myfruit = Fruit.new
</span><span class="line">myfruit.add
</span><span class="line">
</span><span class="line"># undefined method `add ... (NoMethodError)</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效Jenkins用户的第3个习惯]]></title>
    <link href="http://euccas.github.io/blog/20160523/jenkins-user-habits-3.html"/>
    <updated>2016-05-23T20:54:36-07:00</updated>
    <id>http://euccas.github.io/blog/20160523/jenkins-user-habits-3</id>
    <content type="html"><![CDATA[<p>本文内容部分来源于<strong>Andrew Bayer</strong>发布在SlideShare上的 <a href="http://www.slideshare.net/andrewbayer/seven-habits-of-highly-effective-jenkins-users-2014-edition"><em>7 habits of highly productive Jenkins Users (2014 Edition)</em></a>.</p>

<h1 id="jenkins">习惯 3: 让Jenkins任务自动化</h1>

<h2 id="script-console--scriptler-">1. Script Console 和 Scriptler 插件</h2>

<p>使用(Scriptler插件)[https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin]，保存和重用Groovy脚本</p>

<h2 id="scriptler">2. 一些Scriptler可以做的事情的例子</h2>

<ul>
  <li>通过匹配，控制一些job的开关 (enable, disable)</li>
  <li>清除build queue</li>
  <li>为所有的jobs设置log rotation/discard old builds等等配置参数：如果采用手工的方法，需要分别对每一个job进行配置，步骤繁琐</li>
  <li>对所有的jobs设置取消夜晚时间的SCM Polling: 这个功能其实就是批量设置jobs schedule</li>
  <li>对所有jobs执行log rotator</li>
</ul>

<p>这只是一些例子。可以看出，使用scriptler可以方便对job的配置进行批量操作</p>

<h2 id="system-groovy-build-steps">3. System Groovy build steps</h2>

<ul>
  <li>Groovy build steps 是在build中去执行system Groovy的脚本。需要注意的是，要保证Jenkins有权限执行build的全过程。</li>
  <li>利用Groovy build steps, 可以方便地做一些类似于plugin的功能，或者作为在开发一个plugin之前的测试</li>
  <li>通过Scriptler scripts, 可以在多个builds中重用系统脚本</li>
</ul>

<h2 id="jenkins-jobs">4. 自动生成Jenkins jobs</h2>

<ul>
  <li>使用Jenkins REST API 和 CLI，可以创建新的job或者改变已有的job</li>
  <li>可以使用DSL来定义job甚至包含多个job的workflow</li>
</ul>

<h2 id="dslplugin">5. 一些支持DSL的Plugin</h2>

<ul>
  <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Job+DSL+Plugin">Job DSL plugin</a></li>
  <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/DotCi+Plugin">DotCI plugin</a></li>
  <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Plugin">Workflow plugin (Pipeline plugin)</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Logging Easy in Ruby With Log4r]]></title>
    <link href="http://euccas.github.io/blog/20160518/make-logging-easy-in-ruby-with-log4r.html"/>
    <updated>2016-05-18T16:18:07-07:00</updated>
    <id>http://euccas.github.io/blog/20160518/make-logging-easy-in-ruby-with-log4r</id>
    <content type="html"><![CDATA[<p>Log4r is a Ruby gem that features a heirachical logging system of any number of levels, custom level names, multiple output destinations per log event, custom formatting, and more. The Log4r gem is open sourced on <a href="https://github.com/colbygk/log4r">GitHub</a>, and with comphrehensive documentations available on <a href="https://github.com/colbygk/log4r">Rubyforge</a>.</p>

<p>I have been using log4r at work in most of the applications and systems written in Ruby. It’s easy to use, and provide the features that an application would need:
- Support multiple message levels such as Fatal, Error, Warn and Msg.<br />
- Customizable log file format
- Multiple output destinations, like print out on the screen, and store in a log file</p>

<p>Here in this post, I’ll show you how to use log4r in your Ruby project.</p>

<h2 id="step-1-install-gem-log4r">Step 1. Install Gem log4r</h2>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem install log4r</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="step-2-include-log4r-in-your-project">Step 2: Include log4r in your project</h2>

<p>One thing to note is the log4r supports configurations through YAML file, and you can define the configuration file when including the log4r.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">require 'log4r'
</span><span class="line">require 'log4r/yamlconfigurator'
</span><span class="line">require 'log4r/outputter/datefileoutputter'
</span><span class="line">require 'log4r/outputter/emailoutputter'
</span><span class="line">include Log4r
</span><span class="line">ycfg = YamlConfigurator    # handy shorthand
</span><span class="line">ycfg.load_yaml_file(File.dirname(__FILE__)+'/l4r.yml')</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="step-3-configure-log4r-with-a-config-file">Step 3: Configure log4r with a config file</h2>

<p>You can define the logging levels, logger names, output destinations, etc. The following code shows an example of the configurations that I use.</p>

<p>File name: log4r.yml</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">description: config file for log4r
</span><span class="line">
</span><span class="line">---
</span><span class="line"># *** YAML2LOG4R ***
</span><span class="line">log4r_config:
</span><span class="line">  # define all pre config ...
</span><span class="line">  pre_config:
</span><span class="line">    global:
</span><span class="line">      level: DEBUG
</span><span class="line">    root  :
</span><span class="line">      level: DEBUG
</span><span class="line">
</span><span class="line">  # define all loggers ...
</span><span class="line">  loggers:
</span><span class="line">    - name      : myproject 
</span><span class="line">      level     : DEBUG
</span><span class="line">      additive  : 'false'
</span><span class="line">      trace     : 'false'
</span><span class="line">      outputters:
</span><span class="line">        - stderr
</span><span class="line">        - logfile
</span><span class="line">        - email
</span><span class="line">
</span><span class="line">
</span><span class="line">  # define all outputters (incl. formatters)
</span><span class="line">  outputters:
</span><span class="line">    - type     : StderrOutputter
</span><span class="line">      name     : stderr 
</span><span class="line">      level    : INFO
</span><span class="line">      formatter:
</span><span class="line">        date_pattern: #'%y%m%d %H:%M:%S'
</span><span class="line">        pattern     : '[%c] %l: %m'
</span><span class="line">        type        : PatternFormatter
</span><span class="line">
</span><span class="line">    - type        : DateFileOutputter
</span><span class="line">      name        : logfile
</span><span class="line">      level       : DEBUG
</span><span class="line">      date_pattern: #'%Y%m%d'
</span><span class="line">      trunc       : 'false'
</span><span class="line">      dirname     : "."
</span><span class="line">      formatter   :
</span><span class="line">        date_pattern: '%H:%M:%S'
</span><span class="line">        pattern     : '[%c] %d %l: %m'
</span><span class="line">        type        : PatternFormatter
</span><span class="line">  
</span><span class="line">    - type        : EmailOutputter
</span><span class="line">      name        : email
</span><span class="line">      level       : FATAL 
</span><span class="line">      server      : &lt;server domain&gt;
</span><span class="line">      subject     : 'Message myproject:'
</span><span class="line">      from        : &lt;email address&gt;
</span><span class="line">      to          : &lt;email address&gt;
</span><span class="line">      formatter   :
</span><span class="line">        date_pattern: #'%y%m%d %H:%M:%S'
</span><span class="line">        pattern     : '%d %l: %m'
</span><span class="line">        type        : PatternFormatter
</span><span class="line">---</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="step-4-initialize-a-logger">Step 4: Initialize a logger</h2>

<p>You need initialize a logger in your project first.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">logger = Log4r::Logger['myproject']</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="step-5-use-your-logger">Step 5: Use your logger</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">logger.info 'My Project Starts!'
</span><span class="line">logger.warn 'Here is a warning'
</span><span class="line">logger.error 'Here is an error'
</span><span class="line">logger.fatal 'Fatal error happens. Program will exit'</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Trello做项目管理初体验]]></title>
    <link href="http://euccas.github.io/blog/20160304/use-trello-for-managing-my-projects.html"/>
    <updated>2016-03-04T21:09:07-08:00</updated>
    <id>http://euccas.github.io/blog/20160304/use-trello-for-managing-my-projects</id>
    <content type="html"><![CDATA[<p>大概从18个月前开始，我开始习惯使用<a href="https://trello.com" target="_blank">Trello</a>作为project management and tracking的主要工具，也逐渐体会到Trello的特点和便利之处。总结起来，“不得不使用Trello”的理由有下面一些：</p>

<ul>
  <li>作为项目管理：无形之中的敏捷化</li>
  <li>作为问题记录：即使数目庞多的问题也能够清晰总览，便于分类，每一个问题同时可以有自己的详细记录</li>
  <li>自带的颜色标签和卡片aging效果非常方便呈现了项目总体和每一个task的状态</li>
  <li>一些插件提供了更强大的项目管理功能，比如burndown，甘特图等等</li>
  <li>最重要的特点也许是团队协同工作的便利：team members, assign task, comments</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效Jenkins用户的第2个习惯]]></title>
    <link href="http://euccas.github.io/blog/20151215/jenkins-user-habits-2.html"/>
    <updated>2015-12-15T20:15:38-08:00</updated>
    <id>http://euccas.github.io/blog/20151215/jenkins-user-habits-2</id>
    <content type="html"><![CDATA[<p>本文内容部分来源于<strong>Andrew Bayer</strong>发布在SlideShare上的 <a href="http://www.slideshare.net/andrewbayer/seven-habits-of-highly-effective-jenkins-users-2014-edition"><em>7 habits of highly productive Jenkins Users (2014 Edition)</em></a>.</p>

<h1 id="section">习惯 2: 大而化小</h1>

<h2 id="masters">1. 使用多个Masters</h2>

<p>在存在多个project与team的情况下，多个master可以使jenkins jobs的管理更加敏捷和可控</p>

<p>建议根据team, function, access(访问权限) 来划分master</p>

<p>多个master使安装和升级plugin时需要的重启过程变得容易——不需要重启的master不会受到影响</p>

<p>提高系统的稳定性：多个master, 每个master上分配较少数量的jobs，可以使整个系统更为稳定，减少遇到边界情况bug的几率</p>

<h2 id="jobs">2. 分解jobs</h2>

<p>建议在Jenkins中使用模块化和重用，这一点的好处类似于在编程中使用模块化和重用</p>

<p>多job的Build可以方便地在不同的project, release等等中重用</p>

<p>分解job可以避免长时间运行的job在最后阶段出错，导致整个job需要被重新运行：多job的Build可以实现从其中任何一个子job处重新执行</p>

<h2 id="jobs-1">3. 利用工具帮助分解jobs</h2>

<p>混合使用Parameterized trigger, Conditional Build Step, Copy Artifact, Promoted Builds：有效，但是配置困难</p>

<p>Build Pipeline plugin：可以把workflow可视化，集成手工步骤</p>

<p>Workflow plugin: 用DSL定义build steps之间的关系</p>

<p>Jenkins中有许多plugin和有关工具可以实现job分解</p>

<h3 id="jobjenkins-plugins">有关Job分解的Jenkins Plugins</h3>

<h4 id="build-pipeline-pluginhttpswikijenkins-ciorgdisplayjenkinsbuildpipelineplugin"><a href="https://wiki.jenkins-ci.org/display/JENKINS/Build+Pipeline+Plugin">Build Pipeline Plugin</a></h4>
<blockquote>
  <p>This plugin provides a Build Pipeline View of upstream and downstream connected jobs that typically form a build pipeline.  In addition, it offers the ability to define manual triggers for jobs that require intervention prior to execution, e.g. an approval process outside of Jenkins.</p>
</blockquote>

<h4 id="workflow-pluginhttpsgithubcomjenkinsciworkflow-pluginblobmasterreadmemdintroduction"><a href="https://github.com/jenkinsci/workflow-plugin/blob/master/README.md#introduction">Workflow plugin</a></h4>
<blockquote>
  <p>Building continuous delivery pipelines and similarly complex tasks in Jenkins using freestyle projects and traditional plugins can be awkward. You need to mix Parameterized Trigger, Copy Artifact, Promoted Builds, Conditional Build Step, and more just to express what should be a simple script. The Workflow plugin suite attempts to make it possible to directly write that script, what people often call a workflow (sometimes abbreviated flow), while integrating with Jenkins features like slaves and publishers.</p>
</blockquote>

<h4 id="parameterized-trigger-pluginhttpswikijenkins-ciorgdisplayjenkinsparameterizedtriggerplugin"><a href="https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Trigger+Plugin">Parameterized Trigger plugin</a></h4>
<blockquote>
  <p>This plugin lets you trigger new builds when your build has completed, with various ways of specifying parameters for the new build.
You can add multiple configurations: each has a list of projects to trigger, a condition for when to trigger them (based on the result of the current build), and a parameters section.</p>
</blockquote>

<h4 id="conditional-build-step-pluginhttpswikijenkins-ciorgdisplayjenkinsconditionalbuildstepplugin"><a href="https://wiki.jenkins-ci.org/display/JENKINS/Conditional+BuildStep+Plugin">Conditional Build Step plugin</a></h4>
<blockquote>
  <p>A buildstep wrapping any number of other buildsteps, controlling their execution based on a defined condition.</p>
</blockquote>

<h4 id="copy-artifact-pluginhttpswikijenkins-ciorgdisplayjenkinscopyartifactplugin"><a href="https://wiki.jenkins-ci.org/display/JENKINS/Copy+Artifact+Plugin">Copy Artifact plugin</a></h4>
<blockquote>
  <p>Adds a build step to copy artifacts from another project. The plugin lets you specify which build to copy artifacts from (e.g. the last successful/stable build, by build number, or by a build parameter). You can also control the copying process by filtering the files being copied, specifying a destination directory within the target project, etc. Click the help icon on each field to learn the details, such as selecting Maven or multiconfiguration projects or using build parameters. You can also copy from the workspace of the latest completed build of the source project, instead of its artifacts. All artifacts copied are automatically fingerprinted for you.</p>
</blockquote>

<h4 id="promoted-builds-pluginhttpswikijenkins-ciorgdisplayjenkinspromotedbuildsplugin"><a href="https://wiki.jenkins-ci.org/display/JENKINS/Promoted+Builds+Plugin">Promoted Builds plugin</a></h4>
<blockquote>
  <p>This plugin allows you to distinguish good builds from bad builds by introducing the notion of ‘promotion’.Put simply, a promoted build is a successful build that passed additional criteria (such as more comprehensive tests that are set up as downstream jobs.) The typical situation in which you use promotion is where you have multiple ‘test’ jobs hooked up as downstream jobs of a ‘build’ job. You’ll then configure the build job so that the build gets promoted when all the test jobs passed successfully. This allows you to keep the build job run fast (so that developers get faster feedback when a build fails), and you can still distinguish builds that are good from builds that compiled but had runtime problems.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效Jenkins用户的第1个习惯]]></title>
    <link href="http://euccas.github.io/blog/20151210/jenkins-user-habits-1.html"/>
    <updated>2015-12-10T19:32:57-08:00</updated>
    <id>http://euccas.github.io/blog/20151210/jenkins-user-habits-1</id>
    <content type="html"><![CDATA[<p>本文内容部分来源于<strong>Andrew Bayer</strong>发布在SlideShare上的 <a href="http://www.slideshare.net/andrewbayer/seven-habits-of-highly-effective-jenkins-users-2014-edition"><em>7 habits of highly productive Jenkins Users (2014 Edition)</em></a>.</p>

<h1 id="jenkins-master">习惯 1: 保持Jenkins Master的稳定与可恢复</h1>

<h2 id="lts-release">1. 使用LTS Release</h2>

<p>LTS release每12周发布一个新版本</p>

<p>LTS release版本发布都会保证通过自动化的acceptance testing和手工testing matrix</p>

<h2 id="plugins">2.不要急于升级plugins，保持谨慎</h2>

<p>plugin的升级可能包含非常多的变化</p>

<p>不是所有的升级都会保证向前兼容。比如最近Extended Email Plugin的升级，就造成之前的recipient/trigger配置不可用</p>

<p>新功能也许不稳定</p>

<h2 id="section">3. 对升级进行测试</h2>

<p>建议在测试环境中对升级和新的plugin进行测试，之后再进行production环境的升级</p>

<p>建立针对plugin功能的测试</p>

<p>在更大的规模进行测试</p>

<p>大的改变需要至少经过几天的测试</p>

<h2 id="jenkins-configuration">4. 备份Jenkins Configuration</h2>

<p>建议使用<a href="https://wiki.jenkins-ci.org/display/JENKINS/thinBackup">thinBackup plugin</a></p>

<p>可以通过对$JENKINS_HOME做整体备份实现有效的备份，缺点是速度慢和占用较多的存储空间</p>

<p>Jenkins支持仅仅备份config files，而不需要备份所有的builds。参考<a href="https://gist.github.com/abayer/527063a4519f205efc74">这个gist</a>中的代码实现这一功能。</p>

<h2 id="maven-job">5. 避免使用Maven job类型</h2>

<p>Maven plugin中的Mavin job type可能存在一些问题，包括plugin support, lazy loading等等</p>

<p>在大规模应用中可能会引起一些意外的问题，不建议使用</p>

<h2 id="section-1">一些解释</h2>

<h3 id="lts-release-1">什么是LTS Release?</h3>

<p>Jenkins LTS Release: Jenkins Long-Term Support release. 类似于Ubuntu的LTS版本。</p>

<p>具体说明<a href="https://wiki.jenkins-ci.org/display/JENKINS/LTS+Release+Line">在这里</a>。</p>

<h3 id="jenkins-maven-jobs">关于Jenkins Maven Jobs</h3>

<p>在Jenkins中可以通过两种方式build Maven project</p>

<ol>
  <li>
    <p>使用一个 free-style project 和 Maven build step</p>
  </li>
  <li>
    <p>使用一个 Maven-style project (配置job type为Mavin job type)
推荐使用第一种方法，因为第二种方式可能会出现问题</p>
  </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Linux Screen]]></title>
    <link href="http://euccas.github.io/blog/20140531/the-elements-of-linux-screen.html"/>
    <updated>2014-05-31T14:51:54-07:00</updated>
    <id>http://euccas.github.io/blog/20140531/the-elements-of-linux-screen</id>
    <content type="html"><![CDATA[<p>The Element of Linux Screen</p>

<p><a href="http://aperiodic.net/screen/start">Linux Screen</a> is a tool installed in Linux system with which you can manage multiple interactive shell processes. With Screen, you can have multiple shells in the same window. You can detach shell processes and attach them when you log into the system from other sessions. With Screen, you don’t need worry about losing your half-way tasks when the terminal exit. I use the Screen on a daily basis, and here I write down the commands and usages that are most commonly used in my everyday work.</p>

<h1 id="start-screen">Start Screen</h1>

<p>In a system where screen is installed, type “screen” in a terminal will invoke it.</p>

<p>If screen isn’t installed in your system, Google “install screen in Linux” to find the solution.</p>

<p>Screen can also has a <strong>session name</strong> when get started:</p>

<p><code>screen -S</code></p>

<p>If no session name is specified, screen will use the default Shell name as the session name.</p>

<p>Example:</p>

<pre><code>Num  Name
0	bash
1	bash
</code></pre>

<h1 id="do-some-configurations">Do some configurations</h1>
<p>Screen uses a configuration file “~/.screenrc”. It could be empty if there is no customized configurations.</p>

<p>You can skip this .screenrc config and use everything set as default by Screen. It will be fine most of the time. However if you use <strong>Emacs</strong>, you might need <strong>change the default command key</strong> used by Screen in the .screenrc file. Here is the why and how.</p>

<p>Command key in Screen means the key input that issues the commands to Screen instead of to Linux shell.
By default, the Screen command key is <code>Ctrl+A</code> (C-A).</p>

<pre><code>C-A ? : show the key binning used by Screen
</code></pre>

<p>Emacs also uses C-A as the command key, so you may face the command key conflict when using Emacs in Screen. To make sure the command key work properly when use Screen and Emacs together, change the command key of Screen in .screenrc to be a command that not used by Emacs.</p>

<p>Some examples:</p>

<pre><code>~/.screenrc$

escape ^L^L   #use Ctrl+L
escape ^^^^   #use Ctrl+^
escape ^]^]   #use Ctrl+]
</code></pre>

<p>Note the first “^” means command key, the second “^” means literal insert key.</p>

<p>You can also set the default caption names when you have multiple shells in one screen</p>

<pre><code>~/.screenrc$

caption always "%{= kw}%-w%{= BW}%n %t%{-}%+w %-= @%H - %LD %d %LM - %c"
</code></pre>

<h1 id="common-screen-commands">Common Screen Commands</h1>

<h2 id="from-linux-shell">From Linux Shell</h2>

<pre><code>screen  	# start a screen
screen -S   # start a screen with a session name
screen -ls  # list current screens
screen -d  	# detach the current screen
screen -r  	# re-attach the screen that was attached
</code></pre>

<h2 id="from-screen">From Screen</h2>

<pre><code>C-a " 		# list all interactive shells
C-a c  		# create a new interactive shell (window)
C-a k  		# kill the current window
C-a n (or ) # switch to the next shell window
C-a p (or )	# switch to the previous shell window
C-a shift-A  # rename current window
C-a S  		# split display horizontally
C-a V  		# split display vertically
C-a tab		# jump to the next display region
C-a X  		# remove current region
C-a Q  		# remove all regions but the current one 
</code></pre>

<p>When split the windows horizontally, use <code>C-a S</code>.
Then use <code>C-a tab</code> to move between the horizontally split regions.</p>

<p><code>screen -S SESSIONNAME</code> is good for starting a session with a name, but if you start a session and later decide to name it or rename it, you’ll need enter command mode <code>(C-a :) </code>and then enter the command <code>sessionname SESSIONNAME</code>.</p>

<p>These are all my notes for using Linux Screen. Hopefully it could help you use it better!</p>
]]></content>
  </entry>
  
</feed>
