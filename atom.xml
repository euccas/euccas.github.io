<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[euccas.github.io]]></title>
  <link href="http://euccas.github.io/atom.xml" rel="self"/>
  <link href="http://euccas.github.io/"/>
  <updated>2017-02-27T23:08:28-08:00</updated>
  <id>http://euccas.github.io/</id>
  <author>
    <name><![CDATA[euccas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Effective Traditional C++ 03 String]]></title>
    <link href="http://euccas.github.io/20170227/effective-traditional-c-plus-plus-03-string.html"/>
    <updated>2017-02-27T20:39:46-08:00</updated>
    <id>http://euccas.github.io/20170227/effective-traditional-c-plus-plus-03-string</id>
    <content type="html"><![CDATA[<p>Recently I spent a whole lot of time on file compression and decompression with zlib. Thought I’d better write something about it. But before that, let me finish the series of “Effective Traditional C++”. Today I’ll write about Strings in C++.</p>

<p>Two types of String are available in C++: C-Strings (C-style Strings), and STL Strings.</p>

<h1 id="c-string">C-String</h1>

<p>C-String is a fundamental type in C++. Comparing to STL String, C-String is small, simple and fast. A C-String is a special case of an array of characters terminated with a 0. This is sometimes called an null-terminated string. A C-String can be printed out with a <code>printf</code> statement using the <code>%s</code> format string. We can access the individual characters in a C-String just as we do in an array.</p>

<p><strong>Example: print a C-String with %s</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">char s[] = {'s', 't', 'r', 'i', 'n', 'g', 0};
</span><span class="line">printf("String is: %s\n", s);
</span><span class="line">// output:  String is: string</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Example: access characters of a C-String</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">char s[] = {'s', 't', 'r', 'i', 'n', 'g', 0};
</span><span class="line">for (int i = 0; s[i]; i++)
</span><span class="line">{
</span><span class="line">    printf("Char is: %c\n", s[i]);
</span><span class="line">}
</span><span class="line">// output:
</span><span class="line">// Char is: s
</span><span class="line">// Char is: t
</span><span class="line">// Char is: r
</span><span class="line">// Char is: i
</span><span class="line">// Char is: n
</span><span class="line">// Char is: g</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Example: access characters of a C-String, using a pointer</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">char s[] = "string";
</span><span class="line">for (char* cp = s; *cp; ++cp)
</span><span class="line">{
</span><span class="line">    printf("Char is %c\n", *cp);
</span><span class="line">}
</span><span class="line">// output:
</span><span class="line">// Char is: s
</span><span class="line">// Char is: t
</span><span class="line">// ... ... 
</span><span class="line">// Char is: g</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Example: access characters of a C-String, C++ 11 style</strong></p>

<p>In C++ 11, a <em>range based loop</em> can be used to access arrays and also C-Strings.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">char s[] = "string";
</span><span class="line">for (char c : s)
</span><span class="line">{
</span><span class="line">    printf("Char is %c\n", *cp);
</span><span class="line">}
</span><span class="line">// output:
</span><span class="line">// Char is: s
</span><span class="line">// Char is: t
</span><span class="line">// ... ... 
</span><span class="line">// Char is: g
</span><span class="line">// Char is:</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You may have noticed that the <code>null</code> character in the end of the C-String was printed out in the above code snippet. This is because the <em>range based for loop</em> in C++ 11 looks at the entire array and doesn’t treat the <code>null</code> as the end of the C-String. To get rid of the ending <code>null</code> character in a C-String, we need add a condition checker inside the range based loop.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">char s[] = "string";
</span><span class="line">for (char c : s)
</span><span class="line">{
</span><span class="line">    if (c==0) break;
</span><span class="line">    printf("Char is %c\n", *cp);
</span><span class="line">}
</span><span class="line">// output:
</span><span class="line">// Char is: s
</span><span class="line">// Char is: t
</span><span class="line">// ... ... 
</span><span class="line">// Char is: g</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="stl-string">STL String</h1>

<p>The STL String class is a special type of container designed to operate with sequence of characters. It’s designed with many <a href="http://www.cplusplus.com/reference/string/string/">features and available functions</a> to operate on strings efficiently and intuitively. To use STL String, you need include <code>string</code> header. The following example shows the basic usage of STL string including getting the length of a string, string concatenation, comparison, and accessing each character.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class=""><span class="line">include &lt;iostream&gt;
</span><span class="line">include &lt;string&gt;
</span><span class="line">  
</span><span class="line">int main(int argc, char** argv) {
</span><span class="line">    string s0 = "Hello";
</span><span class="line">    
</span><span class="line">    // size == length
</span><span class="line">    cout &lt;&lt; "size of string: " &lt;&lt; s0.size() &lt;&lt; endl;
</span><span class="line">    cout &lt;&lt; "length of string: " &lt;&lt; s0.length() &lt;&lt; endl;
</span><span class="line">    // output:
</span><span class="line">    // 5
</span><span class="line">    // 5
</span><span class="line">    
</span><span class="line">    // + concatenation
</span><span class="line">    cout &lt;&lt; "concatenated strings: ";
</span><span class="line">    string s1 = "another hello";
</span><span class="line">    cout &lt;&lt; s0 + ", " + s1 &lt;&lt; endl;
</span><span class="line">    // output:
</span><span class="line">    // Hello, another hello
</span><span class="line">    
</span><span class="line">    // compare: ==, &gt;, &lt;, &gt;=, &lt;=, !=
</span><span class="line">    cout &lt;&lt; "is s0 == s1? " &lt;&lt; (s0 == s1 ? "yes" : "no") &lt;&lt; endl;
</span><span class="line">    s1 = s0
</span><span class="line">    cout &lt;&lt; "is s0 == s1? " &lt;&lt; (s0 == s1 ? "yes" : "no") &lt;&lt; endl;
</span><span class="line">    // output:
</span><span class="line">    // no
</span><span class="line">    // yes
</span><span class="line">    
</span><span class="line">    // access each character
</span><span class="line">    cout &lt;&lt; "each character: ";
</span><span class="line">    for (char c : s0) {
</span><span class="line">       cout &lt;&lt; c &lt;&lt; ' ';
</span><span class="line">    }
</span><span class="line">    cout &lt;&lt; endl;
</span><span class="line">    // output:
</span><span class="line">    // Hello
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A List of SoC Design and Verification Infrastructure Needs - Tools/Automation Flows (2013)]]></title>
    <link href="http://euccas.github.io/20170212/a-list-of-soc-design-and-verification-infrastructure-needs.html"/>
    <updated>2017-02-12T15:53:19-08:00</updated>
    <id>http://euccas.github.io/20170212/a-list-of-soc-design-and-verification-infrastructure-needs</id>
    <content type="html"><![CDATA[<p><em>This post was written in 2013, when I thought it was necessary to summarize infrastructure tools and flows needed in SoC design and verification, according to all my experience. Today when I checked on my old notes I found this one and would like to share it here. Later on I’ll update and expand this list according to my latest experience and knowledge in engineering tools and infrastructure for software and hardware development.</em></p>

<p>System-on-Chip design and verification process is a complicated one. Unlike the world of Web and Internet, the design and development of hardware products have higher risk and lower tolerance to any mistakes. SoC design and verification process requires collaborations from multiple teams and vendors. Lots of hard decisions to make. Lots of trade-offs to consider. Moreover, the nonrecurring-engineering (NRE) charge makes sufficient and solid verification a must with limited time and resource. Tools and automated flows are an essential part of any design house.</p>

<p>Here is a list of areas that need tools and flows for SoC software and hardware design and verification according to my experience.</p>

<table>
<tr>
	<th>Usage Area of Tools/Flows</th>
	<th>Software</th>
	<th>Hardware</th>
	<th>Design Usage</th>
	<th>Verification Usage</th>
</tr>

<tr>
	<td>Test Generation</td>
	<td>x</td>
	<td>x</td>
	<td></td>
	<td>x</td>
</tr>

<tr>
	<td>Regression System</td>
	<td>x</td>
	<td>x</td>
	<td></td>
	<td>x</td>
</tr>

<tr>
	<td>Coverage Reporting</td>
	<td>x</td>
	<td>x</td>
	<td></td>
	<td>x</td>
</tr>

<tr>
	<td>Coding Style Check</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>Code Review System</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>Code Quality Analysis</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>Build System</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
</tr>

<tr>
	<td>Version Control</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
</tr>

<tr>
	<td>Integration System</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>Spec System</td>
	<td></td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>RTL Generation</td>
	<td></td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>TestBench Generation</td>
	<td></td>
	<td>x</td>
	<td></td>
	<td>x</td>
</tr>

<tr>
	<td>Synthesis</td>
	<td></td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>Netlist Quality Analysis</td>
	<td></td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>Power Analysis and Optimization</td>
	<td></td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>ECO Flow</td>
	<td></td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>Issue/Bug Tracking System</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
</tr>

<tr>
	<td>Infrastructure: Linux/Windows machines, LSF</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
</tr>

</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Traditional C++ (2): Pointer and Reference]]></title>
    <link href="http://euccas.github.io/20170205/effective-traditional-c-plus-plus-02-pointer-and-reference.html"/>
    <updated>2017-02-05T22:18:59-08:00</updated>
    <id>http://euccas.github.io/20170205/effective-traditional-c-plus-plus-02-pointer-and-reference</id>
    <content type="html"><![CDATA[<p>Pointers and references are two fundamental data types in C++. They are useful, common and somewhat dangerous. Using them correctly, they could greatly improve the efficiency and performance of your program. On the other hand, using them incorrectly could lead to many problems such as memory leaks and buffer overflow.</p>

<h1 id="pointers">Pointers</h1>

<p>A pointer holds the address of a variable and can be used to perform any operation that could be directly done on the variable, such as accessing and modifying it. Here are a few facts of pointers:</p>

<ul>
  <li>
    <p>When a pointer is defined, memory is allocated in the size of a pointer.</p>
  </li>
  <li>
    <p>The pointer is strongly typed, meaning the compiler retains an association with a pointer that it points to a type of value.</p>
  </li>
  <li>
    <p>Two pointers can equal to each other, such that changing one’s value also changes the other’s value.</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int * p = new int;
</span><span class="line">*p = 1;
</span><span class="line">int * q = p;
</span><span class="line">*p = 2;
</span><span class="line">cout &lt;&lt; *q; // Outputs 2. * is the pointer dereferene operator</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>The size of a pointer varies depending on the architecture: 32 bits on a 32-bit machine and 64 bits on a 64-bit machine.</p>
  </li>
  <li>
    <p>Pointer subtraction is allowed. The result of pointer subtraction is the distance of two pointers.</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int a = 1;
</span><span class="line">int b = 2;
</span><span class="line">int * pa = &a;
</span><span class="line">int * pb = &b;
</span><span class="line">int pdis = pa - pb;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Adding a pointer and a distance gets another meaningful pointer.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int * p = new int[2];
</span><span class="line">p[0] = 0;
</span><span class="line">p[1] = 1;
</span><span class="line">p++;
</span><span class="line">cout &lt;&lt; *p; // Outputs 1</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>But adding two pointers won’t give you a meaningful pointer. Don’t do it.</li>
</ul>

<h1 id="references">References</h1>

<p>A reference is another name for a pre-existing object. It does not have memory of its own. In other words, a reference is only an alias. A few facts about references are:</p>

<ul>
  <li>You cannot create a reference without specifying where in memory it refers to. A reference cannot be null.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int x = 7;
</span><span class="line">int &amp; y = x; // Makes y a reference, initialized with the address of x</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>You can create a free-standing reference as shown below:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">const int &amp; a = 12;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>A reference is immutable. You cannot reassign a reference to another piece of memory.</p>
  </li>
  <li>
    <p>When you use references in function calls and class method calls, you always want to make them const. This helps to eliminate the side effects of using references (because using reference sometimes is not obvious as using pointers, and people may not notice the unintended side effects could happen). The following example shows the possible side effects when using references:</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int &amp; f(int &amp;x) {
</span><span class="line">    ++x;
</span><span class="line">    return x;
</span><span class="line">}
</span><span class="line">
</span><span class="line">int main(int argc, char** argv)
</span><span class="line">{
</span><span class="line">    int i = 5;
</span><span class="line">    printf("the value is %d\n", i); // i is 5
</span><span class="line">    printf("the value is %d\n", f(i)); // f(i) is 6
</span><span class="line">    printf("the value is %d\n", i); // i is changed to 6 unindently
</span><span class="line">    return 0;
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The good way is always using <code>const</code> when using references:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">const int &amp; f(const int &amp; x) {
</span><span class="line">    static int y = x;
</span><span class="line">    ++y;
</span><span class="line">    return y;
</span><span class="line">}
</span><span class="line">
</span><span class="line">int main(int argc, char** argv)
</span><span class="line">{
</span><span class="line">    int i = 5;
</span><span class="line">    printf("the value is %d\n", i); // i is 5
</span><span class="line">    printf("the value is %d\n", f(i)); // f(i) is 6
</span><span class="line">    printf("the value is %d\n", i); // i is 5
</span><span class="line">    return 0;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="functions-call-by-reference">Functions: Call by Reference</h1>

<p>By default, functions in C++ pass variables by value, which means that a copy of the value is made and that copy is used inside the function. This is called <strong>pass by value</strong>. However, passing references or pointers does the same thing and faster as the copying is skipped. Actually this is why references are created for C++, to allow <strong>call by reference</strong> so that you can pass large objects without worrying about stack overflow.</p>

<p>Before references, this can be done with pointers. Pass by pointers can do the same thing but it’s a little bit more complicated than using references.</p>

<p>Example of a “call by reference”:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> void func(const string &amp; fs)
</span><span class="line"> {
</span><span class="line">    print("string value is %s\n", fs.c_str());
</span><span class="line"> }
</span><span class="line"> 
</span><span class="line"> int main(int argc, char ** argv)
</span><span class="line"> {
</span><span class="line">    string s = "I'm a string!";
</span><span class="line">    func(s); // Outputs: string value is I'm a string
</span><span class="line">    printf("string is %s\n", s.c_str()); // Outputs: string is I'm a string
</span><span class="line">    return 0;
</span><span class="line"> }
</span><span class="line"> </span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Traditional C++ (1): Qualifiers]]></title>
    <link href="http://euccas.github.io/20170130/effective-traditional-c-plus-plus-01-qualifiers.html"/>
    <updated>2017-01-30T21:41:11-08:00</updated>
    <id>http://euccas.github.io/20170130/effective-traditional-c-plus-plus-01-qualifiers</id>
    <content type="html"><![CDATA[<p>Recently I’m doing a review on C++ programming language. During the process, I found a few topics which are worth paying more attention to. I’ll write several posts about the related C++ tips and tactics. These topics are not specially for C++ 11 or 14, I therefore name this series of posts as “Effective Traditional C++”.</p>

<p>The first topic I’ll write about here is: <strong>Qualifiers</strong></p>

<p>C++ uses Qualifiers to adjust qualities of a variable or an object. In C++, there are two types of qualifiers: CV qualifiers and storage qualifiers.</p>

<h1 id="cv-qualifiers">CV Qualifiers</h1>

<p>CV qualifiers stands for Const and Volatile Qualifier. There are three types of CV qualifiers:</p>

<ul>
  <li>const</li>
  <li>volatile</li>
  <li>mutable</li>
</ul>

<h2 id="const-qualifier">const qualifier</h2>

<p><code>const</code> marks a variable or function as read-only or immutable. It’s value (or the return value of a function) cannot be changed once it’s been defined.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">const int weekdays = 7;
</span><span class="line">
</span><span class="line">const int * myptr1; // declares myptr1 is a pointer to a constant integer
</span><span class="line">int const * myptr2; // same as above, declares myptr2 is a pointer to a constant integer
</span><span class="line">// myptr1 and myptr2 can be changed to point to other const integers
</span><span class="line">
</span><span class="line">int * const  myptr3; // declares myptr3 is constant pointer to a variable integer
</span><span class="line">int const * const myptr4; // declares myptr4 is constant pointer to a constant integer
</span><span class="line">// myptr3 and myptr4 cannot be changed once initialized
</span><span class="line">
</span><span class="line">const char *Function1()
</span><span class="line">{ return "Some text";}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="volatile-qualifier">volatile qualifier</h2>

<p><code>volatile</code> marks a variable that may be <strong>changed by another process</strong>. This is generally used for threaded code, or externally linked code. Often <code>volatile</code> is used to tell the compiler avoid aggressive optimization involving the qualified object because the value of the object might be changed by means that the compiler is not aware of.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">volatile int maxcnt = 10;
</span><span class="line">int cnt = 0;
</span><span class="line">while (cnt &lt; maxcnt)
</span><span class="line">{
</span><span class="line">    // do something ... 
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="mutable-qualifier">mutable qualifier</h2>

<p><code>mutable</code> is used on data member to make it writable from a <code>const</code> qualified member function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">class A {
</span><span class="line">   mutable int x;
</span><span class="line">   int y;
</span><span class="line">
</span><span class="line">   public:
</span><span class="line">     void f1() {
</span><span class="line">       // "this" has type `A*`
</span><span class="line">       x = 1; // okay
</span><span class="line">       y = 1; // okay
</span><span class="line">     }
</span><span class="line">     void f2() const {
</span><span class="line">       // "this" has type `A const*`
</span><span class="line">       x = 1; // okay, because x is mutable qualified
</span><span class="line">       y = 1; // illegal, because f2 is const
</span><span class="line">     }
</span><span class="line">};
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="storage-qualifiers">Storage Qualifiers</h1>

<p>Storage qualifiers determine the lifetime of the defined variables or functions. By default, a variable defined within a block has automatic lifetime, which is the duration of the block. There are three types of storage qualifiers:</p>

<ul>
  <li>static</li>
  <li>register</li>
  <li>extern</li>
</ul>

<h2 id="static-qualifier">static qualifier</h2>

<p><code>static</code> marks the variable is alive for the duration of the program. Static variables are commonly used for keeping <strong>state</strong> between instances of a given function or method. Static variables are stored globally, even if they are stored in a class.</p>

<h2 id="register-qualifier">register qualifier</h2>

<p><code>register</code> marks the variables as register variables, which are stored in processor registers. Register variables are faster and easier to access and operate on. Note using <code>register</code> only suggest the compiler that particular automatic variables should be allocated to CPU registers, if possible. The compiler may or may not actually store the variable in a register. Register variables should only be used if you have a detailed knowledge of the architecture and compiler for the computer you are using.</p>

<h2 id="extern-qualifier">extern qualifier</h2>

<p><code>extern</code> defines the variables or functions in a separate translation unit and are linked with the code by the linker step of the compiler. In other words, you can <strong>define</strong> variables or functions in some source files or classes, and use them in other source files/classes by using <code>extern</code> qualifier to <strong>declare</strong> them in other source files or classes.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Now Commenting on Posts Is Enabled]]></title>
    <link href="http://euccas.github.io/20170116/now-commenting-on-posts-is-enabled.html"/>
    <updated>2017-01-16T23:39:06-08:00</updated>
    <id>http://euccas.github.io/20170116/now-commenting-on-posts-is-enabled</id>
    <content type="html"><![CDATA[<p>Hi there,</p>

<p>I just enabled <strong>commenting</strong> on this blog with <a href="https://disqus.com/">Disqus</a>.</p>

<p>Feel free to leave comments on the blog posts you’re interested. I look foward to having conversations with people who spend some time reading my blog.</p>

<p>Cheers,</p>

<p>Euccas</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Functors]]></title>
    <link href="http://euccas.github.io/20170115/c-plus-plus-functors.html"/>
    <updated>2017-01-15T20:20:07-08:00</updated>
    <id>http://euccas.github.io/20170115/c-plus-plus-functors</id>
    <content type="html"><![CDATA[<p>A <strong>functor</strong> is a powerful C++ entity that everyone who wants to master C++ needs to know. A functor, which is short for “<strong>function object</strong>”, is a C++ class that acts like a function. Functors can be called using the familiar function call syntax, and can yield values and accept parameters just like regular functions.</p>

<p>To create a functor, we create a class (or a struct) that overloads the function <code>operator()</code>. Note here the function is called <code>operator()</code>, and it’s not the <code>operator</code> function, i.e. <code>()</code>. We then create an instance of this class (or struct) to use the created functor.</p>

<h1 id="create-and-use-functors">Create and use functors</h1>

<p>Let’s look at two examples of creating and using a functor. In the first example, a functor is created with a <code>class</code>, and in the second example we use a <code>struct</code> to create the functor.</p>

<h2 id="example-create-a-functor-with-a-class">Example: Create a functor with a Class</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">class MyFunctor {
</span><span class="line">public:
</span><span class="line">    void operator() (const string&amp; str) const {
</span><span class="line">        cout &lt;&lt; str &lt;&lt; endl;
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">// Using functor:
</span><span class="line">
</span><span class="line">MyFunctor functor; // create an instance of the functor class
</span><span class="line">functor("This is a functor!"); // and "call" it
</span><span class="line">
</span><span class="line">// equivalence:
</span><span class="line">cout &lt;&lt; functor.operator()(23) &lt;&lt; endl;
</span><span class="line">
</span><span class="line">// You'll see "This is a functor" printed out.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="example-create-a-functor-with-a-struct">Example: Create a functor with a Struct</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">struct add_x {
</span><span class="line">  add_x(int x) : x(x) {}
</span><span class="line">  int operator()(int y) { return x + y; }
</span><span class="line">private:
</span><span class="line">  int x;
</span><span class="line">};
</span><span class="line">
</span><span class="line">// Using functor:
</span><span class="line">
</span><span class="line">add_x add42(42); // create an instance of the functor class
</span><span class="line">int i = add42(8); // and "call" it
</span><span class="line">assert(i == 50); // and it added 42 to its argument
</span><span class="line">
</span><span class="line">std::vector&lt;int&gt; in;
</span><span class="line">std::vector&lt;int&gt; out;
</span><span class="line">// Pass a functor to std::transform, which calls the functor on every element 
</span><span class="line">// in the input sequence, and stores the result to the output sequence
</span><span class="line">std::transform(in.begin(), in.end(), out.begin(), add_x(1)); 
</span><span class="line">assert(out[i] == in[i] + 1); // for all i
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="functors-access-class-data-members">Functors access class data members</h1>

<p>The key difference between a function and a functor is that a functor’s function call operator is a <em>member function</em> whereas a raw C++ function is a <em>free</em> function. This means that a functor can access the following information when being called:</p>

<ul>
  <li>Its local variables</li>
  <li>Its parameters</li>
  <li>Global variables</li>
  <li><strong>Class data members</strong></li>
</ul>

<p>If a functor’s <code>operator()</code> member function requires access to data beyond what can be communicated by its parameters, we can store that information as a data member inside the functor class. Since <code>operator()</code> is a member of the functor class, it can then access that data freely. The following example shows how a functor’s <code>operator()</code> function access the class’s private member <code>toAppend</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">class StringAppender {
</span><span class="line">public:
</span><span class="line">    // Constructor takes and stores a string.
</span><span class="line">    explicit StringAppender(const string &amp;str) : toAppend(str) {}
</span><span class="line">    
</span><span class="line">    // Operator() prints out a string, plus the stored suffix.
</span><span class="line">    void operator() (const string &amp;str) const {
</span><span class="line">        cout &lt;&lt; str &lt;&lt; ' ' &lt;&lt; toAppend &lt;&lt; endl;
</span><span class="line">    }
</span><span class="line">
</span><span class="line">private:
</span><span class="line">    const string toAppend;
</span><span class="line">};
</span><span class="line">
</span><span class="line">// Usage:
</span><span class="line">StringAppender myFunctor("is awesome");
</span><span class="line">myFunctor("C++");
</span><span class="line">
</span><span class="line">// You'll see "C++ is awesome" is printed out.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="functors-are-useful-in-stl-algorithms">Functors are useful in STL algorithms</h1>

<p>C++ STL algorithms use functors to increase the flexibility and efficiency. The most common uses for function objects are for generating data, for testing data, and for applying operations to data. here is an example of how STL <code>for_each</code> uses functors.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">struct sum
</span><span class="line">{
</span><span class="line">    sum(int* t):total(t){};
</span><span class="line">    int* total;
</span><span class="line">    void operator()(int element)
</span><span class="line">    {
</span><span class="line">       *total += element;
</span><span class="line">    }
</span><span class="line">};
</span><span class="line">
</span><span class="line">int main()
</span><span class="line">{
</span><span class="line">    int total = 0;
</span><span class="line">    sum s(&amp;total);
</span><span class="line">    int arr[] = {0, 1, 2, 3, 4, 5};
</span><span class="line">    std::for_each(arr, arr+6, s);
</span><span class="line">    cout &lt;&lt; total &lt;&lt; endl; // prints total = 15;
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>The reader of <a href="http://web.stanford.edu/class/cs106l/course-reader/Ch13_Functors.pdf">Stanford course CS106l</a> explains functors in detail.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Start on Machine Learning]]></title>
    <link href="http://euccas.github.io/20170106/get-start-on-machine-learning.html"/>
    <updated>2017-01-06T23:17:40-08:00</updated>
    <id>http://euccas.github.io/20170106/get-start-on-machine-learning</id>
    <content type="html"><![CDATA[<p>So here comes 2017, a year when you hear people talk about the words <em>Machine Learning</em>, <em>Reinforcement Learning</em>, and <em>Artificial Intelligence</em> everywhere.</p>

<p>Last year when Mark Zuckberg was working on building Jarvis, I didn’t spend much time on AI or Machine Learning. But I know the efforts I made last year get me ready to start on it right now.</p>

<p>Tonight I just talked to a former colleague who is working at Nvidia, and he gave me a few helpful suggestions about getting started on machine learning according to his own experience. Here are some of his advices:</p>

<ul>
  <li>Set a goal: What do you want to achieve with the knowledge of Machine Learning?</li>
  <li>Learn the fundamentals: <a href="https://www.coursera.org/learn/machine-learning">Andrew Ng’s course</a> on Coursera</li>
  <li>If you’d like to have more courses, take <a href="http://cs231n.stanford.edu/">Standford CS231n</a></li>
  <li>Learn to use the frameworks: <a href="https://www.tensorflow.org/">Tensor Flow</a>, <a href="http://caffe.berkeleyvision.org/">Caffe</a></li>
  <li>Work on projects with real data (very important): get from <a href="https://www.kaggle.com/">Kaggle.com</a></li>
  <li>Follow <a href="https://openai.com/">OpenAI</a> and <a href="https://deepmind.com/">DeepMind</a></li>
  <li>Master Python if you haven’t</li>
  <li>Make sure your computer has a powerful GPU :)</li>
</ul>

<p>Some people I know might think Machine Learning or AI is sort of irrelevant to what I’m working on. That’s not what I think though. Even if it is irrelevant today, it will become relevant sooner than expected. Machine Learning is not a fad. It’s the way how technology works tomorrow. If you can’t master it, at least you need have a good understanding of it.</p>

<p><img class="center" src="http://euccas.github.io/images/post_images/20170107-larrypage.jpg" width="640" /></p>

<p><em>Image source: Medium <a href="https://medium.com/the-mission/20-things-i-ve-learned-from-larry-page-4f83674a1a52#.elpww9snf">“20 things I’ve learned from Larry Page”</a></em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Multiprocessing]]></title>
    <link href="http://euccas.github.io/20161231/python-multiprocessing.html"/>
    <updated>2016-12-31T09:37:01-08:00</updated>
    <id>http://euccas.github.io/20161231/python-multiprocessing</id>
    <content type="html"><![CDATA[<p>Python’s GIL (Global Interpreter Lock) was designed to be a thread-safe mechanism, and it effectively prevents conflicts between multiple threads. GIL makes it easy to implemente multi-threading with Python. However, it also prevents Python multi-threading from utilizing the multiple cores of a computer to achieve improved execution speed. This is why using the <code>threading</code> module in Python won’t help your program run faster through parallelism.</p>

<p>The good thing is Python provides a <a href="https://docs.python.org/3.4/library/multiprocessing.html"><code>multiprocessing</code> module</a> since Python 2.6. With the <code>multiprocessing</code> module we can spawn subprocesses and effectively avoid some of the limitations that GIL brings, on both Unix and Windows platforms.</p>

<p>In this post I’ll briefly introduce <code>multiprocess</code> module and show how it can be used for parallel programming.</p>

<h1 id="a-simple-example-of-multiprocessing">A simple example of <em>multiprocessing</em></h1>

<p>In the following example, we use <code>multiprocessing</code> module to spawn a child process from a parent process using a <code>Process</code> object.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">from multiprocessing import Process
</span><span class="line">import os
</span><span class="line">import time
</span><span class="line">
</span><span class="line">def task(name):
</span><span class="line">    print("Starting child process with id: ".format(os.getpid()))
</span><span class="line">    print("Parent process: ".format(os.getppid()))
</span><span class="line">    print("Task start: just sleeps 5 seconds ...")
</span><span class="line">    time.sleep(5)
</span><span class="line">    print("Task done")
</span><span class="line">    
</span><span class="line">if __name__ == "__main__":
</span><span class="line">    print("In parent process, id: ".format(os.getpid())
</span><span class="line">    p = Process(target=task, args=('firstone'))
</span><span class="line">    p.start()
</span><span class="line">    print("In parent process, after child process start")
</span><span class="line">    print("parent process about to join child process")
</span><span class="line">    p.join()
</span><span class="line">    print("In parent process, after child process join")
</span><span class="line">    print("parent process exiting with id ".format(os.getpid()))
</span><span class="line">    print("the parent's parent process: ".format(os.getppid()))
</span><span class="line">    </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The output of this program will be:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">In parent process, id 5245
</span><span class="line">In parent process, after child process start
</span><span class="line">parent process about to join child process
</span><span class="line">Starting child process with id: 5246
</span><span class="line">Parent process: 5245
</span><span class="line">Task start: just sleeps 5 seconds ...
</span><span class="line">Task done
</span><span class="line">In parent process, after child process join
</span><span class="line">parent process exiting with id 5245
</span><span class="line">the parent's parent process: 5231</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The program starts the subprocess using <code>p.start()</code></p>

<h1 id="three-ways-to-start-a-process">Three ways to start a process</h1>

<p>Depending on the platform, <code>multiprocessing</code> supports three ways to start a process.</p>

<ul>
  <li><strong>spawn</strong></li>
</ul>

<p>Available on both Unix and Windows. The default on Windows. The parent process starts a fresh python interpreter process. Slower comparing with <code>fork</code> or <code>forkserver</code>.</p>

<ul>
  <li><strong>fork</strong></li>
</ul>

<p>Parent process uses <code>os.fork()</code> to fork the Python interpreter. The child process is identical to the parent process, with inheritating all resources of the parent process. Available on Unix only. The default of Unix.</p>

<ul>
  <li><strong>forkserver</strong></li>
</ul>

<p>Starts a server process. Whenever a new process is needed, the parent process connects to the server and requests that it fork a new process. Available on Unix.</p>

<p>To select a start method, you can use <code>set_start_method()</code>. This method should be used only once in the program.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mp.set_start_method('spawn')
</span><span class="line">p = mp.Process(target=foo, args=())
</span><span class="line">p.start()
</span><span class="line">p.join()</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="two-ways-to-exchange-objects-between-processes">Two ways to exchange objects between processes</h1>

<p>Two types of communication channel between processes are supported in <code>multiprocessing</code>, and they are:</p>

<ul>
  <li>class Queue</li>
  <li>function Pipe()</li>
</ul>

<p>If you need know more details, the Python document <a href="https://docs.python.org/3.4/library/multiprocessing.html#exchanging-objects-between-processes">here</a> will provide help.</p>

<h1 id="use-a-pool-of-workers">Use a pool of workers</h1>

<p>The <code>Pool</code> class is a quite useful one in the <code>multiprocessing</code> module, as in real life you’ll often need multiple workers to execute the tasks in your program in parallel. What the <code>Pool</code> class represents is a pool of workers. The following example shows how to create a pool with 4 processes as workers, and assign tasks to the workers.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">from multiprocessing import Pool
</span><span class="line">from time import sleep
</span><span class="line">
</span><span class="line">def f(x):
</span><span class="line">    return x*x
</span><span class="line">
</span><span class="line">if __name__ == "__main__":
</span><span class="line">    # start 4 worker processes
</span><span class="line">    with Pool(processes=4) as pool:
</span><span class="line">        res = pool.apply_async(f, [10])
</span><span class="line">        print(res.get(timeout=1))
</span><span class="line">
</span><span class="line">    pool.close()
</span><span class="line">    pool.join()
</span><span class="line">    </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>apply_async(f, args, kwargs)</code> method calls a function for many times, or calls a number of different functions asynchronously with arguments arguments. Each process will NOT block other processes. The order of the multiple processes are not guaranteed.</p>

<p>The <code>close()</code> prevents any more tasks from being submitted to the pool. Once all the tasks have been completed, the worker process will exit.</p>

<p>The <code>join()</code> method waits for the worker processes to exit. It is required to call <code>close()</code> or <code>terminate()</code> before using <code>join()</code> method.</p>

<p>Both <code>close()</code> and <code>terminate()</code> will stop all the worker processes. The difference is <code>close()</code> will wait for worker process to finish, and <code>terminate()</code> immediately shut down worker processes without completing outstanding work.</p>

<p>Another useful method provided by <code>multiprocessing</code> module is <code>cpu_count()</code>, which returns the number of CPUs in the current system. You can use this value to decide how many processes to create in a pool.</p>

<p><em>This post is my last post in 2016. Happy new year!</em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Levels of Design]]></title>
    <link href="http://euccas.github.io/20161224/levels-of-design.html"/>
    <updated>2016-12-24T09:52:07-08:00</updated>
    <id>http://euccas.github.io/20161224/levels-of-design</id>
    <content type="html"><![CDATA[<p>Recently I’m taking a course <a href="https://www.coursera.org/learn/algorithmic-toolbox/home/welcome">“Algorithm Toolbox”</a> on Coursera. This course provides me a good chance to review and enhance my knowledge in the fundamental algorithms, which usually would help on achieving better system design. This morning I came across one slide of this course and thought it could be very useful. Sharing it here.</p>

<p><img class="center" src="http://euccas.github.io/images/post_images/20161224-levels-of-design-1.png" width="600" /></p>

<p>It’s important to keep the <strong>levels of (algorithm) design</strong> in mind when solving a problem.</p>

<h1 id="level-1-naive-algorithm">Level 1: Naive Algorithm</h1>

<p>This is the solution that you can get just by taking the definition of a problem and turning it into an algorithm. This solution can solve the problem, but it is often very slow and inefficient.</p>

<p>The way I see the naive algorithm is it gives you something that works, and might be used to verify if alternative solutions are correct or not. But it’s important to not stay at the this solution. You should keep looking for better solutions.</p>

<h1 id="level-2-algorithm-by-way-of-standard-tools">Level 2: Algorithm by way of standard Tools</h1>

<p>You can look at the standard techniques and see if any of it applies to solving your problem. On this level, your goal is finding some standard techniques that work, often that don’t involve too much effort on your part, and give you something that work very well (better than the naive algorithm).</p>

<h1 id="level-3-optimized-algorithm">Level 3: Optimized Algorithm</h1>

<p>Remember there are always lots of ways to improve an existing solution. If you get a pretty good solution on level 2, why not taking one more step and see what you can do to improve it? Could you reduce the runtime from n-cubed to n-squared or n-squred to n? Could you come up with a shorter solution by rearranging the order or cut out some of the work? Could you use a data structure to speed things up? Think about all these possiblities and see if you can get a even better solution. (Often you will)</p>

<h1 id="level-4-magic-algorithm">Level 4: Magic Algorithm</h1>

<p>When the solutions from the previous three levels are not good enough, you’ll need some magic to get a better one. This can be hard. You will need some clever new ideas and unique insights of the problem you’re trying to solve. Even if you don’t get a magic solution in the end, the thought process will be beneficial.</p>

<p>Sometimes when I finish a project, I do have the feeling that the way I do it is just not good enough, even though the project has been proved to be successful, useful and solved a particular technical challenge we faced. Looking at the “Levels of Design”, I believe what I need to do is spending more efforts on the higher levels. Actually what you really need for getting a really good solution is not magic. What you need is mastering more existing good standard techniques, exploring the possibility for optimization, and a deep understanding of the problem you want to solve.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Generators]]></title>
    <link href="http://euccas.github.io/20161223/python-generators.html"/>
    <updated>2016-12-23T08:48:45-08:00</updated>
    <id>http://euccas.github.io/20161223/python-generators</id>
    <content type="html"><![CDATA[<p>Generators is a powerful weapon of Python. Generators help you write concise code, give you lazy evaluation, and improve the efficience for calculating large sets of results. Personally I think it’s a good habit to use generators in Python whenever you can, if you really want your code to be Pythonic.</p>

<h1 id="how-to-create-a-generator">How to create a generator</h1>

<p>There are mainly two ways to create a generator: using the <code>yield</code> keyword in the function, or using the <code>()</code> as a generator expression.</p>

<ul>
  <li>The <code>yield</code> keyword makes the function yields control back to the calling function on every iteration</li>
  <li>The <code>()</code> expression returns a generator object</li>
</ul>

<h1 id="how-to-refactor-a-function-to-use-a-generator">How to refactor a function to use a generator</h1>

<p>Functions that construct a list or another iterable and returns it can be turned into a generator by:</p>

<ol>
  <li>Converting the list append into a <code>yield</code></li>
  <li>Removing the empty list creation</li>
  <li>Removing the return</li>
</ol>

<h1 id="a-generator-example">A generator example</h1>
<p>Let’s see an example: implement a function that takes a list and return a list of the current running mean. For example, given the input list <code>[8, 4, 3, 1, 3, 5]</code>, the expected return result is <code>[8.0, 6.0, 5.0, 4.0, 3.8, 4.0]</code>.</p>

<p>First we’ll implement it without using generators.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def running_mean(numbers):
</span><span class="line">	average = []
</span><span class="line">	sum = 0
</span><span class="line">	for i, num in enumerate(numbers):
</span><span class="line">		sum += num
</span><span class="line">		average.append(sum/(i*1.0))
</span><span class="line">	return average
</span><span class="line">
</span><span class="line">numbers = [8, 4, 3, 1, 3, 5]
</span><span class="line">print(running_mean(numbers))
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we can refactor the above implementation to use a generator:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def running_mean(numbers):
</span><span class="line">	sum = 0
</span><span class="line">	for i, num = enumerate(numbers):
</span><span class="line">		sum += num
</span><span class="line">		yield sum/((i+1)*1.0)
</span><span class="line">
</span><span class="line">numbers = [8,4,3,1,3,5]
</span><span class="line">print(list(running_mean(numbers)))
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What we did in the refactoring was: replacing the list appending with a yield (<code>average.append()</code>), removing the empty list creation (<code>average = []</code>), and replacing the return statement with a yield statement.</p>

<p>One important property of Python generator object is it is a single-use object. In other words, a generator keeps yielding answers forever. The looping in a generator only ends when the calling function decides to end it. Meanwhile a generator can only be called once.</p>

<p>A few other generator examples can be found on my <a href="https://github.com/euccas/IntermediatePython/tree/master/iteration/generator">GitHub repo <em>IntermediatePython</em></a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL: Understand PG Errors]]></title>
    <link href="http://euccas.github.io/20161217/postgresql-understand-pg-errors.html"/>
    <updated>2016-12-17T09:06:21-08:00</updated>
    <id>http://euccas.github.io/20161217/postgresql-understand-pg-errors</id>
    <content type="html"><![CDATA[<p>When using Ruby Gem <code>pg</code> and establish database connections to a PostgreSQL database, you’ll see PG errors when the database connection becomes problematic. In my experience, two typical PG errors are <code>PG::AdminShutdown</code> and <code>PG::UnableToSend</code>.</p>

<h1 id="error-pgadminshutdown">Error PG::AdminShutdown</h1>

<p>The error message contains the following information:</p>

<p><code>
FATAL:  terminating connection due to administrator command (PG::AdminShutdown) server closed the connection unexpectedly
      This probably means the server terminated abnormally
      before or while processing the request.
</code></p>

<p>The PG::AdminShutdown error could be caused by database server receiving SIGTERM/SIGINT/SIGQUIT or kill command on the connection process. Each system signal shut down server processes in different manners, see the <a href="https://www.pgadmin.org/docs/1.4/pg/postmaster-shutdown.html">pgadmin document</a> to know the details.</p>

<p>When you hit the PG::AdminShutdown error, you’ll like to check if the database server gets restarted and if the server resumes to the normal state.</p>

<h1 id="error-pgunabletosend">Error PG::UnabletoSend</h1>

<p>The error message looks like:</p>

<p><code>
server closed the connection unexpectedly (PG::UnableToSend)
This probably means the server terminated abnormally before or while processing the request.
</code></p>

<p>The PG::UnabletoSend error usually means a connection timeout or network issue. It could be a temporary issue though. You can check if the other connections to the database server work well or not.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效Jenkins用户的第5个习惯]]></title>
    <link href="http://euccas.github.io/20161216/jenkins-user-habits-5.html"/>
    <updated>2016-12-16T15:49:51-08:00</updated>
    <id>http://euccas.github.io/20161216/jenkins-user-habits-5</id>
    <content type="html"><![CDATA[<p>本文内容部分来源于<strong>Andrew Bayer</strong>发布在SlideShare上的 <a href="http://www.slideshare.net/andrewbayer/seven-habits-of-highly-effective-jenkins-users-2014-edition"><em>7 habits of highly productive Jenkins Users (2014 Edition)</em></a>.</p>

<h1 id="section">习惯 5: 集成第三方工具和服务</h1>

<p>Jenkin可以和许多第三方工具和服务集成，实现强大又实用的功能。常见的集成方式包括使用REST API和一些Jenkins功能插件。可以实现的功能比如：由GitHub pull requests触发builds，当builds成功或失败时根据结果更新JIRA等等。</p>

<h2 id="gerritgithubpull-requests">Gerrit和Github的pull requests</h2>

<p>一些非常实用的Jenkins builds工具和服务包括：</p>

<ul>
  <li>Gerrit Trigger</li>
  <li>GitHub Pull Request Builder</li>
  <li>Jenkins Enterprise’s version of GitHub pull request builder</li>
</ul>

<p>Build工具和服务可以实现对每一次提交的改动进行build, 并且将结果报告提交代码审查工具。</p>

<p>在这些Build工具的基础之上，你可以实现自动化合并多个提交的改动，进行branch之间的同步等更多功能。</p>

<h2 id="jirahttpswwwatlassiancomsoftwarejira"><a href="https://www.atlassian.com/software/jira">JIRA</a></h2>

<ul>
  <li>检查每一个commit的描述信息，如果其中包含有JIRA issue信息，就用commit信息（和测试结果）提交相应的JIRA issue更新</li>
  <li>根据build的过程和步骤，更新所有相关项目的JIRA</li>
  <li>生成JIRA release notes</li>
</ul>

<h2 id="artifactory">Artifactory</h2>

<ul>
  <li>全局性地设定Jenkins jobs用于部署的证书信息 (credentials)</li>
  <li>覆盖 (override) 每一个job的Maven distributionManagement 配置</li>
  <li>定义Maven jobs和build步骤从何处获取artifacts</li>
  <li>在Artifactory中保存build信息和关系</li>
</ul>

<p><strong>阅读同主题内容</strong></p>

<ul>
  <li><a href="http://euccas.github.io/blog/20151210/jenkins-user-habits-1.html">高效Jenkins用户的第1个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20151215/jenkins-user-habits-2.html">高效Jenkins用户的第2个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20160523/jenkins-user-habits-3.html">高效Jenkins用户的第3个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20161010/jenkins-user-habits-4.html">高效Jenkins用户的第4个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20161216/jenkins-user-habits-5.html">高效Jenkins用户的第5个习惯</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Training: MongoDB for Developers (Python)]]></title>
    <link href="http://euccas.github.io/20161205/mongodb-training-mongodb-for-developers-python.html"/>
    <updated>2016-12-05T13:56:45-08:00</updated>
    <id>http://euccas.github.io/20161205/mongodb-training-mongodb-for-developers-python</id>
    <content type="html"><![CDATA[<p>昨晚提交了MongoDB University的培训课程 <a href="https://university.mongodb.com/courses/M101P/about">M101P: MongoDB for Developers (Python)</a> 的最后一次测试，这历时七周的课程告一段落。这个课程虽然是属于入门级，但是它覆盖了MongoDB各个方面，有不错的课程结构。短时间内，可以让开发者掌握和MongoDB有关的日常开发中所需要掌握的大部分知识和技能。</p>

<p>在学习其他数据库时，也不妨参照这个结构来全面掌握。</p>

<ul>
  <li>
    <p><strong>Introduction and Overview</strong></p>
  </li>
  <li><strong>CRUD: Creating, Reading and Updating Data</strong>
    <ul>
      <li>Mongo shell</li>
      <li>Find, Insert, Update, Delete</li>
      <li>Query operators, update operators</li>
    </ul>
  </li>
  <li><strong>Schema Design</strong>
    <ul>
      <li>Live without constraints or transactions</li>
      <li>One to one relations, one to many relations, many to many relations</li>
      <li>Embedding, handle blobs</li>
    </ul>
  </li>
  <li><strong>Performance</strong>
    <ul>
      <li>Indexes</li>
      <li>Explain and profiling</li>
    </ul>
  </li>
  <li><strong>Aggregation Framework</strong>
    <ul>
      <li>Aggregation pipeline</li>
      <li>Aggregation expressions: sum, avg, addToSet, push, max, min, group,  project, match, text, sort, limit, skip, unwind, etc.</li>
    </ul>
  </li>
  <li><strong>Application Engineering</strong>
    <ul>
      <li>Write consistency</li>
      <li>Replication, create a replica set</li>
      <li>Failover and rollback</li>
      <li>Sharding</li>
    </ul>
  </li>
  <li><strong>Case Studies</strong>
    <ul>
      <li>Interview with MongoDB users from Facebook and Codecademy</li>
      <li>Discuss MongoDB usages in real life projects</li>
    </ul>
  </li>
</ul>

<p>我在课程期间的笔记和练习都保存在GitHub Repository - <a href="https://github.com/euccas/mongodb-for-developers-M101P">euccas/MongoDB-for-Developers-M101P</a></p>

<p>如果是偏重于Web开发，可以参加另一个培训课程:  <a href="https://university.mongodb.com/courses/M101JS/about">M101JS: MongoDB for Node.js Developers</a>. M101JS课程和M101P有类似的结构，区别在于开发语言从Python变为Node.js.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Tips]]></title>
    <link href="http://euccas.github.io/20161011/octopress-tips.html"/>
    <updated>2016-10-11T22:36:44-07:00</updated>
    <id>http://euccas.github.io/20161011/octopress-tips</id>
    <content type="html"><![CDATA[<p>使用Octopress搭建这个blog已经有一段时间了，记录几个使用中需要注意的Tips.</p>

<h1 id="tip-1-clone-repo">Tip 1: Clone Repo</h1>

<p>如果需要重新复制一份已经存在的blog repo，在重新复制的blog repo上继续发布更新blog，那么需要注意：</p>

<p>首先需要复制的repo是source branch.</p>

<p>如果repo的默认branch已经设定为source branch:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone &lt;repo url&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果repo的默认branch设定为master branch:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone &lt;repo url&gt;
</span><span class="line">git pull origin source</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后需要把master branch复制到<code>_deploy</code>目录。注意<code>_deploy</code>目录是在Octopress生成post的过程中必须存在的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone &lt;repo url&gt; _deploy
</span><span class="line">cd _deploy
</span><span class="line">git pull origin master</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="tip-2-push-changes-to-source">Tip 2: Push Changes to Source</h1>

<p>使用<code>rake gen_deploy</code>将改动发布到<code>master branch</code>之后，还需要把source的改动也提交到<code>source branch</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git push origin source</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="tip-3-execute-rake-commands">Tip 3: Execute Rake Commands</h1>

<p>如果因为<code>rake</code>版本问题造成<code>rake</code> command不能够在repo中执行，就需要使用<code>bundle exec rake</code>执行。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec rake new_post
</span><span class="line">bundle exec rake generate
</span><span class="line">bundle exec rake preview
</span><span class="line">bundle exec rake deploy</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="tip-4-errors-in-gendeploy">Tip 4: Errors in gen_deploy</h1>

<p><code>rake gen_deploy</code>的过程中，如果在<code>generate</code>步骤中出现错误（比如部分post的文本不符合markdown语法），一些情况下可能会造成generate目录中的文件被删除。而<code>gen_deploy</code>过程此时并不会结束，<code>deploy</code>会继续进行，这样最终的commit就会把原来已经发布的blog内容删除。防止出现这种问题的安全做法是分步执行<code>rake generate</code>和<code>rake deploy</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Additional Packages in WinPython]]></title>
    <link href="http://euccas.github.io/20161011/install-additional-packages-in-winpython.html"/>
    <updated>2016-10-11T17:11:51-07:00</updated>
    <id>http://euccas.github.io/20161011/install-additional-packages-in-winpython</id>
    <content type="html"><![CDATA[<p>For people who need use portable Python on Windows, <a href="https://winpython.github.io/">WinPython</a> is a good choice. WinPython is a free open-source portable distribution of Python. The project is hosted on <a href="https://github.com/winpython">github</a>. It is also a good alternative to <a href="http://portablepython.com/">Portable Python</a>, which is not being developed anymore.</p>

<p>In this post I’ll show you how could you install additional packages to WinPython.</p>

<h1 id="install-winpython">Install WinPython</h1>

<p>WinPython is portable. It means that you can download WinPython from the <a href="http://winpython.sourceforge.net/">WinPython download page</a>, add it to your system PATH, and start using it without any installation.</p>

<ul>
  <li>Unzip the downloaded WinPython Package to a local directory, eg. <code>C:\WinPython</code>.</li>
  <li>Add the local directory path to your system’s <code>PATH</code> variable. You can use Windows command <code>set</code> or <code>setx</code>.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   set PATH=C:\WinPython\;%PATH%</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now you can open a Windows cmd prompt, and test your installed python version.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">where python
</span><span class="line">&gt;&gt;&gt; C:\WinPython\python.exe</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="install-a-package">Install a package</h1>

<p>You can install a Python Package to WinPython using <code>pip</code>. If you have other versions of Python installed on your computer, you’ll need make sure the <code>pip</code> you use actually is the one WinPython provides.</p>

<p>Where is the <code>pip</code>?</p>

<p>It’s in the <code>Scripts</code> directory of the WinPython path.
For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">C:\WinPython\Scripts</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now you can use the WinPython <code>pip</code> to install additional Python packages.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;WinPython Path&gt;\Scripts\pip install &lt;package name&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If the installation successfully done, you will find the installed packages in WinPython’s library path.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;WinPython Path&gt;\Lib\site-packages\&lt;package name&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s it! Your Python package is ready to use!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效Jenkins用户的第4个习惯]]></title>
    <link href="http://euccas.github.io/20161010/jenkins-user-habits-4.html"/>
    <updated>2016-10-10T21:32:01-07:00</updated>
    <id>http://euccas.github.io/20161010/jenkins-user-habits-4</id>
    <content type="html"><![CDATA[<p>本文内容部分来源于<strong>Andrew Bayer</strong>发布在SlideShare上的 <a href="http://www.slideshare.net/andrewbayer/seven-habits-of-highly-effective-jenkins-users-2014-edition"><em>7 habits of highly productive Jenkins Users (2014 Edition)</em></a>.</p>

<h1 id="jenkinsplugin">习惯 4: 精选你所使用的Jenkins功能插件(Plugin)</h1>

<p>当你使用了越来越多的Jenkins功能插件时，就需要花一些时间和精力来维护和清理所有的功能插件。 因为当你安装了太多的Jenkins插件时，有可能会带来一些不好的效果，诸如减慢系统速度，占用多过资源，产生无效的记录文件等等。为了避免使用过多的Jenkins插件造成的各种问题，你应该注意下面几个方面。</p>

<h2 id="section">1. 只安装你真正需要的功能插件</h2>

<p>在安装一个功能插件之前，你都应该问一个问题：我真的需要这个插件吗？</p>

<p>如果你并不打算真正使用一个插件，就不要安装在Jenkins Master上。</p>

<p>不同的插件可能包含有一些类似的功能，你所需要完成的事情，也不仅仅只有一个插件可以实现。这时就需要在一些功能类似的插件中选择你真正所需的。</p>

<p>功能插件可能会给Jenkins service的稳定性造成预期之外的影响，并且可能增加系统的负载和每一个job运行的时间。充分考虑到这些可能的负作用，尽量避免安装你并不是真正需要的插件。</p>

<h2 id="section-1">2. 清理旧的插件和数据</h2>

<p>定期检查和删除你不再使用的Jenkins功能插件。</p>

<p>在Jenkins管理页面 (Manage Jenkins) 中，注意关于old data的描述。当你删除一个Jenkins插件后，要把有关的历史数据也同时删除。</p>

<p>及时删除不需要的数据，可以加速Jenkins Master启动时加载配置和所有jobs的过程。</p>

<h2 id="section-2">3. 建立你的必备插件列表</h2>

<p>根据你的使用需求和经验，选择你所需要的Jenkins功能插件。这些功能插件应该是满足你所需要的功能，并且性能良好稳定。为你的这些插件建立一个列表并且维护它。</p>

<p><strong>Andrew Bayer</strong>推荐了一些他所使用的Jenkins功能插件。所有这些提供的插件都可以通过Jenkins插件管理功能(Manage Plugins)来查找和安装。</p>

<ul>
  <li>
    <p><strong>Job Config History</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/JobConfigHistory+Plugin">插件介绍</a></li>
      <li>功能：保存job configuration的历史，记录每一次改动的信息。对于job configuration每一次的改变，保存一个config.xml文件。提供overview页面，方便查看全部的改变。可以对比查看两次改动之间的区别。</li>
    </ul>
  </li>
  <li>
    <p><strong>Static Analysis Plugins</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Static+Code+Analysis+Plug-ins">插件介绍</a></li>
      <li>功能：处理各种静态代码分析结果数据，生成可视化报告（包括趋势图，Build Summary，结果汇总分析等等）</li>
    </ul>
  </li>
  <li>
    <p><strong>xUnit</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin">插件介绍</a></li>
      <li>功能：生成和发布单元测试报告。可以把各种测试结果转化为jnit格式。</li>
    </ul>
  </li>
  <li>
    <p><strong>Parameterized Trigger</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Trigger+Plugin">插件介绍</a></li>
      <li>功能：参数化配置trigger build. 对于一个build job，可以定义多个配置，用于不同的条件和参数。</li>
    </ul>
  </li>
  <li>
    <p><strong>Conditional Build Step</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Conditional+BuildStep+Plugin">插件介绍</a></li>
      <li>功能：可以灵活配置的build step。通常和Parameterized Trigger配合使用。</li>
    </ul>
  </li>
  <li>
    <p><strong>Tool Environment</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Tool+Environment+Plugin">插件介绍</a></li>
      <li>功能：让你可以自定义使用Jenkin tool的自动安装。在一个job的执行过程中安装指定的tools，供这个job使用。</li>
    </ul>
  </li>
  <li>
    <p><strong>EnvInject</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/EnvInject+Plugin">插件介绍</a></li>
      <li>功能：帮助你管理环境变量，包括删除Jenkins Java process引入的一些环境变量，在一个node启动时设置所需的环境变量，设置密码值等等。</li>
    </ul>
  </li>
  <li>
    <p><strong>Rebuild</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Rebuild+Plugin">插件介绍</a></li>
      <li>功能：可以rerun每一个被执行过的parameterized build，保存了parameterized build每一次使用的参数，并且允许你在执行rebuild时修改这些参数。</li>
    </ul>
  </li>
  <li>
    <p><strong>Build Timeout</strong></p>

    <ul>
      <li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Build-timeout+Plugin">插件介绍</a></li>
      <li>功能：设置build的时间限制，当一个build时间超过预设时，会自动被停止。这个插件不能用于Jenkins pipelines.</li>
    </ul>
  </li>
</ul>

<p><strong>阅读同主题内容</strong></p>

<ul>
  <li><a href="http://euccas.github.io/blog/20151210/jenkins-user-habits-1.html">高效Jenkins用户的第1个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20151215/jenkins-user-habits-2.html">高效Jenkins用户的第2个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20160523/jenkins-user-habits-3.html">高效Jenkins用户的第3个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20161010/jenkins-user-habits-4.html">高效Jenkins用户的第4个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20161216/jenkins-user-habits-5.html">高效Jenkins用户的第5个习惯</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GTAC: The Uber Challenge of Cross-Application Testing]]></title>
    <link href="http://euccas.github.io/20160928/the-uber-challenge-of-cross-application-testinng.html"/>
    <updated>2016-09-28T23:17:30-07:00</updated>
    <id>http://euccas.github.io/20160928/the-uber-challenge-of-cross-application-testinng</id>
    <content type="html"><![CDATA[<p>Inspired by Matt Cutts’ TED talk: <a href="https://www.ted.com/talks/matt_cutts_try_something_new_for_30_days?language=en">Try something new for 30 days</a>, I’m starting a “30 Days of GTAC” project. Google’s Test Automation Conference <a href="https://developers.google.com/google-test-automation-conference/">GTAC</a> is an annual test automation conference which brings together engineers from industry and academia to discuss advances in test automation and related engineering tools. In my “30 Days of GTAC” project, I’ll review the topics presented on GTAC. My goal is having a better and deeper understanding in modern testing technologies, methodologies, strategies, and practices.</p>

<p>Get it started! Day#1 topic is:</p>

<p><strong>The Uber Challenge of Cross-Application/Cross-Device Testing</strong></p>

<ul>
  <li>Presenter: Apple Chow (Uber), Bian Jiang (Uber)</li>
  <li><a href="https://www.youtube.com/watch?v=p6gsssppeT0&amp;list=PLSIUOFhnxEiCWGsN9t5A-XOhRbmz54IS1&amp;index=3">Video</a></li>
  <li><a href="https://docs.google.com/presentation/d/1vYXhkvgLKun72Ix91LQDDWZQdcY5VOBqKVvI1Y6riYo/pub">Slides</a></li>
</ul>

<p><strong>My takeaways</strong></p>

<ul>
  <li>The challenge: End-to-end tests require cross application communication (between rider app and driver app)</li>
  <li>Uber’s solution: Octopus
    <ul>
      <li>Octopus coordinates communication across different apps running on different devices</li>
      <li>This solution can be adopted for any tests that require coordination/communication across different apps or devices</li>
    </ul>
  </li>
  <li>What makes testing Uber’s mobile apps significantly different from testing Google Maps?</li>
  <li>Why (built) Octopus? Unified (iOS and Android). Extensible (Integrate with different UI testing frameworks). Parallelized. Signaling (enabling cross-app and cross-device testing).</li>
  <li>What does Octopus do? Prepare test targets. Run tests (handles signaling). Create test results reports. Pull test artifacts. Perform clean ups. All from simple command line.</li>
  <li>Signaling between driver test and rider test: Conducted with Test Host to improve the consistency. API readSignal (blocking), writeSignal (nonblocking). Test hosts and test targets are connected via USB (reliable).</li>
  <li>Apple Chow wrote about Octopus on <a href="http://eng.uber.com/rescued-by-octopus/">Uber Engineering</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dunder Methods in Python]]></title>
    <link href="http://euccas.github.io/20160920/python-dunder-methods.html"/>
    <updated>2016-09-20T21:28:51-07:00</updated>
    <id>http://euccas.github.io/20160920/python-dunder-methods</id>
    <content type="html"><![CDATA[<p>In Python, we sometimes see method names with <code>__</code> around, such as the <code>__init__</code> method that every Class has. These methods are “dunder” methods (“dunder” stands for “double under” or “double underscore”). Dunder methods in Python are used for operator overloading and customizing behavior of other functions.</p>

<p>Sometimes dunder methods are also called “magic methods” because they are usually called by Python under the hood. But they are not really magical, you can define dunder methods to customize the behavior of your own classes.</p>

<h1 id="examples-of-dunder-methods">Examples of Dunder Methods</h1>

<p>In the following example, we can see three dunder methods:</p>

<ul>
  <li><code>__init__</code> method: is called to initialize the class</li>
  <li><code>__str__</code> method: is called when converting the object to a human-readable string</li>
  <li><code>__repr__</code> method: is called when converting the object to a developer-readable string</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Flower:
</span><span class="line">    def __init__(self, color='red'):
</span><span class="line">	    self.color = color
</span><span class="line">
</span><span class="line">	def __str__(self):
</span><span class="line">		return "Flower in color {color}".format(color=self.color)
</span><span class="line">
</span><span class="line">	def __repr__(self):
</span><span class="line">	return "Flower(color={})".format(self.color)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In Python, many dunder methods are implemented and used for operations such as arithmetic operators, comparison operators, truthiness, etc. The following are a few examples:</p>

<p><strong>Arithmetic Operators</strong></p>

<ul>
  <li><code>+</code> : <code>__add__</code></li>
  <li><code>-</code> : <code>__sub__</code></li>
  <li><code>*</code> : <code>__mul__</code></li>
  <li><code>/</code> : <code>__div__</code></li>
</ul>

<p><strong>Comparison Operators</strong></p>

<ul>
  <li><code>x &lt; y</code> : <code>x.__lt__(y)</code></li>
  <li><code>x &lt;= y</code> : <code>x.__le__(y)</code></li>
  <li><code>x &gt; y</code> : <code>x.__gt__(y)</code></li>
  <li><code>x &gt;= y</code> : <code>x.__ge__(y)</code></li>
  <li><code>x == y</code> : <code>x.__eq__(y)</code></li>
  <li><code>x != y</code> : <code>x.__ge__(y)</code></li>
</ul>

<p>If you know about Bash shell, you may notice the name of these dunder methods are very similar to the operators in Bash.</p>

<p><strong>Truthiness</strong></p>

<ul>
  <li><code>bool(x)</code> : <code>x.__bool__()</code></li>
</ul>

<h1 id="use-dunder-methods-to-customize-class-behaviors">Use Dunder Methods to Customize Class Behaviors</h1>

<p>Dunder methods provide a way for our class to customize operators and other built-in Python behavior for our objects. In the following two examples, I’ll use dunder methods to overload arithmetic operators, and implement a dictionary that can be used with both attribute and item syntax.</p>

<h2 id="example-1-overload-arithmetic-operators">Example 1: Overload Arithmetic Operators</h2>

<p>Make an <code>is_callable</code> function to check if an object type is callable.</p>

<p>Example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt;&gt;&gt; is_callable(sorted)
</span><span class="line">True
</span><span class="line">&gt;&gt;&gt; is_callable(str)
</span><span class="line">True
</span><span class="line">&gt;&gt;&gt; is_callable(4)
</span><span class="line">False</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Source Code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def is_callable(obj):
</span><span class="line">
</span><span class="line">try:
</span><span class="line">	obj.__call__
</span><span class="line">	# hasattr(str, '__call__')
</span><span class="line">	# getattr(str, '__call__')
</span><span class="line">except AttributeError:
</span><span class="line">	return False
</span><span class="line">else:
</span><span class="line">	return True</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="example-2-class-easydict">Example 2: Class EasyDict</h2>

<p>Make an <code>EasyDict</code> class that can be used with both attribute and item syntax.</p>

<p>Example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt;&gt;&gt; a = EasyDict()
</span><span class="line">&gt;&gt;&gt; a['shoe'] = "blue"
</span><span class="line">&gt;&gt;&gt; a.shoe
</span><span class="line">"blue"
</span><span class="line">&gt;&gt;&gt; a['shoe']
</span><span class="line">"blue"
</span><span class="line">&gt;&gt;&gt; a.car = "green"
</span><span class="line">&gt;&gt;&gt; a['car']
</span><span class="line">"green"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Source Code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class EasyDict:
</span><span class="line">	def __init__(self):
</span><span class="line">    	pass
</span><span class="line">
</span><span class="line">   		def __getitem__(self, item):
</span><span class="line">    	return self.__dict__[item]
</span><span class="line">
</span><span class="line">	def __setitem__(self, key, value):
</span><span class="line">    	self.__dict__[key] = value
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Case Study: Check on a Commit According to Its Included Files]]></title>
    <link href="http://euccas.github.io/20160815/case-study-check-on-a-commit-according-to-the-included-files.html"/>
    <updated>2016-08-15T19:43:21-07:00</updated>
    <id>http://euccas.github.io/20160815/case-study-check-on-a-commit-according-to-the-included-files</id>
    <content type="html"><![CDATA[<h1 id="problem-description">Problem Description</h1>

<p>Suppose one task in your Continuous Integration (CI) pipeline is triggered on every commit to the project repository. Some the files in the repository require passing the check of the CI task, while some other files do not require passing the check. What should the CI task do to decide if it is needed to perform the needed checking on the commit?</p>

<h1 id="design-the-ci-task">Design the CI task</h1>

<p>The CI task need have the ability to analyze the files included in the commit, and decide whether the commit requires passing a check, or not. We need tell the CI task which files require passing a check through configurations.</p>

<h2 id="configuration">Configuration</h2>

<p>There are multiple ways to design the configurations, such as:</p>

<ol>
  <li>
    <p>Only list the files or paths requiring the check</p>
  </li>
  <li>
    <p>Only list the files or paths do not require the check</p>
  </li>
  <li>
    <p>List the files or paths requiring the check, and also list the subset files or paths that do not require the check</p>
  </li>
</ol>

<p>The 3rd way probably is the optimal one because it provides the flexibility for you to put a large scope path as the files need check, and then exclude a subset from the large scope path. For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">check: my_project/dev/
</span><span class="line">
</span><span class="line">skip: my_project/dev/test/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To apply the 3rd method, the configuration of the CI task will include two types: inclusion, and exclusion.</p>

<h2 id="analyze-files-in-the-commit">Analyze files in the commit</h2>

<p>The needed analysis process of the CI task is:</p>

<ul>
  <li>
    <p>If none of the files in the commit matches the inclusion in configuration, skip the check</p>
  </li>
  <li>
    <p>If all the files in the commit matching the inclusion in configuration also matching the exclusion in configuration, skip the check</p>
  </li>
  <li>
    <p>In other cases, the check for this commit is needed</p>
  </li>
</ul>

<p>The complexity of the given process is <em>O(n<sup>2</sup>)</em>.</p>

<p>A mistake that could happen in the analysis process is when you analyze the exclusion cases, you should do the analysis only on the files that match inclusion configuration, which is a subset of files in the commit.</p>

<h1 id="example-with-the-python">Example with the Python</h1>

<p>Here is the code written in Python for demonstrating the case discussed above.</p>

<ul>
  <li>
    <p><code>commit_files</code>: a list containing all the files in the commit</p>
  </li>
  <li>
    <p><code>config</code>: a dictionary containing inclusion and exclusion configurations</p>
  </li>
  <li>
    <p><code>config['include']</code>: a list containing all the files or paths need check</p>
  </li>
  <li>
    <p><code>config['exclude']</code>: a list containing the files or paths do not need check</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">def analyze_commit_files(commit_files, config):
</span><span class="line">
</span><span class="line">    need_check = False    
</span><span class="line">
</span><span class="line">    
</span><span class="line">
</span><span class="line">    # commit need_check is False if:    
</span><span class="line">
</span><span class="line">    # - No files in this commit    
</span><span class="line">
</span><span class="line">    # - Config does not have any 'include' defined    
</span><span class="line">
</span><span class="line">    if commit_files is None or len(commit_files) == 0:
</span><span class="line">
</span><span class="line">        return need_check
</span><span class="line">
</span><span class="line">    if not 'include' in config or config['include'] is None or len(config['include']) == 0:
</span><span class="line">
</span><span class="line">        return need_check
</span><span class="line">
</span><span class="line">    # commit need_check is False if:    
</span><span class="line">
</span><span class="line">    # - All file in the commit matches the configured inclusion, OR    
</span><span class="line">
</span><span class="line">    # - All files in the commit that matches the inclusion, also match the configured exclusion    
</span><span class="line">
</span><span class="line">    # First check inclusion    
</span><span class="line">
</span><span class="line">    files_need_check = list()
</span><span class="line">
</span><span class="line">    for cf in commit_files:
</span><span class="line">
</span><span class="line">        for check_file in config['include']:            
</span><span class="line">
</span><span class="line">            if re.search(check_file, cf):                            
</span><span class="line">
</span><span class="line">                files_need_check.append(cf)
</span><span class="line">
</span><span class="line">    
</span><span class="line">
</span><span class="line">    if len(files_need_check) &gt; 0:
</span><span class="line">
</span><span class="line">        # Check skip_path
</span><span class="line">
</span><span class="line">        if not 'exclude' in config or config['exclude'] is None or len(config['exclude']) == 0:
</span><span class="line">
</span><span class="line">            need_check = True
</span><span class="line">
</span><span class="line">         else:
</span><span class="line">
</span><span class="line">             for cf in files_need_check:
</span><span class="line">
</span><span class="line">                 for skip_file in config['exclude']:                         
</span><span class="line">
</span><span class="line">                    if not re.search(skip_file, cf):                       
</span><span class="line">
</span><span class="line">                        need_check = True
</span><span class="line">
</span><span class="line">                        break
</span><span class="line">
</span><span class="line">    return need_check
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Unittest: Handle the Command Line Arguments]]></title>
    <link href="http://euccas.github.io/20160807/python-unittest-handle-command-line-arguments.html"/>
    <updated>2016-08-07T11:57:32-07:00</updated>
    <id>http://euccas.github.io/20160807/python-unittest-handle-command-line-arguments</id>
    <content type="html"><![CDATA[<p>In the previous post about <a href="http://euccas.github.io/blog/20160711/start-unit-testing-in-python.html">Python Unittest</a>, I wrote about the basic steps needed for setting up unit testing for your Python program with the <code>unittest</code> module. In this post, I’ll discuss about handling the command line parameters that your program need while you’re using Python <code>unittest</code>.</p>

<p>Unit testing is meant for testing basic functionality of the application. The target of <a href="https://en.wikipedia.org/wiki/Unit_testing">Unit testing</a> is expected to be each function of your program. When your program has command line arguments, ideally the unit tests should not accept arguments from the command line because unit tests are supposed to be very specific and not testing on the <a href="https://en.wikipedia.org/wiki/Integration_testing">Integration level</a> (i.e. across multiple functions in your program).</p>

<p>So the way I use to handle the command line arguments can be summarized as:</p>

<ul>
  <li>Refactor your program to have the arguments parsing as a function</li>
  <li>Refactor your program to handle the arguments parsing differently when doing unit testing</li>
  <li>In the unit tests, set the arguments and pass them directly to the functions under test</li>
</ul>

<p>The following is a demo Python project I built to demonstrate handling command line arguments when using <code>unittest</code>.</p>

<h2 id="myapppy">myapp.py</h2>

<pre><code>#!/usr/bin/env python

import sys, os.path, re
import argparse

class myApp():

    EXIT_PASS, EXIT_FAIL = 0, 1

    def __init__(self, mode = 'normal', test_param = None):
        # Validate and process argument options
        self.parse_args(mode, test_param)
        # Initialize database connection
        self.app_name = self.get_app_name(self.name)

    def parse_args(self, mode, test_param):
        if mode == 'unittest':
            if test_param is None:
                print("Missing test param")
                self.app_exit('fail')

            self.name = test_param['app_name']
            self.verbose = test_param['verbose']
        else:
            parser = argparse.ArgumentParser(description='myApp: A demo project')
            parser.add_argument('-n', '--name', help='Name of myApp', required=True)
            parser.add_argument('--verbose', action='store_true', help='Verbose mode with more information printed')

            args = parser.parse_args()

            self.name = args.name
            self.verbose = args.verbose

    def app_exit(self, status):
        if status.lower() == 'pass':
            print("** App Exit Status: PASS \n")
            exit(self.EXIT_PASS)
        elif status.lower() == 'skip':
            print("** App Exit Status: SKIP \n")
            exit(self.EXIT_PASS)
        else:
            print("** App Exit Status: FAIL \n")
            exit(self.EXIT_FAIL)

    def get_app_name(self):
        app_name = self.name

        return app_name

if __name__ == '__main__':
    app = myApp()
</code></pre>

<h2 id="testmyapppy">test_myapp.py</h2>

<pre><code>#!/usr/bin/env python

import sys, os.path, re
import argparse
import unittest

bin_path = os.path.dirname(os.path.realpath(__file__))
lib_path = os.path.abspath(bin_path)
sys.path.insert(0, lib_path)

import myApp

class myAppTestCase(unittest.TestCase):

    def setUp(self):
        mode = 'unittest'
        test_param = {
            'name': 'Test App',
            'verbose': True
        }
        self.app = myapp.myApp(mode, test_param)

    def test_app_name(self):
        self.assertEqual(self.app.get_app_name, 'Test App', 'Wrong App Name')

    def tearDown(self):
        print('Bye Test')

if __name__ == '__main__':
    unittest.main()
</code></pre>

]]></content>
  </entry>
  
</feed>
