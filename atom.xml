<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[euccas.github.io]]></title>
  <link href="http://euccas.github.io/atom.xml" rel="self"/>
  <link href="http://euccas.github.io/"/>
  <updated>2017-11-26T23:17:34-08:00</updated>
  <id>http://euccas.github.io/</id>
  <author>
    <name><![CDATA[euccas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CPU Profiling Tools on Linux]]></title>
    <link href="http://euccas.github.io/blog/20170827/cpu-profiling-tools-on-linux.html"/>
    <updated>2017-08-27T14:23:21-07:00</updated>
    <id>http://euccas.github.io/blog/20170827/cpu-profiling-tools-on-linux</id>
    <content type="html"><![CDATA[<p>Profiling is an effective method to provide measurements for the performance of software applications. With profiling, you get fine grained information for the components of an application, such as how often a function is called, how long a routine takes to execute and how much time are spent of different spots in the code. With these information, you could identify the performance bottlenecks and the poorly implemented parts in a software application, and find effective methods to improve them.</p>

<p>In this post I’ll write a brief summary of two profiling methods: <strong>Instrumentation</strong> and <strong>Sampling</strong>, and four CPU profiling tools on Linux: <strong>perf</strong>, <strong>gprof</strong>, <strong>Valgrind</strong> and Google’s <strong>gperftools</strong>.</p>

<h1 id="profiling-methods">Profiling Methods</h1>

<p>Different profiling methods use different ways to measure the performance of an application when it is executed. <strong>Instrumentation</strong> and <strong>Sampling</strong> are the two categories that profiling methods fall into.</p>

<h2 id="instrumentation">Instrumentation</h2>

<p>Instrumentation method inserts special code at the beginning and end of each routine to record when the routine starts and ends. The time spent on calling other routines within a routine may also be recorded. The profiling result shows the actual time taken by the routine on each call.</p>

<p>There are two types of instrumenting profiler tools: <strong>source-code modifying</strong> profilers and <strong>binary profilers</strong>. Source-code modifying profilers insert the instrumenting code in the source code, while the binary profilers insert instrumentation into an application’s executable code once it is loaded in memory.</p>

<p>The good thing of instrumentation method is it gives you the actual time. The inserted instrumentation code (timer calls) take some time themselves. To reduce the impact of that, at the start of each run profilers measure the overhead incurred from the instrumenting process, and later subtract this overhead from the measurement result. But the instrumenting process could still significantly affect an application’s performance in some cases, for example when the routine is very short and frequently called, as the inserted instrumentation would disturb the way the routine executes in the CPU.</p>

<h2 id="sampling">Sampling</h2>

<p>Sampling measures applications without inserting any modifications. Sampling profilers record the executed instruction when the operating system interrupts the CPU at regular intervals to execute process switches, and correlates the recorded execution points with the routines and source code during the linking process. The profiling result shows the frequency with which a routine and source line is executing during the application’s run.</p>

<p>Sampling profilers causes little overhead to the application run process, and they work well on small and often-called routines. One drawback is the evaluations of time spent are statistical approximations rather than actual time. Also sampling could only tell what routine is executing currently, not where it was called from. As a result, sampling profilers can’t report call traces of an application.</p>

<h1 id="cpu-profiling-tools-on-linux">CPU Profiling Tools on Linux</h1>

<h2 id="perf">perf</h2>

<p>The <a href="https://perf.wiki.kernel.org/index.php/Main_Page"><strong>perf</strong></a> tool is provided by Linux kernel (2.6+) for profiling CPU and software events. You can get the tool installed by:</p>

<ul>
  <li>Ubuntu: install <em>linux-tools_common</em></li>
  <li>Debian: install <em>linux-base</em></li>
  <li>Arch: install <em>perf-utils</em></li>
  <li>Fedora: install <em>perf</em></li>
</ul>

<p><code>perf</code> is based on the perf_events system, which is based on event-based sampling, and it uses CPU performance counters to profile the application. It can instrument hardware counters, static tracepoints, and dynamic tracepoints. It also provide per task, per CPU and per-workload counters, sampling on top of these and source code event annotation. It does <em>not</em> instrument the code, so that it has a really fast speed and generates precise results.</p>

<p>You can use <code>perf</code> to profile with <code>perf record</code> and <code>perf report</code> commands:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">perf record -g &lt;app&gt; &lt;options&gt;
</span><span class="line">perf report</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>perf record</code> command collects samples and generates an output file called <code>perf.data</code>. This file can then be analyzed using <code>perf report</code> and <code>perf annotate</code> commands. Sampling frequency can be specified with <code>-F</code> option. As an example, <code>perf record -F 1000</code> means 1000 samples per second.</p>

<h2 id="gprof">gprof</h2>

<p>GNU profiler <a href="https://sourceware.org/binutils/docs/gprof/"><strong>gprof</strong></a> tool uses a hybrid of instrumentation and sampling. Instrumentation is used to collect function call information, and sampling is used to gather runtime profiling information.</p>

<p>Using <code>gprof</code> to profile your applications requires the following steps:</p>

<ol>
  <li>Compile and link the application with <code>-pg</code> option</li>
  <li>Execute the application to generate a profile data file, default file name is <code>gmon.out</code></li>
  <li>Run <code>gprof</code> command to analyze the profile data</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">g++ -pg myapp.cpp -o myapp.o
</span><span class="line">./myapp.o
</span><span class="line">gprof myapp.o  </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>gprof</code> command prints a flat profile and a call graph on standard output. The flat profile shows how much time was spent executing directly in each function. The call graph shows which functions called which others, and how much time each function used when its subroutine calls are included. You can use the supported options <a href="https://ftp.gnu.org/old-gnu/Manuals/gprof-2.9.1/html_mono/gprof.html#SEC4">listed here</a> to control <code>gprof</code> output styles, such as enabling line-by-line analysis and annotated source.</p>

<h2 id="valgrind-callgrind">Valgrind Callgrind</h2>

<p><a href="http://www.valgrind.org/"><strong>Valgrind</strong></a> is an instrumentation framework for building dynamic analysis tools. Valgrind distribution includes six production-quality tools that can detect memory issues and profile programs. <strong>Callgrind</strong>, built as an extension to <strong>Cachegrind</strong>, provides function call call-graph. A separated visualisation tool <a href="http://kcachegrind.sourceforge.net/cgi-bin/show.cgi/KcacheGrindIndex"><strong>KCachegrind</strong></a> could also be used to visualize Callgrind’s output.</p>

<p>Valgrind is a CPU emulator. The technology behind Valgrind is Dynamic binary instrumentation (DBI), whereby the analysis code is added to the original code of the client program at run-time. The profiling tool Callgrind is simulation based, it uses Valgrind as a runtime instrumentation framework. The following two papers explain how Valgrind and Callgrind work in detail.</p>

<ul>
  <li><a href="http://www.valgrind.org/docs/valgrind2007.pdf">Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation (<em>Nicholas Nethercote and Julian Seward</em>)</a></li>
  <li><a href="http://www.valgrind.org/docs/callgrind2004.pdf">A Tool Suite for Simulation Based Analysis of Memory Access Behavior (<em>Josef Weidendorfer, Markus Kowarschik and Carsten Trinitis</em>)</a></li>
</ul>

<p>You need use the following commands to profile your program with <code>valgrind</code>:</p>

<ol>
  <li>Build your program as usual, no need adding any special compiler or linker flags</li>
  <li>Execute the program with callgrind tool to generate a profile data file, default file name is <code>callgrind.out.&lt;pid&gt;</code></li>
  <li>View the generated profile data with <code>callgrind_annotate</code> or <code>kcachegrind</code> tool</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">g++ myapp.cpp -o myapp.o 
</span><span class="line">valgrind --tool=callgrind myapp.o
</span><span class="line">callgrind_annotate callgrind.out.&lt;pid&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="gperftools">gperftools</h2>

<p><a href="https://github.com/gperftools/gperftools"><strong>gperftools</strong></a>, originally “Google Performance Tools”, is a collection of tools for analyzing and improving performance of multi-threaded applications. It offers a fast malloc, a thread-friendly heap-checker, a heap-profiler, and a cpu-profiler. gperftools was developed and tested on x86 Linux systems, and it works in its full generality only on those systems. Some of the libraries and functionality have been ported to other Unix systems and Windows.</p>

<p>To use the CPU profiler in gperftools, you need:</p>

<ol>
  <li>Install the gperftools, following the instructions <a href="https://github.com/gperftools/gperftools">here</a></li>
  <li>Include gperftools header file in your application’s source files, and compile the application</li>
  <li>Link the library into an application with <code>-lprofiler</code></li>
  <li>Set enrionement variable <code>CPUPROFILE</code>, then run the application</li>
  <li>Analyze the output with <code>pprof</code> commands</li>
</ol>

<p>Include gperftools header files in your source file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#include "gperftools-2.6.1/src/gperftools/profiler.h"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Link with <code>-lprofiler</code>, <code>profiler</code> is in the installation directory of <code>gperftools</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">g++ -DWITHGPERFTOOLS -lprofiler -g myapp.cpp -o myapp.o</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Set CPUPROFILE environment variable, which controls the location of profiler output data file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">export CPUPROFILE=./prof.out</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Run <code>pprof</code> commands to analyze the profiling result:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pprof --text &lt;app&gt; ./prof.out # text output
</span><span class="line">pprof --gv &lt;app&gt; ./prof.out # graphical output, requires gv installed</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook Infrastructure: Streaming Video Engine (SVE)]]></title>
    <link href="http://euccas.github.io/blog/20170627/facebook-infrastructure-streaming-video-engine-sve.html"/>
    <updated>2017-06-27T22:16:02-07:00</updated>
    <id>http://euccas.github.io/blog/20170627/facebook-infrastructure-streaming-video-engine-sve</id>
    <content type="html"><![CDATA[<p>In last year’s <a href="https://developers.facebook.com/videos/?category=f8_2016"><strong>Facebook F8 conference</strong></a>, Sachin Kulkarni, who worked on Facebook’s Video Infrastructure, gave a talk (<a href="https://developers.facebook.com/videos/f8-2016/inside-look-at-facebook-media-infrastructure/">watch it here</a>) to introduce the design of Facebook’s <strong>Streaming Video Engine System (SVE)</strong>. I found this talk particularly interesting because it revealed, in a very well structured, concise yet informative way, how Facebook infrastructure team came up with a solution to build a video system solving user frustrations by reviewing the end-to-end process, and how such a design meet the goal of being <strong>fast</strong>, <strong>flexible</strong>, <strong>scalable</strong>, and <strong>efficient</strong>. After watching the presentation video for a few times, I thought it would be helpful to write down some notes here, for my own reviewing in the future, and for people who might be interested in Facebook’s media infrastructure.</p>

<p>Sharing on Facebook started from largely text, and quickly changed to be largely photos. Since 2014, more videos started to be posted and shared among users. The challenge was, building a video processing system is much harder than building a text or image processing system. Videos are greedy, they will consume all your resources: CPU, memory, disk, network, and anything else.</p>

<p>Before building the Streaming Video Engine system, the team started by reviewing Facebook’s existing video uploading and processing process, which was slow and not scalable. They found several problems need change or improvement:</p>

<ul>
  <li>No unified clients</li>
  <li>Several disk reads and writes in the critical path</li>
  <li>Was doing serial processing throughout</li>
  <li>Read a video as one single big file, instead of splitting it up to chunks</li>
</ul>

<p>The new Streaming Video Engine (SVE) is expected to solve the aforementioned problems, and to meet the four design goals:</p>

<ul>
  <li>Fast: make users upload their videos super fast</li>
  <li>Flexible: usable for different Facebook products</li>
  <li>Scalable: everything at Facebook has to scale</li>
  <li>Efficient: storage efficiency, processing efficiency, and more importantly consume less bytes of users’ data plan</li>
</ul>

<!--more-->

<p>These four design goals, in my opinion, are also the most common goals applicable to most engineering infrastructure systems.</p>

<p>Let’s take a deep dive to see how SVE was designed to meet these goals.</p>

<h1 id="fast">Fast</h1>

<ul>
  <li>First step is build a common library (for video uploading) that could be used for the clients cross platforms (Web, Mobile, Android, etc.). With the common library, optimizations on video uploading can be applied to all platforms.</li>
  <li>The uploading library has functions to split a video by GOP (Group of Pictures, a GOP roughly is a scene in the video) alignment. So any given video can be split to segments, which can have multiple GOPs.</li>
  <li>Uploading process starts as soon as the clients split a video into segaments. The <strong>client</strong> uploads one segment a time to the <strong>web server</strong>.</li>
  <li>Web server sends out segments to the <strong>preprocessor</strong>, which is a write-through cache.</li>
  <li>Proprocessor handles:
    <ul>
      <li>Normalize the video (segment) if it needs to</li>
      <li>Notify the <strong>scheduler</strong> that there are video segments available to be encoded</li>
      <li>Write the video (segment) to the <strong>original storage</strong></li>
      <li>Further split the video segment into GOPs</li>
    </ul>
  </li>
  <li>Scheduler will find workers to encode videos. Multiple works can be utilized and each worker will process one or multiple GOPs.</li>
  <li>Overlapped upload and encoding process: While proprocessor, scheduler and works are working, the uploading process is still ongoing. Clients continues splitting videos into segments and uploading to the web server.</li>
</ul>

<p><img class="center" src="http://euccas.github.io/images/post_images/2017/20170627-fb_00.png" width="600" /></p>

<p>With this design, the process speedup reached 2.3x (small videos &lt; 3MB) ~ 9.3x (large videos &gt; 1G).</p>

<h1 id="flexible">Flexible</h1>

<ul>
  <li>The key insight that allows SVE to be flexible is, all the video processing pipelines can be represented as a DAG (Directed Acyclic Graph).</li>
  <li>Arbitrary dependencies can be added between the tasks in the video processing pipepline. The added tasks can be executed in parallel while the main pipeline tasks are running.</li>
  <li>SVE provides very simple API functions for the video pipeline (Ideally, you can add a video processing pipeline in your product in less than 10 lines of code).</li>
</ul>

<p><img class="center" src="http://euccas.github.io/images/post_images/2017/20170627-fb_01.png" width="600" /></p>

<h1 id="scalable">Scalable</h1>

<ul>
  <li>SVE was designed to prepare for overloads, such as handling the worldwide uploading “spike” on New Year’s Eve (could be 3x video uploads).</li>
  <li>Building a scalable system is relevant only when the system is <strong>robust</strong>. When the system gets overloaded, it must <strong>gracefully degrade</strong>. It cannot crash and burn.</li>
  <li>Prepare for overload along two dimensions: at the pipeline level, and the task level.</li>
  <li>Pipeline level, when uploads overwhelm the system:
    <ul>
      <li>Do not cache original videos in upload: Preprocessor stops caching original videos. Workers then need fetch videos from the original storage, not from preprocessor. The cost here is disk latency is added to the critical path.</li>
      <li>Delay pipeline generation for incoming video. Distinguish the critical video pipeline requests and the non-critical ones, then delay the non-critical ones.</li>
      <li>Reroute traffic to a different (less busy) region (Asia, Europe, US west, etc.)</li>
    </ul>
  </li>
  <li>Task level (the tasks executed by <strong>workers</strong> in the pipeline), when too many tasks are running:
    <ul>
      <li>Push back non latency-sensitive jobs</li>
      <li>Turn off A/B tests, which try to figure out the best encoding for the given video</li>
      <li>Add more workers (this requires making it easy to add capacity to SVE)</li>
    </ul>
  </li>
</ul>

<h1 id="efficient">Efficient</h1>

<ul>
  <li>The high level problem statement here is: If we could use 100% CPU, how can we make the encoded video as small as possible?</li>
  <li>Find the optimal encoding settings to get the best balance between encoded video file size and time spent on encoding. The difficult part is modern encoders can have hundreds of settings for one video. Chance of picking optimal combination is extremely low.</li>
  <li>The adopted solution is:
    <ul>
      <li>Categorize each scene such as “minimal motion”, “rapid movement”, and “complex crowded scene”.</li>
      <li>Build a Neural Network Model and a large training data set to train the network.</li>
      <li>In SVE, video scene segments are sent to a Fingerprint generator, which generates fingerprints and sends them to the Neural Network Model.</li>
      <li>The neural network figures out optimal encoding settings (could be multiple) for each scene, and sends the encoding settings to encoders.</li>
      <li>the encoder takes the settings, and encodes the video scenes in multiple ways. Then discard the encoded videos which are below quality bar.</li>
    </ul>
  </li>
</ul>

<p><img class="center" src="http://euccas.github.io/images/post_images/2017/20170627-fb_02.png" width="600" /></p>

<p>SVE achieved 20% smaller video file sizes. This is a huge saving of user’s data plans.</p>

<p>This Streaming Video Engine was designed, coded and tested in roughly 9 months. The most important learnings are:</p>

<ul>
  <li>E2E view: To find an optimal solution, we need look at the flow end to end</li>
  <li>Multi-dimensional flexibility is a key for making the system most useful</li>
  <li>Parallel and shadow mode testing to find correctness and scalability issues before production</li>
  <li>Design the ability to handle extreme products such as 360 videos</li>
  <li>Track direct measures (latency, reliability, etc.) and indirect measures (number of videos uploaded, watch times, etc.). Mapping indirect measures to direct measures could give you a good view in figuring out what you could do better next.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Instagram Moved to Python 3]]></title>
    <link href="http://euccas.github.io/blog/20170616/how-instagram-moved-to-python-3.html"/>
    <updated>2017-06-16T17:52:34-07:00</updated>
    <id>http://euccas.github.io/blog/20170616/how-instagram-moved-to-python-3</id>
    <content type="html"><![CDATA[<p>Instagram, the famous brunch sharing app, presented in <a href="https://us.pycon.org/2017/">PyCon 2017</a> and gave a talk in the keynote session on “How Instagram moves to Python 3”. If you have 15 minutes, read the interview with the speakers, Hui Ding and Lisa Guo from Instagram Infrastructure team, <a href="https://thenewstack.io/instagram-makes-smooth-move-python-3/]"><strong>here</strong></a>. If you have 45 minutes, watch their PyCon talk video, <a href="https://www.youtube.com/watch?v=66XoCk79kjM"><strong>here</strong></a>. If you have only 5 minutes, continue reading, <strong>right here</strong>.</p>

<p>Instagram’s backend, which serves over 400 million active users every day, is built on Python/Django stack. The decision on whether moving from Python 2 to Python 3, was really a decision on whether investing in a version of the language that was mature, but wasn’t going anywhere (Python 2 is expected to retire in 2020) – or the language that was the next version and had great and growing community support. The major motivations behind Instagram’s migration to Python 3 are:</p>

<ul>
  <li><strong>Typing support</strong> for dev velocity</li>
  <li>Better <strong>performance</strong> than Python 2</li>
  <li><strong>Community</strong> continues to make Python 3 better and faster</li>
</ul>

<p>The whole migration process took about 10 months, in roughly 3 stages.</p>

<!--more-->

<p><img class="center" src="http://euccas.github.io/images/post_images/2017/20170616-instagram_python3_00.png" width="520" /></p>

<ul>
  <li>First off, the migration was done directly on the Master Branch, which means the developers were adding new features to the code while migration was ongoing. So in the beginning of the Mirgration process, infrastructure added support of Python 3 on the Master Branch to make the code be able to run with both Python 2 and Python 3 environment.</li>
  <li>Massive code modification for 3 months, with the help of Python package <a href="https://pypi.python.org/pypi/modernize"><strong>“modernize”</strong></a>. Meanwhile, upgraded Third-party packages to Python 3 (working rule: <em>No Python 3, no new package</em>). Also deleted unused, incompatible packages.</li>
  <li>Intensive unit testing for 2 months. One limitation is data compatibility issues typically do not show up in unit tests.</li>
  <li>Production rollout for another 4 months (push Python 3 to every developer’s sandbox)</li>
</ul>

<p>In the talk, Lisa shared the challenges they faced in the migration process and how did they solved those problems.</p>

<ul>
  <li>Differences in <strong>unicode</strong>, <strong>str</strong>, <strong>bytes</strong>. Solved by using helper functions.</li>
  <li><strong>Pickle memcache data format incompatibility</strong> in Python 2 and Python 3. Solved by isolating memcaches for Python 2 and Python 3.</li>
  <li><strong>Iterator</strong> differences, such as <code>map</code>. Solved by converting all maps to list in Python 3.</li>
  <li><strong>Dictionary order</strong> is different in different Python versions, which caused differences in the dumped JSON data. Solved by forcing <code>sorted_keys</code> in <code>json.dump</code> function.</li>
  <li>With Python 3, while CPU instructions per request decreased by 12%, max requests per second (capacity) had 0% increase! Found the root cause in the code of checking memory configuration, and the issue was memory optimization condition was never met in Python 3 as <code>True</code> because of unicode issue. Solved by adding a magical character <strong>“b”</strong>, just like this:</li>
</ul>

<p><img class="center" src="http://euccas.github.io/images/post_images/2017/20170616-instagram_python3_01.png" width="520" /></p>

<p>In Feb 2017, Instagram’s stack completely dropped Python 2 and moved to Python 3 (v3.6). So far they’ve got this from Python 3:</p>

<p><img class="center" src="http://euccas.github.io/images/post_images/2017/20170616-instagram_python3_02.png" width="520" /></p>

<p>One more thing, in the talk Hui Ding also briefly discussed a few <strong>Python Efficiency Strategies</strong> that Instagram used to support the growing number of features and users:</p>

<ul>
  <li>Build extensive tools to profile and understand perf bottleneck</li>
  <li>Proactively push stable, critical components to C/C++, e.g., memcached access library</li>
  <li>Use Cythonization to improve performance</li>
  <li>Future ideas: Make the Django stack completely Async? Create a new python runtime?</li>
</ul>

<p>Changing an existing service to use a new version of language can never be easy, especially when your service is at such a scale - serving millions of people. You just cannot afford to breaking the existing service. Moving to Python 3 in 10 months must be a challenging process. “It can be done. It worths it. Make it happen. And Make Python 3 better.”</p>

<p>Nice work Instagram!</p>

<p><img class="center" src="http://euccas.github.io/images/post_images/2017/20170616-instagram_python3_03.png" width="520" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CMake: Use the Correct Options to Solve Linker Errors]]></title>
    <link href="http://euccas.github.io/blog/20170529/cmake-linker-options.html"/>
    <updated>2017-05-29T22:30:46-07:00</updated>
    <id>http://euccas.github.io/blog/20170529/cmake-linker-options</id>
    <content type="html"><![CDATA[<p>A few months ago when I worked on a project using <a href="https://www.zlib.net/">zlib</a> to compress and decompress files, I once met linker errors complaining about unable to resolve symbols of zlib functions:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cannot resolve symbols _gzbuffer, _gzopen, ...</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the end I fixed these linker errors by using <code>TARGET_LINK_LIBRARIES</code> command in the project’s CMakefile to specify the linker package dependency, as the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">TARGET_LINK_LIBRARIES(myProject zlibstatic)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When I was looking for solutions to fix those linker errors, I found several related CMake commands which look quite similar and could be confusing in terms of their functions and when to use them. Here is a quick summary of these commands.</p>

<p>Related CMake commands:</p>

<ul>
  <li>add_dependencies</li>
  <li>link_directories</li>
  <li>link_libraries</li>
  <li>target_link_libraries</li>
</ul>

<!--more-->

<h1 id="adddependencies">ADD_DEPENDENCIES</h1>

<p>Usage: <code>add_dependencies(&lt;target&gt; ...)</code></p>

<p>ADD_DEPENDENCIES adds a dependency between top-level targets. It makes a top level target depend on other top level targets to ensure that the dependents build beforehand. This command doesn’t ensure CMake to find the path to the targets though.</p>

<h1 id="linkdirectories">LINK_DIRECTORIES</h1>

<p>Usage: <code>link_directories(directory1 directory2 ...)</code></p>

<p>LINK_DIRECTORIES specifies directories in which the linker will look for libraries. This command will apply only to targets created after it is called. This command is rarely necessary. You can always pass absolute paths to target_link_libraries() command instead.</p>

<p>The function of this command is similar to <code>-L</code> option in g++. It is also similar to adding the specified directories to environment variable <code>LD_LIBRARY_PATH</code>.</p>

<h1 id="linklibraries">LINK_LIBRARIES</h1>

<p>Usage: <code>link_libraries([item1 [item2 [...] ]])</code></p>

<p>LINK_LIBRARIES specifies link libraries or flags to use when linking all targets added later by commands such as <code>add_executables()</code> or <code>add_library()</code>.</p>

<p>This command was deprecated in CMake version 3.0, and was added back in version 3.2. But CMake document recommends using <code>target_link_libraries</code> to replace this command whenever possible.</p>

<p>The link libraries specified in this command are expected to be full paths.</p>

<h1 id="targetlinklibraries">TARGET_LINK_LIBRARIES</h1>

<p>Usage: <code>target_link_libraries(&lt;target&gt; ... &lt;item&gt; ...)</code></p>

<p>TARGET_LINK_LIBRARIES specifies libraries or flags to use when linking a given target and/or its dependents. The specified target must be created by <code>add_library()</code> within the project or as an imported library.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈谈微信小程序的入口设计 | on WeChat Design for Mini Programs]]></title>
    <link href="http://euccas.github.io/blog/20170422/on-wechat-mini-program.html"/>
    <updated>2017-04-22T23:24:14-07:00</updated>
    <id>http://euccas.github.io/blog/20170422/on-wechat-mini-program</id>
    <content type="html"><![CDATA[<p>现在流传的中国互联网圈四大热点是：百度的丑闻，支付宝的社交，微信的功能和网易的猪肉。这大概是个调侃的笑话，但是其中“微信的功能”，确实是我会特别留意和关心的，原因在于两点：</p>

<ol>
  <li>对微信产品设计的认可和关注</li>
  <li>对张小龙产品设计理念的好奇与学习</li>
</ol>

<p>最近几个月来微信最引人注目的功能变化，无疑是“微信小程序”的推出和初步推广。微信小程序，英文版名称为Mini Program，其实是微信推出的类似于React和Weex的以Javascript为基础的程序框架。微信小程序为开发者提供了各种UI组件和调用底层的API。通过小程序实现的App，无需安装就可以在微信平台使用。</p>

<p>微信小程序的入口，设置在微信底部4个固定Tab之一的”发现“菜单中。从功能上来看，微信小程序的入口类似于Apple App Store，但它的设计和App Store完全不同。下面是一些比较。</p>

<!--more-->

<h1 id="section">入口主界面</h1>

<p>用户第一次进入微信小程序的入口时，看到的有且仅有一个搜索框，其它就是空白。这显著不同于进入App Store后看到的各种玲琅满目的应用和排行榜。</p>

<p><img class="center" src="http://euccas.github.io/images/post_images/2017/20170423-wechat_miniprogram_00.png" width="360" /></p>

<h1 id="section-1">使用小程序</h1>

<p>通过搜索（或者其他二维码）入口找到一个小程序后，一次点击就直接开始了使用过程，没有安装，也没有App启动界面和过程。第一次和小程序交互时甚至会不习惯这个没有暂停的过程。我特别注意到的是，这个点击即使用的过程，也会影响到小程序App本身的入口设计，比如用注册登录作为主入口就不合适了，小程序App需要在最短的时间内提供有效的信息和功能给用户。</p>

<p><img class="center" src="http://euccas.github.io/images/post_images/2017/20170423-wechat_miniprogram_01.png" width="360" />
<img class="center" src="http://euccas.github.io/images/post_images/2017/20170423-wechat_miniprogram_02.png" width="360" /></p>

<h1 id="section-2">退出小程序</h1>

<p>退出一个使用中的小程序，是通过微信左上方的后退按钮。退出之后即回到搜索结果的页面。感觉上，好像刚刚什么都没有发生。而使用过的小程序，都会被保存在入口主界面搜索框下的列表中。列表可以手工逐项清除，删除方式和删除微信对话一样，左滑屏幕，选择删除。</p>

<p><img class="center" src="http://euccas.github.io/images/post_images/2017/20170423-wechat_miniprogram_03.png" width="360" /></p>

<p>微信小程序入口的这些特点，可以说是再一次充分展现了微信产品设计一直以来的风格，也即张小龙曾经讲过的关于微信背后的产品观。根据我所观察到的，总结一下有：</p>

<p><em>(微信的设计部分，引用自张小龙谈微信产品观；小程序的部分是我的总结)</em></p>

<ul>
  <li>微信：让用户”聊完就走”。小程序：让用户“用完就走”。</li>
  <li>微信：让不上微博的用户来用你的产品。小程序：可能是让懒得装App的用户来用你的小程序。</li>
  <li>微信：大部分的新功能是可以砍掉的；只抓主场景，不做全功能，做多源于不自信。小程序：你看到的只有一个搜索框。</li>
  <li>微信：需求来自于对信息流的理解，让品牌通过朋友传播。小程序：二维码入口。</li>
  <li>微信：PC上的入口在搜索框，手机上的入口在二维码。小程序：入口是搜索框，可以通过二维码（来自朋友，公众号，印刷品分享）直接进入小程序。</li>
  <li>微信：设计就是分类，越简单的分类越容易被接受，微信的结构和界面保持简单。小程序：甚至没有分类，界面特别特别简单！</li>
  <li>微信：去除人们在QQ上说”88”的习惯。小程序：去除人们安装App，删除App的习惯</li>
  <li>微信：让功能存在于无形之中；只有新手才将所有（新）功能罗列在显眼的地方。小程序：什么功能都没有罗列，来了就用，用完就走！</li>
  <li>总结：极简才能不被超越。关于这一点，根据《腾讯传》中的描述，马化腾和张小龙解释说，把产品设计做到极简，这样如果你要抄我们的产品，就会加东西，而一旦加了东西，就不如我们的产品了。</li>
</ul>

<p>现在微信小程序的热度还不高，处于一个开发者仍在观望的状态，加之最近Apple的封锁打赏事件，更让不少唱衰小程序的论调流传起来。而无论小程序未来发展会如何，我在体验它之后立刻感受到设计的用心。在互联网和移动产品的茫茫大海之中探索，我发现，有些产品会让你觉得不明白设计者在想什么（可能是不存在），有些产品让你想吐槽设计者怎么连这个都想不到，有些产品让你觉得设计者好机智，而还有一些产品，会让你为设计者的用心良苦而感动。对我来说，微信是属于最后一类产品，虽然它其貌不扬（也不洋，挺土的）。</p>

<p>2017-4-24 补充：</p>

<p>一个产品的成功当然不仅仅是由设计决定的，而产品的设计也绝不仅仅限于UX的范围。考虑几个简单的问题：</p>

<ul>
  <li>如果微信的UI不变，但是发送消息有延迟或丢失，平均每周发生一次。你还会用微信吗？</li>
  <li>如果微信的功能和性能都不变，而UI变为类似于微博，你还会用微信吗？</li>
  <li>如果每次你赞了朋友或者收藏了文章，都会出现在朋友们的时间线上，类似于Facebook，你还会用微信吗？</li>
  <li>如果微信的UI，功能和性能都和现在相同，但你的家人，朋友，同事都在用Facebook，你还会用微信吗？</li>
</ul>

<p>一个成功产品的设计值得分析，一个原因是成功产品的设计通常不差，更重要的是它已经成为了相当多数量的人们习惯的方式。无论你是想要迎合人们的习惯，或改变人们的习惯，观察和分析明星产品都是必要的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Traditional C++ (3): String]]></title>
    <link href="http://euccas.github.io/blog/20170227/effective-traditional-c-plus-plus-03-string.html"/>
    <updated>2017-02-27T20:39:46-08:00</updated>
    <id>http://euccas.github.io/blog/20170227/effective-traditional-c-plus-plus-03-string</id>
    <content type="html"><![CDATA[<p>Recently I spent a whole lot of time on file compression and decompression with zlib. Thought I’d better write something about it. But before that, let me finish the series of “Effective Traditional C++”. Today I’ll write about Strings in C++.</p>

<p>Two types of String are available in C++: C-Strings (C-style Strings), and STL Strings.</p>

<h1 id="c-string">C-String</h1>

<p>C-String is a fundamental type in C++. Comparing to STL String, C-String is small, simple and fast. A C-String is a special case of an array of characters terminated with a 0. This is sometimes called an null-terminated string. A C-String can be printed out with a <code>printf</code> statement using the <code>%s</code> format string. We can access the individual characters in a C-String just as we do in an array.</p>

<!--more-->

<p><strong>Example: print a C-String with %s</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">char s[] = {'s', 't', 'r', 'i', 'n', 'g', 0};
</span><span class="line">printf("String is: %s\n", s);
</span><span class="line">// output:  String is: string</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Example: access characters of a C-String</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">char s[] = {'s', 't', 'r', 'i', 'n', 'g', 0};
</span><span class="line">for (int i = 0; s[i]; i++)
</span><span class="line">{
</span><span class="line">    printf("Char is: %c\n", s[i]);
</span><span class="line">}
</span><span class="line">// output:
</span><span class="line">// Char is: s
</span><span class="line">// Char is: t
</span><span class="line">// Char is: r
</span><span class="line">// Char is: i
</span><span class="line">// Char is: n
</span><span class="line">// Char is: g</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Example: access characters of a C-String, using a pointer</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">char s[] = "string";
</span><span class="line">for (char* cp = s; *cp; ++cp)
</span><span class="line">{
</span><span class="line">    printf("Char is %c\n", *cp);
</span><span class="line">}
</span><span class="line">// output:
</span><span class="line">// Char is: s
</span><span class="line">// Char is: t
</span><span class="line">// ... ... 
</span><span class="line">// Char is: g</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Example: access characters of a C-String, C++ 11 style</strong></p>

<p>In C++ 11, a <em>range based loop</em> can be used to access arrays and also C-Strings.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">char s[] = "string";
</span><span class="line">for (char c : s)
</span><span class="line">{
</span><span class="line">    printf("Char is %c\n", *cp);
</span><span class="line">}
</span><span class="line">// output:
</span><span class="line">// Char is: s
</span><span class="line">// Char is: t
</span><span class="line">// ... ... 
</span><span class="line">// Char is: g
</span><span class="line">// Char is:</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You may have noticed that the <code>null</code> character in the end of the C-String was printed out in the above code snippet. This is because the <em>range based for loop</em> in C++ 11 looks at the entire array and doesn’t treat the <code>null</code> as the end of the C-String. To get rid of the ending <code>null</code> character in a C-String, we need add a condition checker inside the range based loop.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">char s[] = "string";
</span><span class="line">for (char c : s)
</span><span class="line">{
</span><span class="line">    if (c==0) break;
</span><span class="line">    printf("Char is %c\n", *cp);
</span><span class="line">}
</span><span class="line">// output:
</span><span class="line">// Char is: s
</span><span class="line">// Char is: t
</span><span class="line">// ... ... 
</span><span class="line">// Char is: g</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="stl-string">STL String</h1>

<p>The STL String class is a special type of container designed to operate with sequence of characters. It’s designed with many <a href="http://www.cplusplus.com/reference/string/string/">features and available functions</a> to operate on strings efficiently and intuitively. To use STL String, you need include <code>string</code> header. The following example shows the basic usage of STL string including getting the length of a string, string concatenation, comparison, and accessing each character.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class=""><span class="line">include &lt;iostream&gt;
</span><span class="line">include &lt;string&gt;
</span><span class="line">  
</span><span class="line">int main(int argc, char** argv) {
</span><span class="line">    string s0 = "Hello";
</span><span class="line">    
</span><span class="line">    // size == length
</span><span class="line">    cout &lt;&lt; "size of string: " &lt;&lt; s0.size() &lt;&lt; endl;
</span><span class="line">    cout &lt;&lt; "length of string: " &lt;&lt; s0.length() &lt;&lt; endl;
</span><span class="line">    // output:
</span><span class="line">    // 5
</span><span class="line">    // 5
</span><span class="line">    
</span><span class="line">    // + concatenation
</span><span class="line">    cout &lt;&lt; "concatenated strings: ";
</span><span class="line">    string s1 = "another hello";
</span><span class="line">    cout &lt;&lt; s0 + ", " + s1 &lt;&lt; endl;
</span><span class="line">    // output:
</span><span class="line">    // Hello, another hello
</span><span class="line">    
</span><span class="line">    // compare: ==, &gt;, &lt;, &gt;=, &lt;=, !=
</span><span class="line">    cout &lt;&lt; "is s0 == s1? " &lt;&lt; (s0 == s1 ? "yes" : "no") &lt;&lt; endl;
</span><span class="line">    s1 = s0
</span><span class="line">    cout &lt;&lt; "is s0 == s1? " &lt;&lt; (s0 == s1 ? "yes" : "no") &lt;&lt; endl;
</span><span class="line">    // output:
</span><span class="line">    // no
</span><span class="line">    // yes
</span><span class="line">    
</span><span class="line">    // access each character
</span><span class="line">    cout &lt;&lt; "each character: ";
</span><span class="line">    for (char c : s0) {
</span><span class="line">       cout &lt;&lt; c &lt;&lt; ' ';
</span><span class="line">    }
</span><span class="line">    cout &lt;&lt; endl;
</span><span class="line">    // output:
</span><span class="line">    // Hello
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A List of SoC Design and Verification Infrastructure Needs - Tools/Automation Flows (2013)]]></title>
    <link href="http://euccas.github.io/blog/20170212/a-list-of-soc-design-and-verification-infrastructure-needs.html"/>
    <updated>2017-02-12T15:53:19-08:00</updated>
    <id>http://euccas.github.io/blog/20170212/a-list-of-soc-design-and-verification-infrastructure-needs</id>
    <content type="html"><![CDATA[<p><em>This post was written in 2013, when I thought it was necessary to summarize infrastructure tools and flows needed in SoC design and verification, according to all my experience. Today when I checked on my old notes I found this one and would like to share it here. Later on I’ll update and expand this list according to my latest experience and knowledge in engineering tools and infrastructure for software and hardware development.</em></p>

<p>System-on-Chip design and verification process is a complicated one. Unlike the world of Web and Internet, the design and development of hardware products have higher risk and lower tolerance to any mistakes. SoC design and verification process requires collaborations from multiple teams and vendors. Lots of hard decisions to make. Lots of trade-offs to consider. Moreover, the nonrecurring-engineering (NRE) charge makes sufficient and solid verification a must with limited time and resource. Tools and automated flows are an essential part of any design house.</p>

<p>Here is a list of areas that need tools and flows for SoC software and hardware design and verification according to my experience.</p>

<!--more-->

<table>
<tr>
	<th>Usage Area of Tools/Flows</th>
	<th>Software</th>
	<th>Hardware</th>
	<th>Design Usage</th>
	<th>Verification Usage</th>
</tr>

<tr>
	<td>Test Generation</td>
	<td>x</td>
	<td>x</td>
	<td></td>
	<td>x</td>
</tr>

<tr>
	<td>Regression System</td>
	<td>x</td>
	<td>x</td>
	<td></td>
	<td>x</td>
</tr>

<tr>
	<td>Coverage Reporting</td>
	<td>x</td>
	<td>x</td>
	<td></td>
	<td>x</td>
</tr>

<tr>
	<td>Coding Style Check</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>Code Review System</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>Code Quality Analysis</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>Build System</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
</tr>

<tr>
	<td>Version Control</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
</tr>

<tr>
	<td>Integration System</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>Spec System</td>
	<td></td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>RTL Generation</td>
	<td></td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>TestBench Generation</td>
	<td></td>
	<td>x</td>
	<td></td>
	<td>x</td>
</tr>

<tr>
	<td>Synthesis</td>
	<td></td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>Netlist Quality Analysis</td>
	<td></td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>Power Analysis and Optimization</td>
	<td></td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>ECO Flow</td>
	<td></td>
	<td>x</td>
	<td>x</td>
	<td></td>
</tr>

<tr>
	<td>Issue/Bug Tracking System</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
</tr>

<tr>
	<td>Infrastructure: Linux/Windows machines, LSF</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
	<td>x</td>
</tr>

</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Traditional C++ (2): Pointer and Reference]]></title>
    <link href="http://euccas.github.io/blog/20170205/effective-traditional-c-plus-plus-02-pointer-and-reference.html"/>
    <updated>2017-02-05T22:18:59-08:00</updated>
    <id>http://euccas.github.io/blog/20170205/effective-traditional-c-plus-plus-02-pointer-and-reference</id>
    <content type="html"><![CDATA[<p>Pointers and references are two fundamental data types in C++. They are useful, common and somewhat dangerous. Using them correctly, they could greatly improve the efficiency and performance of your program. On the other hand, using them incorrectly could lead to many problems such as memory leaks and buffer overflow.</p>

<h1 id="pointers">Pointers</h1>

<p>A pointer holds the address of a variable and can be used to perform any operation that could be directly done on the variable, such as accessing and modifying it. Here are a few facts of pointers:</p>

<ul>
  <li>
    <p>When a pointer is defined, memory is allocated in the size of a pointer.</p>
  </li>
  <li>
    <p>The pointer is strongly typed, meaning the compiler retains an association with a pointer that it points to a type of value.</p>
  </li>
  <li>
    <p>Two pointers can equal to each other, such that changing one’s value also changes the other’s value.</p>
  </li>
</ul>

<!--more-->

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int * p = new int;
</span><span class="line">*p = 1;
</span><span class="line">int * q = p;
</span><span class="line">*p = 2;
</span><span class="line">cout &lt;&lt; *q; // Outputs 2. * is the pointer dereferene operator</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>The size of a pointer varies depending on the architecture: 32 bits on a 32-bit machine and 64 bits on a 64-bit machine.</p>
  </li>
  <li>
    <p>Pointer subtraction is allowed. The result of pointer subtraction is the distance of two pointers.</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int a = 1;
</span><span class="line">int b = 2;
</span><span class="line">int * pa = &a;
</span><span class="line">int * pb = &b;
</span><span class="line">int pdis = pa - pb;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Adding a pointer and a distance gets another meaningful pointer.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int * p = new int[2];
</span><span class="line">p[0] = 0;
</span><span class="line">p[1] = 1;
</span><span class="line">p++;
</span><span class="line">cout &lt;&lt; *p; // Outputs 1</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>But adding two pointers won’t give you a meaningful pointer. Don’t do it.</li>
</ul>

<h1 id="references">References</h1>

<p>A reference is another name for a pre-existing object. It does not have memory of its own. In other words, a reference is only an alias. A few facts about references are:</p>

<ul>
  <li>You cannot create a reference without specifying where in memory it refers to. A reference cannot be null.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int x = 7;
</span><span class="line">int &amp; y = x; // Makes y a reference, initialized with the address of x</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>You can create a free-standing reference as shown below:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">const int &amp; a = 12;</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>A reference is immutable. You cannot reassign a reference to another piece of memory.</p>
  </li>
  <li>
    <p>When you use references in function calls and class method calls, you always want to make them const. This helps to eliminate the side effects of using references (because using reference sometimes is not obvious as using pointers, and people may not notice the unintended side effects could happen). The following example shows the possible side effects when using references:</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int &amp; f(int &amp;x) {
</span><span class="line">    ++x;
</span><span class="line">    return x;
</span><span class="line">}
</span><span class="line">
</span><span class="line">int main(int argc, char** argv)
</span><span class="line">{
</span><span class="line">    int i = 5;
</span><span class="line">    printf("the value is %d\n", i); // i is 5
</span><span class="line">    printf("the value is %d\n", f(i)); // f(i) is 6
</span><span class="line">    printf("the value is %d\n", i); // i is changed to 6 unindently
</span><span class="line">    return 0;
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The good way is always using <code>const</code> when using references:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">const int &amp; f(const int &amp; x) {
</span><span class="line">    static int y = x;
</span><span class="line">    ++y;
</span><span class="line">    return y;
</span><span class="line">}
</span><span class="line">
</span><span class="line">int main(int argc, char** argv)
</span><span class="line">{
</span><span class="line">    int i = 5;
</span><span class="line">    printf("the value is %d\n", i); // i is 5
</span><span class="line">    printf("the value is %d\n", f(i)); // f(i) is 6
</span><span class="line">    printf("the value is %d\n", i); // i is 5
</span><span class="line">    return 0;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="functions-call-by-reference">Functions: Call by Reference</h1>

<p>By default, functions in C++ pass variables by value, which means that a copy of the value is made and that copy is used inside the function. This is called <strong>pass by value</strong>. However, passing references or pointers does the same thing and faster as the copying is skipped. Actually this is why references are created for C++, to allow <strong>call by reference</strong> so that you can pass large objects without worrying about stack overflow.</p>

<p>Before references, this can be done with pointers. Pass by pointers can do the same thing but it’s a little bit more complicated than using references.</p>

<p>Example of a “call by reference”:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> void func(const string &amp; fs)
</span><span class="line"> {
</span><span class="line">    print("string value is %s\n", fs.c_str());
</span><span class="line"> }
</span><span class="line"> 
</span><span class="line"> int main(int argc, char ** argv)
</span><span class="line"> {
</span><span class="line">    string s = "I'm a string!";
</span><span class="line">    func(s); // Outputs: string value is I'm a string
</span><span class="line">    printf("string is %s\n", s.c_str()); // Outputs: string is I'm a string
</span><span class="line">    return 0;
</span><span class="line"> }
</span><span class="line"> </span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Traditional C++ (1): Qualifiers]]></title>
    <link href="http://euccas.github.io/blog/20170130/effective-traditional-c-plus-plus-01-qualifiers.html"/>
    <updated>2017-01-30T21:41:11-08:00</updated>
    <id>http://euccas.github.io/blog/20170130/effective-traditional-c-plus-plus-01-qualifiers</id>
    <content type="html"><![CDATA[<p>Recently I’m doing a review on C++ programming language. During the process, I found a few topics which are worth paying more attention to. I’ll write several posts about the related C++ tips and tactics. These topics are not specially for C++ 11 or 14, I therefore name this series of posts as “Effective Traditional C++”.</p>

<p>The first topic I’ll write about here is: <strong>Qualifiers</strong></p>

<p>C++ uses Qualifiers to adjust qualities of a variable or an object. In C++, there are two types of qualifiers: CV qualifiers and storage qualifiers.</p>

<h1 id="cv-qualifiers">CV Qualifiers</h1>

<p>CV qualifiers stands for Const and Volatile Qualifier. There are three types of CV qualifiers:</p>

<ul>
  <li>const</li>
  <li>volatile</li>
  <li>mutable</li>
</ul>

<!--more-->

<h2 id="const-qualifier">const qualifier</h2>

<p><code>const</code> marks a variable or function as read-only or immutable. It’s value (or the return value of a function) cannot be changed once it’s been defined.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">const int weekdays = 7;
</span><span class="line">
</span><span class="line">const int * myptr1; // declares myptr1 is a pointer to a constant integer
</span><span class="line">int const * myptr2; // same as above, declares myptr2 is a pointer to a constant integer
</span><span class="line">// myptr1 and myptr2 can be changed to point to other const integers
</span><span class="line">
</span><span class="line">int * const  myptr3; // declares myptr3 is constant pointer to a variable integer
</span><span class="line">int const * const myptr4; // declares myptr4 is constant pointer to a constant integer
</span><span class="line">// myptr3 and myptr4 cannot be changed once initialized
</span><span class="line">
</span><span class="line">const char *Function1()
</span><span class="line">{ return "Some text";}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="volatile-qualifier">volatile qualifier</h2>

<p><code>volatile</code> marks a variable that may be <strong>changed by another process</strong>. This is generally used for threaded code, or externally linked code. Often <code>volatile</code> is used to tell the compiler avoid aggressive optimization involving the qualified object because the value of the object might be changed by means that the compiler is not aware of.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">volatile int maxcnt = 10;
</span><span class="line">int cnt = 0;
</span><span class="line">while (cnt &lt; maxcnt)
</span><span class="line">{
</span><span class="line">    // do something ... 
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="mutable-qualifier">mutable qualifier</h2>

<p><code>mutable</code> is used on data member to make it writable from a <code>const</code> qualified member function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">class A {
</span><span class="line">   mutable int x;
</span><span class="line">   int y;
</span><span class="line">
</span><span class="line">   public:
</span><span class="line">     void f1() {
</span><span class="line">       // "this" has type `A*`
</span><span class="line">       x = 1; // okay
</span><span class="line">       y = 1; // okay
</span><span class="line">     }
</span><span class="line">     void f2() const {
</span><span class="line">       // "this" has type `A const*`
</span><span class="line">       x = 1; // okay, because x is mutable qualified
</span><span class="line">       y = 1; // illegal, because f2 is const
</span><span class="line">     }
</span><span class="line">};
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="storage-qualifiers">Storage Qualifiers</h1>

<p>Storage qualifiers determine the lifetime of the defined variables or functions. By default, a variable defined within a block has automatic lifetime, which is the duration of the block. There are three types of storage qualifiers:</p>

<ul>
  <li>static</li>
  <li>register</li>
  <li>extern</li>
</ul>

<h2 id="static-qualifier">static qualifier</h2>

<p><code>static</code> marks the variable is alive for the duration of the program. Static variables are commonly used for keeping <strong>state</strong> between instances of a given function or method. Static variables are stored globally, even if they are stored in a class.</p>

<h2 id="register-qualifier">register qualifier</h2>

<p><code>register</code> marks the variables as register variables, which are stored in processor registers. Register variables are faster and easier to access and operate on. Note using <code>register</code> only suggest the compiler that particular automatic variables should be allocated to CPU registers, if possible. The compiler may or may not actually store the variable in a register. Register variables should only be used if you have a detailed knowledge of the architecture and compiler for the computer you are using.</p>

<h2 id="extern-qualifier">extern qualifier</h2>

<p><code>extern</code> defines the variables or functions in a separate translation unit and are linked with the code by the linker step of the compiler. In other words, you can <strong>define</strong> variables or functions in some source files or classes, and use them in other source files/classes by using <code>extern</code> qualifier to <strong>declare</strong> them in other source files or classes.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabled Blog Posts Commenting]]></title>
    <link href="http://euccas.github.io/blog/20170116/now-commenting-on-posts-is-enabled.html"/>
    <updated>2017-01-16T23:39:06-08:00</updated>
    <id>http://euccas.github.io/blog/20170116/now-commenting-on-posts-is-enabled</id>
    <content type="html"><![CDATA[<p>Hi there,</p>

<p>I just enabled <strong>commenting</strong> on this blog with <a href="https://disqus.com/">Disqus</a>.</p>

<p>Feel free to leave comments on the blog posts you’re interested. I look foward to having conversations with people who spend some time reading my blog.</p>

<p>Cheers,</p>

<p>Euccas</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Functors]]></title>
    <link href="http://euccas.github.io/blog/20170115/c-plus-plus-functors.html"/>
    <updated>2017-01-15T20:20:07-08:00</updated>
    <id>http://euccas.github.io/blog/20170115/c-plus-plus-functors</id>
    <content type="html"><![CDATA[<p>A <strong>functor</strong> is a powerful C++ entity that everyone who wants to master C++ needs to know. A functor, which is short for “<strong>function object</strong>”, is a C++ class that acts like a function. Functors can be called using the familiar function call syntax, and can yield values and accept parameters just like regular functions.</p>

<p>To create a functor, we create a class (or a struct) that overloads the function <code>operator()</code>. Note here the function is called <code>operator()</code>, and it’s not the <code>operator</code> function, i.e. <code>()</code>. We then create an instance of this class (or struct) to use the created functor.</p>

<h1 id="create-and-use-functors">Create and use functors</h1>

<p>Let’s look at two examples of creating and using a functor. In the first example, a functor is created with a <code>class</code>, and in the second example we use a <code>struct</code> to create the functor.</p>

<!--more-->

<h2 id="example-create-a-functor-with-a-class">Example: Create a functor with a Class</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">class MyFunctor {
</span><span class="line">public:
</span><span class="line">    void operator() (const string&amp; str) const {
</span><span class="line">        cout &lt;&lt; str &lt;&lt; endl;
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">// Using functor:
</span><span class="line">
</span><span class="line">MyFunctor functor; // create an instance of the functor class
</span><span class="line">functor("This is a functor!"); // and "call" it
</span><span class="line">
</span><span class="line">// equivalence:
</span><span class="line">cout &lt;&lt; functor.operator()(23) &lt;&lt; endl;
</span><span class="line">
</span><span class="line">// You'll see "This is a functor" printed out.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="example-create-a-functor-with-a-struct">Example: Create a functor with a Struct</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">struct add_x {
</span><span class="line">  add_x(int x) : x(x) {}
</span><span class="line">  int operator()(int y) { return x + y; }
</span><span class="line">private:
</span><span class="line">  int x;
</span><span class="line">};
</span><span class="line">
</span><span class="line">// Using functor:
</span><span class="line">
</span><span class="line">add_x add42(42); // create an instance of the functor class
</span><span class="line">int i = add42(8); // and "call" it
</span><span class="line">assert(i == 50); // and it added 42 to its argument
</span><span class="line">
</span><span class="line">std::vector&lt;int&gt; in;
</span><span class="line">std::vector&lt;int&gt; out;
</span><span class="line">// Pass a functor to std::transform, which calls the functor on every element 
</span><span class="line">// in the input sequence, and stores the result to the output sequence
</span><span class="line">std::transform(in.begin(), in.end(), out.begin(), add_x(1)); 
</span><span class="line">assert(out[i] == in[i] + 1); // for all i
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="functors-access-class-data-members">Functors access class data members</h1>

<p>The key difference between a function and a functor is that a functor’s function call operator is a <em>member function</em> whereas a raw C++ function is a <em>free</em> function. This means that a functor can access the following information when being called:</p>

<ul>
  <li>Its local variables</li>
  <li>Its parameters</li>
  <li>Global variables</li>
  <li><strong>Class data members</strong></li>
</ul>

<p>If a functor’s <code>operator()</code> member function requires access to data beyond what can be communicated by its parameters, we can store that information as a data member inside the functor class. Since <code>operator()</code> is a member of the functor class, it can then access that data freely. The following example shows how a functor’s <code>operator()</code> function access the class’s private member <code>toAppend</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">class StringAppender {
</span><span class="line">public:
</span><span class="line">    // Constructor takes and stores a string.
</span><span class="line">    explicit StringAppender(const string &amp;str) : toAppend(str) {}
</span><span class="line">    
</span><span class="line">    // Operator() prints out a string, plus the stored suffix.
</span><span class="line">    void operator() (const string &amp;str) const {
</span><span class="line">        cout &lt;&lt; str &lt;&lt; ' ' &lt;&lt; toAppend &lt;&lt; endl;
</span><span class="line">    }
</span><span class="line">
</span><span class="line">private:
</span><span class="line">    const string toAppend;
</span><span class="line">};
</span><span class="line">
</span><span class="line">// Usage:
</span><span class="line">StringAppender myFunctor("is awesome");
</span><span class="line">myFunctor("C++");
</span><span class="line">
</span><span class="line">// You'll see "C++ is awesome" is printed out.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="functors-are-useful-in-stl-algorithms">Functors are useful in STL algorithms</h1>

<p>C++ STL algorithms use functors to increase the flexibility and efficiency. The most common uses for function objects are for generating data, for testing data, and for applying operations to data. here is an example of how STL <code>for_each</code> uses functors.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">struct sum
</span><span class="line">{
</span><span class="line">    sum(int* t):total(t){};
</span><span class="line">    int* total;
</span><span class="line">    void operator()(int element)
</span><span class="line">    {
</span><span class="line">       *total += element;
</span><span class="line">    }
</span><span class="line">};
</span><span class="line">
</span><span class="line">int main()
</span><span class="line">{
</span><span class="line">    int total = 0;
</span><span class="line">    sum s(&amp;total);
</span><span class="line">    int arr[] = {0, 1, 2, 3, 4, 5};
</span><span class="line">    std::for_each(arr, arr+6, s);
</span><span class="line">    cout &lt;&lt; total &lt;&lt; endl; // prints total = 15;
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>The reader of <a href="http://web.stanford.edu/class/cs106l/course-reader/Ch13_Functors.pdf">Stanford course CS106l</a> explains functors in detail.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Start on Machine Learning]]></title>
    <link href="http://euccas.github.io/blog/20170106/get-start-on-machine-learning.html"/>
    <updated>2017-01-06T23:17:40-08:00</updated>
    <id>http://euccas.github.io/blog/20170106/get-start-on-machine-learning</id>
    <content type="html"><![CDATA[<p>So here comes 2017, a year when you hear people talk about the words <em>Machine Learning</em>, <em>Reinforcement Learning</em>, and <em>Artificial Intelligence</em> everywhere.</p>

<p>Last year when Mark Zuckberg was working on building Jarvis, I didn’t spend much time on AI or Machine Learning. But I know the efforts I made last year get me ready to start on it right now.</p>

<p>Tonight I just talked to a former colleague who is working at Nvidia, and he gave me a few helpful suggestions about getting started on machine learning according to his own experience. Here are some of his advices:</p>

<!--more-->

<ul>
  <li>Set a goal: What do you want to achieve with the knowledge of Machine Learning?</li>
  <li>Learn the fundamentals: <a href="https://www.coursera.org/learn/machine-learning">Andrew Ng’s course</a> on Coursera</li>
  <li>If you’d like to have more courses, take <a href="http://cs231n.stanford.edu/">Standford CS231n</a></li>
  <li>Learn to use the frameworks: <a href="https://www.tensorflow.org/">Tensor Flow</a>, <a href="http://caffe.berkeleyvision.org/">Caffe</a></li>
  <li>Work on projects with real data (very important): get from <a href="https://www.kaggle.com/">Kaggle.com</a></li>
  <li>Follow <a href="https://openai.com/">OpenAI</a> and <a href="https://deepmind.com/">DeepMind</a></li>
  <li>Master Python if you haven’t</li>
  <li>Make sure your computer has a powerful GPU :)</li>
</ul>

<p>Some people I know might think Machine Learning or AI is sort of irrelevant to what I’m working on. That’s not what I think though. Even if it is irrelevant today, it will become relevant sooner than expected. Machine Learning is not a fad. It’s the way how technology works tomorrow. If you can’t master it, at least you need have a good understanding of it.</p>

<p><img class="center" src="http://euccas.github.io/images/post_images/2017/20170107-larrypage.jpg" width="640" /></p>

<p><em>Image source: Medium <a href="https://medium.com/the-mission/20-things-i-ve-learned-from-larry-page-4f83674a1a52#.elpww9snf">“20 things I’ve learned from Larry Page”</a></em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Multiprocessing]]></title>
    <link href="http://euccas.github.io/blog/20161231/python-multiprocessing.html"/>
    <updated>2016-12-31T09:37:01-08:00</updated>
    <id>http://euccas.github.io/blog/20161231/python-multiprocessing</id>
    <content type="html"><![CDATA[<p>Python’s GIL (Global Interpreter Lock) was designed to be a thread-safe mechanism, and it effectively prevents conflicts between multiple threads. GIL makes it easy to implemente multi-threading with Python. However, it also prevents Python multi-threading from utilizing the multiple cores of a computer to achieve improved execution speed. This is why using the <code>threading</code> module in Python won’t help your program run faster through parallelism.</p>

<p>The good thing is Python provides a <a href="https://docs.python.org/3.4/library/multiprocessing.html"><code>multiprocessing</code> module</a> since Python 2.6. With the <code>multiprocessing</code> module we can spawn subprocesses and effectively avoid some of the limitations that GIL brings, on both Unix and Windows platforms.</p>

<p>In this post I’ll briefly introduce <code>multiprocess</code> module and show how it can be used for parallel programming.</p>

<!--more-->

<h1 id="a-simple-example-of-multiprocessing">A simple example of <em>multiprocessing</em></h1>

<p>In the following example, we use <code>multiprocessing</code> module to spawn a child process from a parent process using a <code>Process</code> object.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">from multiprocessing import Process
</span><span class="line">import os
</span><span class="line">import time
</span><span class="line">
</span><span class="line">def task(name):
</span><span class="line">    print("Starting child process with id: ".format(os.getpid()))
</span><span class="line">    print("Parent process: ".format(os.getppid()))
</span><span class="line">    print("Task start: just sleeps 5 seconds ...")
</span><span class="line">    time.sleep(5)
</span><span class="line">    print("Task done")
</span><span class="line">    
</span><span class="line">if __name__ == "__main__":
</span><span class="line">    print("In parent process, id: ".format(os.getpid())
</span><span class="line">    p = Process(target=task, args=('firstone'))
</span><span class="line">    p.start()
</span><span class="line">    print("In parent process, after child process start")
</span><span class="line">    print("parent process about to join child process")
</span><span class="line">    p.join()
</span><span class="line">    print("In parent process, after child process join")
</span><span class="line">    print("parent process exiting with id ".format(os.getpid()))
</span><span class="line">    print("the parent's parent process: ".format(os.getppid()))
</span><span class="line">    </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The output of this program will be:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">In parent process, id 5245
</span><span class="line">In parent process, after child process start
</span><span class="line">parent process about to join child process
</span><span class="line">Starting child process with id: 5246
</span><span class="line">Parent process: 5245
</span><span class="line">Task start: just sleeps 5 seconds ...
</span><span class="line">Task done
</span><span class="line">In parent process, after child process join
</span><span class="line">parent process exiting with id 5245
</span><span class="line">the parent's parent process: 5231</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The program starts the subprocess using <code>p.start()</code></p>

<h1 id="three-ways-to-start-a-process">Three ways to start a process</h1>

<p>Depending on the platform, <code>multiprocessing</code> supports three ways to start a process.</p>

<ul>
  <li><strong>spawn</strong></li>
</ul>

<p>Available on both Unix and Windows. The default on Windows. The parent process starts a fresh python interpreter process. Slower comparing with <code>fork</code> or <code>forkserver</code>.</p>

<ul>
  <li><strong>fork</strong></li>
</ul>

<p>Parent process uses <code>os.fork()</code> to fork the Python interpreter. The child process is identical to the parent process, with inheritating all resources of the parent process. Available on Unix only. The default of Unix.</p>

<ul>
  <li><strong>forkserver</strong></li>
</ul>

<p>Starts a server process. Whenever a new process is needed, the parent process connects to the server and requests that it fork a new process. Available on Unix.</p>

<p>To select a start method, you can use <code>set_start_method()</code>. This method should be used only once in the program.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mp.set_start_method('spawn')
</span><span class="line">p = mp.Process(target=foo, args=())
</span><span class="line">p.start()
</span><span class="line">p.join()</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="two-ways-to-exchange-objects-between-processes">Two ways to exchange objects between processes</h1>

<p>Two types of communication channel between processes are supported in <code>multiprocessing</code>, and they are:</p>

<ul>
  <li>class Queue</li>
  <li>function Pipe()</li>
</ul>

<p>If you need know more details, the Python document <a href="https://docs.python.org/3.4/library/multiprocessing.html#exchanging-objects-between-processes">here</a> will provide help.</p>

<h1 id="use-a-pool-of-workers">Use a pool of workers</h1>

<p>The <code>Pool</code> class is a quite useful one in the <code>multiprocessing</code> module, as in real life you’ll often need multiple workers to execute the tasks in your program in parallel. What the <code>Pool</code> class represents is a pool of workers. The following example shows how to create a pool with 4 processes as workers, and assign tasks to the workers.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">from multiprocessing import Pool
</span><span class="line">from time import sleep
</span><span class="line">
</span><span class="line">def f(x):
</span><span class="line">    return x*x
</span><span class="line">
</span><span class="line">if __name__ == "__main__":
</span><span class="line">    # start 4 worker processes
</span><span class="line">    with Pool(processes=4) as pool:
</span><span class="line">        res = pool.apply_async(f, [10])
</span><span class="line">        print(res.get(timeout=1))
</span><span class="line">
</span><span class="line">    pool.close()
</span><span class="line">    pool.join()
</span><span class="line">    </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>apply_async(f, args, kwargs)</code> method calls a function for many times, or calls a number of different functions asynchronously with arguments arguments. Each process will NOT block other processes. The order of the multiple processes are not guaranteed.</p>

<p>The <code>close()</code> prevents any more tasks from being submitted to the pool. Once all the tasks have been completed, the worker process will exit.</p>

<p>The <code>join()</code> method waits for the worker processes to exit. It is required to call <code>close()</code> or <code>terminate()</code> before using <code>join()</code> method.</p>

<p>Both <code>close()</code> and <code>terminate()</code> will stop all the worker processes. The difference is <code>close()</code> will wait for worker process to finish, and <code>terminate()</code> immediately shut down worker processes without completing outstanding work.</p>

<p>Another useful method provided by <code>multiprocessing</code> module is <code>cpu_count()</code>, which returns the number of CPUs in the current system. You can use this value to decide how many processes to create in a pool.</p>

<p><em>This post is my last post in 2016. Happy new year!</em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Levels of Design]]></title>
    <link href="http://euccas.github.io/blog/20161224/levels-of-design.html"/>
    <updated>2016-12-24T09:52:07-08:00</updated>
    <id>http://euccas.github.io/blog/20161224/levels-of-design</id>
    <content type="html"><![CDATA[<p>Recently I’m taking a course <a href="https://www.coursera.org/learn/algorithmic-toolbox/home/welcome">“Algorithm Toolbox”</a> on Coursera. This course provides me a good chance to review and enhance my knowledge in the fundamental algorithms, which usually would help on achieving better system design. This morning I came across one slide of this course and thought it could be very useful. Sharing it here.</p>

<p><img class="center" src="http://euccas.github.io/images/post_images/2016/20161224-levels-of-design-1.png" width="600" /></p>

<p>It’s important to keep the <strong>levels of (algorithm) design</strong> in mind when solving a problem.</p>

<!--more-->

<h1 id="level-1-naive-algorithm">Level 1: Naive Algorithm</h1>

<p>This is the solution that you can get just by taking the definition of a problem and turning it into an algorithm. This solution can solve the problem, but it is often very slow and inefficient.</p>

<p>The way I see the naive algorithm is it gives you something that works, and might be used to verify if alternative solutions are correct or not. But it’s important to not stay at the this solution. You should keep looking for better solutions.</p>

<h1 id="level-2-algorithm-by-way-of-standard-tools">Level 2: Algorithm by way of standard Tools</h1>

<p>You can look at the standard techniques and see if any of it applies to solving your problem. On this level, your goal is finding some standard techniques that work, often that don’t involve too much effort on your part, and give you something that work very well (better than the naive algorithm).</p>

<h1 id="level-3-optimized-algorithm">Level 3: Optimized Algorithm</h1>

<p>Remember there are always lots of ways to improve an existing solution. If you get a pretty good solution on level 2, why not taking one more step and see what you can do to improve it? Could you reduce the runtime from n-cubed to n-squared or n-squred to n? Could you come up with a shorter solution by rearranging the order or cut out some of the work? Could you use a data structure to speed things up? Think about all these possiblities and see if you can get a even better solution. (Often you will)</p>

<h1 id="level-4-magic-algorithm">Level 4: Magic Algorithm</h1>

<p>When the solutions from the previous three levels are not good enough, you’ll need some magic to get a better one. This can be hard. You will need some clever new ideas and unique insights of the problem you’re trying to solve. Even if you don’t get a magic solution in the end, the thought process will be beneficial.</p>

<p>Sometimes when I finish a project, I do have the feeling that the way I do it is just not good enough, even though the project has been proved to be successful, useful and solved a particular technical challenge we faced. Looking at the “Levels of Design”, I believe what I need to do is spending more efforts on the higher levels. Actually what you really need for getting a really good solution is not magic. What you need is mastering more existing good standard techniques, exploring the possibility for optimization, and a deep understanding of the problem you want to solve.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Generators]]></title>
    <link href="http://euccas.github.io/blog/20161223/python-generators.html"/>
    <updated>2016-12-23T08:48:45-08:00</updated>
    <id>http://euccas.github.io/blog/20161223/python-generators</id>
    <content type="html"><![CDATA[<p>Generators is a powerful weapon of Python. Generators help you write concise code, give you lazy evaluation, and improve the efficience for calculating large sets of results. Personally I think it’s a good habit to use generators in Python whenever you can, if you really want your code to be Pythonic.</p>

<h1 id="how-to-create-a-generator">How to create a generator</h1>

<p>There are mainly two ways to create a generator: using the <code>yield</code> keyword in the function, or using the <code>()</code> as a generator expression.</p>

<ul>
  <li>The <code>yield</code> keyword makes the function yields control back to the calling function on every iteration</li>
  <li>The <code>()</code> expression returns a generator object</li>
</ul>

<!--more-->

<h1 id="how-to-refactor-a-function-to-use-a-generator">How to refactor a function to use a generator</h1>

<p>Functions that construct a list or another iterable and returns it can be turned into a generator by:</p>

<ol>
  <li>Converting the list append into a <code>yield</code></li>
  <li>Removing the empty list creation</li>
  <li>Removing the return</li>
</ol>

<h1 id="a-generator-example">A generator example</h1>
<p>Let’s see an example: implement a function that takes a list and return a list of the current running mean. For example, given the input list <code>[8, 4, 3, 1, 3, 5]</code>, the expected return result is <code>[8.0, 6.0, 5.0, 4.0, 3.8, 4.0]</code>.</p>

<p>First we’ll implement it without using generators.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def running_mean(numbers):
</span><span class="line">	average = []
</span><span class="line">	sum = 0
</span><span class="line">	for i, num in enumerate(numbers):
</span><span class="line">		sum += num
</span><span class="line">		average.append(sum/(i*1.0))
</span><span class="line">	return average
</span><span class="line">
</span><span class="line">numbers = [8, 4, 3, 1, 3, 5]
</span><span class="line">print(running_mean(numbers))
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we can refactor the above implementation to use a generator:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def running_mean(numbers):
</span><span class="line">	sum = 0
</span><span class="line">	for i, num = enumerate(numbers):
</span><span class="line">		sum += num
</span><span class="line">		yield sum/((i+1)*1.0)
</span><span class="line">
</span><span class="line">numbers = [8,4,3,1,3,5]
</span><span class="line">print(list(running_mean(numbers)))
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What we did in the refactoring was: replacing the list appending with a yield (<code>average.append()</code>), removing the empty list creation (<code>average = []</code>), and replacing the return statement with a yield statement.</p>

<p>One important property of Python generator object is it is a single-use object. In other words, a generator keeps yielding answers forever. The looping in a generator only ends when the calling function decides to end it. Meanwhile a generator can only be called once.</p>

<p>A few other generator examples can be found on my <a href="https://github.com/euccas/IntermediatePython/tree/master/iteration/generator">GitHub repo <em>IntermediatePython</em></a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL: Understand PG Errors]]></title>
    <link href="http://euccas.github.io/blog/20161217/postgresql-understand-pg-errors.html"/>
    <updated>2016-12-17T09:06:21-08:00</updated>
    <id>http://euccas.github.io/blog/20161217/postgresql-understand-pg-errors</id>
    <content type="html"><![CDATA[<p>When using Ruby Gem <code>pg</code> and establish database connections to a PostgreSQL database, you’ll see PG errors when the database connection becomes problematic. In my experience, two typical PG errors are <code>PG::AdminShutdown</code> and <code>PG::UnableToSend</code>.</p>

<h1 id="error-pgadminshutdown">Error PG::AdminShutdown</h1>

<p>The error message contains the following information:</p>

<p><code>
FATAL:  terminating connection due to administrator command (PG::AdminShutdown) server closed the connection unexpectedly
      This probably means the server terminated abnormally
      before or while processing the request.
</code></p>

<!--more-->

<p>The PG::AdminShutdown error could be caused by database server receiving SIGTERM/SIGINT/SIGQUIT or kill command on the connection process. Each system signal shut down server processes in different manners, see the <a href="https://www.pgadmin.org/docs/1.4/pg/postmaster-shutdown.html">pgadmin document</a> to know the details.</p>

<p>When you hit the PG::AdminShutdown error, you’ll like to check if the database server gets restarted and if the server resumes to the normal state.</p>

<h1 id="error-pgunabletosend">Error PG::UnabletoSend</h1>

<p>The error message looks like:</p>

<p><code>
server closed the connection unexpectedly (PG::UnableToSend)
This probably means the server terminated abnormally before or while processing the request.
</code></p>

<p>The PG::UnabletoSend error usually means a connection timeout or network issue. It could be a temporary issue though. You can check if the other connections to the database server work well or not.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效Jenkins用户的第5个习惯]]></title>
    <link href="http://euccas.github.io/blog/20161216/jenkins-user-habits-5.html"/>
    <updated>2016-12-16T15:49:51-08:00</updated>
    <id>http://euccas.github.io/blog/20161216/jenkins-user-habits-5</id>
    <content type="html"><![CDATA[<p>本文内容部分来源于<strong>Andrew Bayer</strong>发布在SlideShare上的 <a href="http://www.slideshare.net/andrewbayer/seven-habits-of-highly-effective-jenkins-users-2014-edition"><em>7 habits of highly productive Jenkins Users (2014 Edition)</em></a>.</p>

<h1 id="section">习惯 5: 集成第三方工具和服务</h1>

<p>Jenkin可以和许多第三方工具和服务集成，实现强大又实用的功能。常见的集成方式包括使用REST API和一些Jenkins功能插件。可以实现的功能比如：由GitHub pull requests触发builds，当builds成功或失败时根据结果更新JIRA等等。</p>

<!--more-->

<h2 id="gerritgithubpull-requests">Gerrit和Github的pull requests</h2>

<p>一些非常实用的Jenkins builds工具和服务包括：</p>

<ul>
  <li>Gerrit Trigger</li>
  <li>GitHub Pull Request Builder</li>
  <li>Jenkins Enterprise’s version of GitHub pull request builder</li>
</ul>

<p>Build工具和服务可以实现对每一次提交的改动进行build, 并且将结果报告提交代码审查工具。</p>

<p>在这些Build工具的基础之上，你可以实现自动化合并多个提交的改动，进行branch之间的同步等更多功能。</p>

<h2 id="jirahttpswwwatlassiancomsoftwarejira"><a href="https://www.atlassian.com/software/jira">JIRA</a></h2>

<ul>
  <li>检查每一个commit的描述信息，如果其中包含有JIRA issue信息，就用commit信息（和测试结果）提交相应的JIRA issue更新</li>
  <li>根据build的过程和步骤，更新所有相关项目的JIRA</li>
  <li>生成JIRA release notes</li>
</ul>

<h2 id="artifactory">Artifactory</h2>

<ul>
  <li>全局性地设定Jenkins jobs用于部署的证书信息 (credentials)</li>
  <li>覆盖 (override) 每一个job的Maven distributionManagement 配置</li>
  <li>定义Maven jobs和build步骤从何处获取artifacts</li>
  <li>在Artifactory中保存build信息和关系</li>
</ul>

<p><strong>阅读同主题内容</strong></p>

<ul>
  <li><a href="http://euccas.github.io/blog/20151210/jenkins-user-habits-1.html">高效Jenkins用户的第1个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20151215/jenkins-user-habits-2.html">高效Jenkins用户的第2个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20160523/jenkins-user-habits-3.html">高效Jenkins用户的第3个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20161010/jenkins-user-habits-4.html">高效Jenkins用户的第4个习惯</a></li>
  <li><a href="http://euccas.github.io/blog/20161216/jenkins-user-habits-5.html">高效Jenkins用户的第5个习惯</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Training: MongoDB for Developers (Python)]]></title>
    <link href="http://euccas.github.io/blog/20161205/mongodb-training-mongodb-for-developers-python.html"/>
    <updated>2016-12-05T13:56:45-08:00</updated>
    <id>http://euccas.github.io/blog/20161205/mongodb-training-mongodb-for-developers-python</id>
    <content type="html"><![CDATA[<p>昨晚提交了MongoDB University的培训课程 <a href="https://university.mongodb.com/courses/M101P/about">M101P: MongoDB for Developers (Python)</a> 的最后一次测试，这历时七周的课程告一段落。这个课程虽然是属于入门级，但是它覆盖了MongoDB各个方面，有不错的课程结构。短时间内，可以让开发者掌握和MongoDB有关的日常开发中所需要掌握的大部分知识和技能。</p>

<p>在学习其他数据库时，也不妨参照这个结构来全面掌握。</p>

<!--more-->

<ul>
  <li>
    <p><strong>Introduction and Overview</strong></p>
  </li>
  <li><strong>CRUD: Creating, Reading and Updating Data</strong>
    <ul>
      <li>Mongo shell</li>
      <li>Find, Insert, Update, Delete</li>
      <li>Query operators, update operators</li>
    </ul>
  </li>
  <li><strong>Schema Design</strong>
    <ul>
      <li>Live without constraints or transactions</li>
      <li>One to one relations, one to many relations, many to many relations</li>
      <li>Embedding, handle blobs</li>
    </ul>
  </li>
  <li><strong>Performance</strong>
    <ul>
      <li>Indexes</li>
      <li>Explain and profiling</li>
    </ul>
  </li>
  <li><strong>Aggregation Framework</strong>
    <ul>
      <li>Aggregation pipeline</li>
      <li>Aggregation expressions: sum, avg, addToSet, push, max, min, group,  project, match, text, sort, limit, skip, unwind, etc.</li>
    </ul>
  </li>
  <li><strong>Application Engineering</strong>
    <ul>
      <li>Write consistency</li>
      <li>Replication, create a replica set</li>
      <li>Failover and rollback</li>
      <li>Sharding</li>
    </ul>
  </li>
  <li><strong>Case Studies</strong>
    <ul>
      <li>Interview with MongoDB users from Facebook and Codecademy</li>
      <li>Discuss MongoDB usages in real life projects</li>
    </ul>
  </li>
</ul>

<p>我在课程期间的笔记和练习都保存在GitHub Repository - <a href="https://github.com/euccas/mongodb-for-developers-M101P">euccas/MongoDB-for-Developers-M101P</a></p>

<p>如果是偏重于Web开发，可以参加另一个培训课程:  <a href="https://university.mongodb.com/courses/M101JS/about">M101JS: MongoDB for Node.js Developers</a>. M101JS课程和M101P有类似的结构，区别在于开发语言从Python变为Node.js.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Tips]]></title>
    <link href="http://euccas.github.io/blog/20161011/octopress-tips.html"/>
    <updated>2016-10-11T22:36:44-07:00</updated>
    <id>http://euccas.github.io/blog/20161011/octopress-tips</id>
    <content type="html"><![CDATA[<p>使用Octopress搭建这个blog已经有一段时间了，记录几个使用中需要注意的Tips.</p>

<h1 id="tip-1-clone-repo">Tip 1: Clone Repo</h1>

<p>如果需要重新复制一份已经存在的blog repo，在重新复制的blog repo上继续发布更新blog，那么需要注意：</p>

<p>首先需要复制的repo是source branch.</p>

<p>如果repo的默认branch已经设定为source branch:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone &lt;repo url&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<p>如果repo的默认branch设定为master branch:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone &lt;repo url&gt;
</span><span class="line">git pull origin source</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后需要把master branch复制到<code>_deploy</code>目录。注意<code>_deploy</code>目录是在Octopress生成post的过程中必须存在的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone &lt;repo url&gt; _deploy
</span><span class="line">cd _deploy
</span><span class="line">git pull origin master</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="tip-2-push-changes-to-source">Tip 2: Push Changes to Source</h1>

<p>使用<code>rake gen_deploy</code>将改动发布到<code>master branch</code>之后，还需要把source的改动也提交到<code>source branch</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git push origin source</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="tip-3-execute-rake-commands">Tip 3: Execute Rake Commands</h1>

<p>如果因为<code>rake</code>版本问题造成<code>rake</code> command不能够在repo中执行，就需要使用<code>bundle exec rake</code>执行。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bundle exec rake new_post
</span><span class="line">bundle exec rake generate
</span><span class="line">bundle exec rake preview
</span><span class="line">bundle exec rake deploy</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="tip-4-errors-in-gendeploy">Tip 4: Errors in gen_deploy</h1>

<p><code>rake gen_deploy</code>的过程中，如果在<code>generate</code>步骤中出现错误（比如部分post的文本不符合markdown语法），一些情况下可能会造成generate目录中的文件被删除。而<code>gen_deploy</code>过程此时并不会结束，<code>deploy</code>会继续进行，这样最终的commit就会把原来已经发布的blog内容删除。防止出现这种问题的安全做法是分步执行<code>rake generate</code>和<code>rake deploy</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Additional Packages in WinPython]]></title>
    <link href="http://euccas.github.io/blog/20161011/install-additional-packages-in-winpython.html"/>
    <updated>2016-10-11T17:11:51-07:00</updated>
    <id>http://euccas.github.io/blog/20161011/install-additional-packages-in-winpython</id>
    <content type="html"><![CDATA[<p>For people who need use portable Python on Windows, <a href="https://winpython.github.io/">WinPython</a> is a good choice. WinPython is a free open-source portable distribution of Python. The project is hosted on <a href="https://github.com/winpython">github</a>. It is also a good alternative to <a href="http://portablepython.com/">Portable Python</a>, which is not being developed anymore.</p>

<p>In this post I’ll show you how could you install additional packages to WinPython.</p>

<h1 id="install-winpython">Install WinPython</h1>

<p>WinPython is portable. It means that you can download WinPython from the <a href="http://winpython.sourceforge.net/">WinPython download page</a>, add it to your system PATH, and start using it without any installation.</p>

<!--more-->

<ul>
  <li>Unzip the downloaded WinPython Package to a local directory, eg. <code>C:\WinPython</code>.</li>
  <li>Add the local directory path to your system’s <code>PATH</code> variable. You can use Windows command <code>set</code> or <code>setx</code>.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   set PATH=C:\WinPython\;%PATH%</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now you can open a Windows cmd prompt, and test your installed python version.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">where python
</span><span class="line">&gt;&gt;&gt; C:\WinPython\python.exe</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="install-a-package">Install a package</h1>

<p>You can install a Python Package to WinPython using <code>pip</code>. If you have other versions of Python installed on your computer, you’ll need make sure the <code>pip</code> you use actually is the one WinPython provides.</p>

<p>Where is the <code>pip</code>?</p>

<p>It’s in the <code>Scripts</code> directory of the WinPython path.
For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">C:\WinPython\Scripts</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now you can use the WinPython <code>pip</code> to install additional Python packages.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;WinPython Path&gt;\Scripts\pip install &lt;package name&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If the installation successfully done, you will find the installed packages in WinPython’s library path.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;WinPython Path&gt;\Lib\site-packages\&lt;package name&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s it! Your Python package is ready to use!</p>

]]></content>
  </entry>
  
</feed>
